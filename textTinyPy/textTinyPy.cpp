/* Generated by Cython 0.25.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "textTinyPy/cpp_src/UTILS.h", 
            "textTinyPy/cpp_src/batch_tokenization.h", 
            "textTinyPy/cpp_src/term_matrix.h", 
            "textTinyPy/cpp_src/token_big_files.h", 
            "textTinyPy/cpp_src/token_stats.h", 
            "textTinyPy/cpp_src/tokenization.h"
        ], 
        "extra_compile_args": [
            "-std=c++11", 
            "-lboost_locale", 
            "-lboost_system", 
            "-fopenmp"
        ], 
        "extra_link_args": [
            "-std=c++11", 
            "-lboost_locale", 
            "-lboost_system", 
            "-fopenmp"
        ], 
        "include_dirs": [
            "."
        ], 
        "language": "c++", 
        "libraries": [
            "armadillo"
        ]
    }, 
    "module_name": "textTinyPy.textTinyPy"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_2"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__textTinyPy__textTinyPy
#define __PYX_HAVE_API__textTinyPy__textTinyPy
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <unordered_map>
#include <map>
#include <string.h>
#include <string>
#include <vector>
#include "cpp_src/tokenization.h"
#include "cpp_src/token_big_files.h"
#include "cpp_src/batch_tokenization.h"
#include "cpp_src/token_stats.h"
#include "cpp_src/term_matrix.h"
#include "cpp_src/UTILS.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "textTinyPy/textTinyPy.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer;
struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files;
struct __pyx_obj_10textTinyPy_10textTinyPy_utils;
struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats;
struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix;

/* "textTinyPy/textTinyPy.pyx":50
 * 
 * 
 * cdef class tokenizer:             # <<<<<<<<<<<<<<
 * 
 *     cdef big_files* bgf
 */
struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer {
  PyObject_HEAD
  big_files *bgf;
  BATCH_TOKEN *btk;
};


/* "textTinyPy/textTinyPy.pyx":539
 * 
 * 
 * cdef class big_text_files:             # <<<<<<<<<<<<<<
 * 
 *     cdef big_files* bgf
 */
struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files {
  PyObject_HEAD
  big_files *bgf;
};


/* "textTinyPy/textTinyPy.pyx":882
 * 
 * 
 * cdef class utils:             # <<<<<<<<<<<<<<
 * 
 *     cdef big_files* bgf
 */
struct __pyx_obj_10textTinyPy_10textTinyPy_utils {
  PyObject_HEAD
  big_files *bgf;
  TOKEN_stats *tks;
  BATCH_TOKEN *btk;
  utils_cpp *utl;
};


/* "textTinyPy/textTinyPy.pyx":1401
 * 
 * 
 * cdef class token_stats:             # <<<<<<<<<<<<<<
 * 
 *     cdef TOKEN_stats* tks
 */
struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats {
  PyObject_HEAD
  TOKEN_stats *tks;
  PyObject *result_counts;
  PyObject *result_collocations;
  PyObject *result_look_up_tbl;
};


/* "textTinyPy/textTinyPy.pyx":1792
 * 
 * 
 * cdef class docs_matrix:             # <<<<<<<<<<<<<<
 * 
 *     cdef term_matrix* dtm
 */
struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix {
  PyObject_HEAD
  term_matrix *dtm;
  bool FLAG_output_long;
  bool FLAG_doc_term_mat;
  bool tf_idf_flag;
  bool dtm_or_tdm;
  PyObject *result_struct_matrix;
  PyObject *adjust_sparsity_matrix;
  PyObject *sp_mat;
  PyObject *dims;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

static PyObject* __pyx_convert__to_py_struct__struct_cor_assoc(struct struct_cor_assoc s);
/* CIntFromPy.proto */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'textTinyPy.textTinyPy' */
static PyTypeObject *__pyx_ptype_10textTinyPy_10textTinyPy_tokenizer = 0;
static PyTypeObject *__pyx_ptype_10textTinyPy_10textTinyPy_big_text_files = 0;
static PyTypeObject *__pyx_ptype_10textTinyPy_10textTinyPy_utils = 0;
static PyTypeObject *__pyx_ptype_10textTinyPy_10textTinyPy_token_stats = 0;
static PyTypeObject *__pyx_ptype_10textTinyPy_10textTinyPy_docs_matrix = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(const std::vector<std::vector<std::string> >  &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____int(std::unordered_map<std::string,int>  const &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<int,std::vector<std::string> >  const &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___(std::unordered_map<std::string,std::unordered_map<std::string,int> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<std::string,std::vector<std::string> >  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_PY_LONG_LONG(const std::vector<PY_LONG_LONG>  &); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct__struct_cor_assoc(const std::vector<struct struct_cor_assoc>  &); /*proto*/
#define __Pyx_MODULE_NAME "textTinyPy.textTinyPy"
int __pyx_module_is_main_textTinyPy__textTinyPy = 0;

/* Implementation of 'textTinyPy.textTinyPy' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_any;
static const char __pyx_k_[] = "\n";
static const char __pyx_k_GB[] = "GB";
static const char __pyx_k_KB[] = "KB";
static const char __pyx_k_MB[] = "MB";
static const char __pyx_k__2[] = "";
static const char __pyx_k__3[] = " \r\n\t.,;:()?!//";
static const char __pyx_k__5[] = " ";
static const char __pyx_k__6[] = "/";
static const char __pyx_k_l1[] = "l1";
static const char __pyx_k_l2[] = "l2";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k__27[] = "_";
static const char __pyx_k__37[] = " %";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_sep[] = "sep";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_the[] = "the '";
static const char __pyx_k_txt[] = ".txt";
static const char __pyx_k_NULL[] = "NULL";
static const char __pyx_k_dice[] = "dice";
static const char __pyx_k_drop[] = "drop";
static const char __pyx_k_freq[] = "freq";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_keep[] = "keep";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_rows[] = "rows";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_term[] = "term";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_unit[] = "unit";
static const char __pyx_k_word[] = "word";
static const char __pyx_k_zulu[] = "zulu";
static const char __pyx_k_Terms[] = "Terms";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_czech[] = "czech";
static const char __pyx_k_dutch[] = "dutch";
static const char __pyx_k_greek[] = "greek";
static const char __pyx_k_hausa[] = "hausa";
static const char __pyx_k_hindi[] = "hindi";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_irish[] = "irish";
static const char __pyx_k_major[] = "major";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_terms[] = "terms";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_where[] = "where";
static const char __pyx_k_word1[] = "word1";
static const char __pyx_k_word2[] = "word2";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arabic[] = "arabic";
static const char __pyx_k_basque[] = "basque";
static const char __pyx_k_breton[] = "breton";
static const char __pyx_k_cosine[] = "cosine";
static const char __pyx_k_counts[] = "counts";
static const char __pyx_k_danish[] = "danish";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_french[] = "french";
static const char __pyx_k_german[] = "german";
static const char __pyx_k_header[] = "header";
static const char __pyx_k_hebrew[] = "hebrew";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_locale[] = "locale";
static const char __pyx_k_maxint[] = "maxint";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_n_gram[] = "n_gram";
static const char __pyx_k_number[] = "number";
static const char __pyx_k_orient[] = "orient";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_polish[] = "polish";
static const char __pyx_k_slovak[] = "slovak";
static const char __pyx_k_tf_idf[] = "tf_idf";
static const char __pyx_k_yoruba[] = "yoruba";
static const char __pyx_k_MAX_VAL[] = "MAX_VAL";
static const char __pyx_k_batches[] = "batches";
static const char __pyx_k_bengali[] = "bengali";
static const char __pyx_k_catalan[] = "catalan";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_english[] = "english";
static const char __pyx_k_finnish[] = "finnish";
static const char __pyx_k_italian[] = "italian";
static const char __pyx_k_latvian[] = "latvian";
static const char __pyx_k_marathi[] = "marathi";
static const char __pyx_k_maxsize[] = "maxsize";
static const char __pyx_k_n_grams[] = "n_grams";
static const char __pyx_k_persian[] = "persian";
static const char __pyx_k_russian[] = "russian";
static const char __pyx_k_somalia[] = "somalia";
static const char __pyx_k_spanish[] = "spanish";
static const char __pyx_k_stemmer[] = "stemmer";
static const char __pyx_k_swahili[] = "swahili";
static const char __pyx_k_swedish[] = "swedish";
static const char __pyx_k_threads[] = "threads";
static const char __pyx_k_toarray[] = "toarray";
static const char __pyx_k_turkish[] = "turkish";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_armenian[] = "armenian";
static const char __pyx_k_as_token[] = "as_token";
static const char __pyx_k_builtins[] = "builtins";
static const char __pyx_k_croatian[] = "croatian";
static const char __pyx_k_decimals[] = "decimals";
static const char __pyx_k_diagonal[] = "diagonal";
static const char __pyx_k_estonian[] = "estonian";
static const char __pyx_k_galician[] = "galician";
static const char __pyx_k_language[] = "language";
static const char __pyx_k_read_csv[] = "read_csv";
static const char __pyx_k_romanian[] = "romanian";
static const char __pyx_k_to_array[] = "to_array";
static const char __pyx_k_to_lower[] = "to_lower";
static const char __pyx_k_to_upper[] = "to_upper";
static const char __pyx_k_x_vector[] = "x_vector";
static const char __pyx_k_xml_path[] = "xml_path";
static const char __pyx_k_xml_root[] = "xml_root";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_afrikaans[] = "afrikaans";
static const char __pyx_k_as_matrix[] = "as_matrix";
static const char __pyx_k_ascending[] = "ascending";
static const char __pyx_k_bulgarian[] = "bulgarian";
static const char __pyx_k_empty_key[] = "empty_key";
static const char __pyx_k_end_query[] = "end_query";
static const char __pyx_k_frequency[] = "frequency";
static const char __pyx_k_from_dict[] = "from_dict";
static const char __pyx_k_hungarian[] = "hungarian";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_min_lines[] = "min_lines";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_norwegian[] = "norwegian";
static const char __pyx_k_sentence1[] = "sentence1";
static const char __pyx_k_sentence2[] = "sentence2";
static const char __pyx_k_separator[] = "separator";
static const char __pyx_k_slovenian[] = "slovenian";
static const char __pyx_k_stopwords[] = "stopwords";
static const char __pyx_k_LOCALE_UTF[] = "LOCALE_UTF";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_basestring[] = "basestring";
static const char __pyx_k_characters[] = "characters";
static const char __pyx_k_child_keys[] = "child_keys";
static const char __pyx_k_csc_matrix[] = "csc_matrix";
static const char __pyx_k_csr_matrix[] = "csr_matrix";
static const char __pyx_k_indonesian[] = "indonesian";
static const char __pyx_k_input_file[] = "input_file";
static const char __pyx_k_input_list[] = "input_list";
static const char __pyx_k_keep_terms[] = "keep_terms";
static const char __pyx_k_listvalues[] = "listvalues";
static const char __pyx_k_max_n_gram[] = "max_n_gram";
static const char __pyx_k_min_n_gram[] = "min_n_gram";
static const char __pyx_k_path_2file[] = "path_2file";
static const char __pyx_k_portuguese[] = "portuguese";
static const char __pyx_k_py_version[] = "py_version";
static const char __pyx_k_sort_terms[] = "sort_terms";
static const char __pyx_k_textTinyPy[] = "textTinyPy";
static const char __pyx_k_trim_token[] = "trim_token";
static const char __pyx_k_correlation[] = "correlation";
static const char __pyx_k_dice_n_gram[] = "dice_n_gram";
static const char __pyx_k_dice_thresh[] = "dice_thresh";
static const char __pyx_k_levenshtein[] = "levenshtein";
static const char __pyx_k_skip_n_gram[] = "skip_n_gram";
static const char __pyx_k_start_query[] = "start_query";
static const char __pyx_k_warning_the[] = "warning: the '";
static const char __pyx_k_write_2file[] = "write_2file";
static const char __pyx_k_child_values[] = "child_values";
static const char __pyx_k_future_utils[] = "future.utils";
static const char __pyx_k_input_string[] = "input_string";
static const char __pyx_k_max_num_char[] = "max_num_char";
static const char __pyx_k_min_num_char[] = "min_num_char";
static const char __pyx_k_path_2folder[] = "path_2folder";
static const char __pyx_k_scipy_sparse[] = "scipy.sparse";
static const char __pyx_k_split_string[] = "split_string";
static const char __pyx_k_trimmed_line[] = "trimmed_line";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_words_vector[] = "words_vector";
static const char __pyx_k_max_num_chars[] = "max_num_chars";
static const char __pyx_k_ngram_overlap[] = "ngram_overlap";
static const char __pyx_k_past_builtins[] = "past.builtins";
static const char __pyx_k_pkg_resources[] = "pkg_resources";
static const char __pyx_k_result_nested[] = "result_nested";
static const char __pyx_k_skip_distance[] = "skip_distance";
static const char __pyx_k_sparsity_cols[] = "sparsity_cols";
static const char __pyx_k_sparsity_rows[] = "sparsity_rows";
static const char __pyx_k_stemmer_gamma[] = "stemmer_gamma";
static const char __pyx_k_stemmer_ngram[] = "stemmer_ngram";
static const char __pyx_k_file_delimiter[] = "file_delimiter";
static const char __pyx_k_read_delimiter[] = "read_delimiter";
static const char __pyx_k_remove_numbers[] = "remove_numbers";
static const char __pyx_k_sparsity_terms[] = "sparsity_terms";
static const char __pyx_k_input_path_file[] = "input_path_file";
static const char __pyx_k_porter2_stemmer[] = "porter2_stemmer";
static const char __pyx_k_sparsity_counts[] = "sparsity_counts";
static const char __pyx_k_sparsity_thresh[] = "sparsity_thresh";
static const char __pyx_k_split_separator[] = "split_separator";
static const char __pyx_k_stemmer_batches[] = "stemmer_batches";
static const char __pyx_k_vocabulary_path[] = "vocabulary_path";
static const char __pyx_k_concat_delimiter[] = "concat_delimiter";
static const char __pyx_k_n_gram_delimiter[] = "n_gram_delimiter";
static const char __pyx_k_ngram_sequential[] = "ngram_sequential";
static const char __pyx_k_output_path_file[] = "output_path_file";
static const char __pyx_k_output_token_txt[] = "output_token.txt";
static const char __pyx_k_print_every_rows[] = "print_every_rows";
static const char __pyx_k_remove_stopwords[] = "remove_stopwords";
static const char __pyx_k_stemmer_truncate[] = "stemmer_truncate";
static const char __pyx_k_vector_documents[] = "vector_documents";
static const char __pyx_k_REMOVE_characters[] = "REMOVE_characters";
static const char __pyx_k_input_path_folder[] = "input_path_folder";
static const char __pyx_k_resource_filename[] = "resource_filename";
static const char __pyx_k_save_2single_file[] = "save_2single_file";
static const char __pyx_k_increment_batch_no[] = "increment_batch_no";
static const char __pyx_k_output_path_folder[] = "output_path_folder";
static const char __pyx_k_read_file_delimiter[] = "read_file_delimiter";
static const char __pyx_k_a_sparsity_thresh_of[] = "a sparsity_thresh of ";
static const char __pyx_k_path_2documents_file[] = "path_2documents_file";
static const char __pyx_k_raise_with_traceback[] = "raise_with_traceback";
static const char __pyx_k_vocabulary_path_file[] = "vocabulary_path_file";
static const char __pyx_k_variable_sums_to_zero[] = "' variable sums to zero";
static const char __pyx_k_sparsity_of_the_matrix[] = "sparsity of the matrix: ";
static const char __pyx_k_remove_punctuation_string[] = "remove_punctuation_string";
static const char __pyx_k_remove_punctuation_vector[] = "remove_punctuation_vector";
static const char __pyx_k_locale_stopword_encoding_csv[] = "locale_stopword_encoding.csv";
static const char __pyx_k_returns_an_empty_sparse_matrix[] = " returns an empty sparse matrix. Consider increasing the sparsity_thresh";
static const char __pyx_k_available_normalization_methods[] = "available normalization methods are 'l1' or 'l2'";
static const char __pyx_k_available_units_are_KB_MB_or_GB[] = "available units are 'KB', 'MB' or 'GB'";
static const char __pyx_k_give_the_path_to_a_valid_folder[] = "give the path to a valid folder in case that the batches parameter is not None";
static const char __pyx_k_term_does_not_exist_in_the_term[] = "' term does not exist in the terms list";
static const char __pyx_k_the_LOCALE_UTF_parameter_should[] = "the LOCALE_UTF parameter should be of type string";
static const char __pyx_k_the_REMOVE_characters_parameter[] = "the REMOVE_characters parameter should be of type string";
static const char __pyx_k_the_Terms_parameter_should_be_a[] = "the Terms parameter should be a list of character strings";
static const char __pyx_k_the_batches_parameter_should_be[] = "the batches parameter should be of type integer and greater than 1";
static const char __pyx_k_the_characters_parameter_should[] = "the characters parameter should be of type integer and greater than 0";
static const char __pyx_k_the_input_file_parameter_should[] = "the input_file parameter should be of type string";
static const char __pyx_k_the_input_list_parameter_should[] = "the input_list parameter should be of type list";
static const char __pyx_k_the_input_path_folder_parameter[] = "the input_path_folder parameter should be of type string";
static const char __pyx_k_the_keep_parameter_should_be_of[] = "the keep parameter should be of type int";
static const char __pyx_k_the_keep_terms_parameter_should[] = "the keep_terms parameter should be of type integer and greater than 0";
static const char __pyx_k_the_max_n_gram_parameter_should[] = "the max_n_gram parameter should be of type integer and greater than 0";
static const char __pyx_k_the_min_n_gram_parameter_should[] = "the min_n_gram parameter should be of type integer and greater than 0";
static const char __pyx_k_the_n_grams_parameter_should_be[] = "the n_grams parameter should be of type integer and greater than 0";
static const char __pyx_k_the_number_of_threads_should_be[] = "the number of threads should be greater or equal to 1";
static const char __pyx_k_the_path_2file_parameter_should[] = "the path_2file parameter should be of type string";
static const char __pyx_k_the_rows_parameter_should_be_of[] = "the rows parameter should be of type integer and greater than 0";
static const char __pyx_k_the_save_2single_file_parameter[] = "the save_2single_file parameter should be of type boolean";
static const char __pyx_k_the_sort_terms_parameter_should[] = "the sort_terms parameter should be of type boolean";
static const char __pyx_k_the_stemmer_parameter_should_be[] = "the stemmer parameter should be of type string";
static const char __pyx_k_the_threads_parameter_should_be[] = "the threads parameter should be of type integer and greater than 0";
static const char __pyx_k_the_trim_token_parameter_should[] = "the trim_token parameter should be of type boolean";
static const char __pyx_k_the_unit_parameter_should_be_of[] = "the unit parameter should be of type string";
static const char __pyx_k_the_verbose_parameter_should_be[] = "the verbose parameter should be of type boolean";
static const char __pyx_k_the_word_parameter_should_be_of[] = "the word parameter should be of type string";
static const char __pyx_k_warning_the_following_terms_sum[] = "warning: the following terms sum to zero : ";
static const char __pyx_k_available_languages_in_case_of_s[] = "available languages in case of stop-word removal are 'afrikaans', 'arabic', 'armenian',                                                                                'basque', 'bengali', 'breton', 'bulgarian', 'catalan', 'croatian', 'czech','danish', 'dutch',                                                                                'english', 'estonian', 'finnish', 'french', 'galician', 'german', 'greek', 'hausa', 'hebrew',                                                                                'hindi', 'hungarian', 'indonesian', 'irish', 'italian', 'latvian', 'marathi', 'norwegian',                                                                                'persian', 'polish', 'portuguese', 'romanian', 'russian', 'slovak', 'slovenian', 'somalia',                                                                                'spanish', 'swahili', 'swedish', 'turkish', 'yoruba', 'zulu.                                                                                                                                                                 A user defined character list of stop words can be used as input, if the target language is not included";
static const char __pyx_k_available_methods_are_dice_leven[] = "available methods are 'dice', 'levenshtein' or 'cosine'";
static const char __pyx_k_available_stemmers_are_porter2_s[] = "available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap";
static const char __pyx_k_either_the_vector_documents_or_t[] = "either the vector_documents or the path_2documents_file can be None but not both";
static const char __pyx_k_in_case_that_the_batches_paramet[] = "in case that the batches parameter is not None the input_string parameter should be a valid path to a file";
static const char __pyx_k_none_of_the_choosen_Terms_are_pr[] = "none of the choosen Terms are present in the terms list";
static const char __pyx_k_run_first_one_of_the_document_te[] = "run first one of the 'document_term_matrix', 'term_document_matrix' and/or 'Term_Matrix_Adjust' methods and then require the corpus terms";
static const char __pyx_k_run_first_the_Term_Matrix_method[] = "run first the Term_Matrix method";
static const char __pyx_k_the_as_token_parameter_should_be[] = "the as_token parameter should be of type boolean";
static const char __pyx_k_the_concat_delimiter_parameter_s[] = "the concat_delimiter parameter should be of type string";
static const char __pyx_k_the_diagonal_parameter_should_be[] = "the diagonal parameter should be of type boolean";
static const char __pyx_k_the_dice_n_gram_parameter_should[] = "the dice_n_gram parameter should be of type int and greater than 0";
static const char __pyx_k_the_dice_thresh_parameter_should[] = "the dice_thresh parameter should be of type float";
static const char __pyx_k_the_empty_key_parameter_should_b[] = "the empty_key parameter should be of type string";
static const char __pyx_k_the_end_query_parameter_should_b[] = "the end_query parameter should be of type string";
static const char __pyx_k_the_file_delimiter_parameter_sho[] = "the file_delimiter parameter should be of type string";
static const char __pyx_k_the_file_delimiter_should_be_a_s[] = "the file_delimiter should be a single character string";
static const char __pyx_k_the_increment_batch_no_parameter[] = "the increment_batch_no parameter should be of type integer and greater or equal to 0";
static const char __pyx_k_the_input_path_file_parameter_sh[] = "the input_path_file parameter should be of type string";
static const char __pyx_k_the_input_string_parameter_shoul[] = "the input_string parameter should be of type string";
static const char __pyx_k_the_language_parameter_should_be[] = "the language parameter should be of type string";
static const char __pyx_k_the_max_num_char_parameter_shoul[] = "the max_num_char parameter should be of type integer and greater than the min_num_char";
static const char __pyx_k_the_max_num_chars_parameter_shou[] = "the max_num_chars parameter should be of type integer and at least 1";
static const char __pyx_k_the_min_lines_parameter_should_b[] = "the min_lines parameter should be of type integer and at least 1";
static const char __pyx_k_the_min_num_char_parameter_shoul[] = "the min_num_char parameter should be of type integer and greater than 0";
static const char __pyx_k_the_most_frequent_terms_method_i[] = "the most_frequent_terms method is invalid if the normalize parameter is not None or the tf_idf parameter is TRUE";
static const char __pyx_k_the_n_gram_delimiter_parameter_s[] = "the n_gram_delimiter parameter should be of type string";
static const char __pyx_k_the_n_gram_parameter_should_be_o[] = "the n_gram parameter should be of type string";
static const char __pyx_k_the_number_parameter_should_be_o[] = "the number parameter should be of type int";
static const char __pyx_k_the_output_path_file_parameter_s[] = "the output_path_file parameter should be of type string";
static const char __pyx_k_the_output_path_folder_parameter[] = "the output_path_folder parameter should be of type string";
static const char __pyx_k_the_path_2documents_file_paramet[] = "the path_2documents_file parameter should be of type string";
static const char __pyx_k_the_path_2folder_parameter_shoul[] = "the path_2folder parameter should be of type string";
static const char __pyx_k_the_print_every_rows_parameter_s[] = "the print_every_rows parameter should be of type integer";
static const char __pyx_k_the_read_delimiter_parameter_sho[] = "the read_delimiter parameter should be of type integer";
static const char __pyx_k_the_read_delimiter_should_be_a_s[] = "the read_delimiter should be a single character string";
static const char __pyx_k_the_read_file_delimiter_paramete[] = "the read_file_delimiter parameter should be of type string";
static const char __pyx_k_the_read_file_delimiter_should_b[] = "the read_file_delimiter should be a single character string";
static const char __pyx_k_the_remove_numbers_parameter_sho[] = "the remove_numbers parameter should be of type boolean";
static const char __pyx_k_the_remove_punctuation_string_pa[] = "the remove_punctuation_string parameter should be of type boolean";
static const char __pyx_k_the_remove_punctuation_vector_pa[] = "the remove_punctuation_vector parameter should be of type boolean";
static const char __pyx_k_the_remove_stopwords_parameter_s[] = "the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )";
static const char __pyx_k_the_sentence1_parameter_should_b[] = "the sentence1 parameter should be of type string";
static const char __pyx_k_the_sentence2_parameter_should_b[] = "the sentence2 parameter should be of type string";
static const char __pyx_k_the_separator_parameter_should_b[] = "the separator parameter should be of type string";
static const char __pyx_k_the_skip_distance_parameter_shou[] = "the skip_distance parameter should be of type integer and greater or equal to 0";
static const char __pyx_k_the_skip_n_gram_parameter_should[] = "the skip_n_gram parameter should be of type integer and greater than 0";
static const char __pyx_k_the_sparsity_thresh_parameter_sh[] = "the sparsity_thresh parameter should be of type float and it's range should be between 0.0 and 1.0";
static const char __pyx_k_the_specified_n_gram_is_not_incl[] = "the specified 'n_gram' is not included in the look_up_table dictionary. Return the 'look_up_table()' function to see the list of the available n_grams";
static const char __pyx_k_the_specified_number_is_not_incl[] = "the specified 'number' is not included in the count_character dictionary. Return the 'count_character()' function to see the list of the available numbers";
static const char __pyx_k_the_specified_word_is_not_includ[] = "the specified 'word' is not included in the collocations dictionary. Return the 'collocation_words()' function to see the list of the available words";
static const char __pyx_k_the_split_separator_parameter_sh[] = "the split_separator parameter should be of type string";
static const char __pyx_k_the_split_string_parameter_shoul[] = "the split_string parameter should be of type boolean";
static const char __pyx_k_the_start_query_parameter_should[] = "the start_query parameter should be of type string";
static const char __pyx_k_the_stemmer_batches_parameter_sh[] = "the stemmer_batches parameter should be of type integer and greater than 0";
static const char __pyx_k_the_stemmer_gamma_parameter_shou[] = "the stemmer_gamma parameter should be of type float and greater or equal to 0.0";
static const char __pyx_k_the_stemmer_ngram_parameter_shou[] = "the stemmer_ngram parameter should be of type integer and greater than 0";
static const char __pyx_k_the_stemmer_truncate_parameter_s[] = "the stemmer_truncate parameter should be of type integer and greater than 0";
static const char __pyx_k_the_tf_idf_parameter_should_be_o[] = "the tf_idf parameter should be of type boolean";
static const char __pyx_k_the_to_array_parameter_should_be[] = "the to_array parameter should be of type boolean";
static const char __pyx_k_the_to_lower_parameter_should_be[] = "the to_lower parameter should be of type boolean";
static const char __pyx_k_the_to_upper_parameter_should_be[] = "the to_upper parameter should be of type boolean";
static const char __pyx_k_the_trimmed_line_parameter_shoul[] = "the trimmed_line parameter should be of type boolean";
static const char __pyx_k_the_upper_parameter_should_be_of[] = "the upper parameter should be of type boolean";
static const char __pyx_k_the_vector_documents_parameter_s[] = "the vector_documents parameter should be of type list";
static const char __pyx_k_the_vocabulary_path_file_paramet[] = "the vocabulary_path_file parameter should be of type string";
static const char __pyx_k_the_vocabulary_path_parameter_sh[] = "the vocabulary_path parameter should be of type string";
static const char __pyx_k_the_word1_parameter_should_be_of[] = "the word1 parameter should be of type string";
static const char __pyx_k_the_word2_parameter_should_be_of[] = "the word2 parameter should be of type string";
static const char __pyx_k_the_words_vector_parameter_shoul[] = "the words_vector parameter should be of type list";
static const char __pyx_k_the_write_2file_parameter_should[] = "the write_2file parameter should be of type string";
static const char __pyx_k_the_x_vector_parameter_should_be[] = "the x_vector parameter should be of type list";
static const char __pyx_k_the_xml_path_parameter_should_be[] = "the xml_path parameter should be of type string";
static const char __pyx_k_the_xml_root_parameter_should_be[] = "the xml_root parameter should be of type string";
static const char __pyx_k_the_batches_parameter_should_be_2[] = "the batches parameter should be of type integer and at least 2";
static const char __pyx_k_the_input_file_parameter_should_2[] = "the input_file parameter should be a valid path to a file";
static const char __pyx_k_the_input_path_folder_parameter_2[] = "the input_path_folder parameter should end in slash";
static const char __pyx_k_the_input_path_folder_parameter_3[] = "the input_path_folder parameter should be a valid path to a file";
static const char __pyx_k_the_keep_terms_parameter_should_2[] = "the keep_terms parameter should be of type integer and greater or equal to 0";
static const char __pyx_k_the_max_n_gram_parameter_should_2[] = "the max_n_gram parameter should be greater than the min_n_gram";
static const char __pyx_k_the_n_grams_parameter_should_be_2[] = "the n_grams parameter should be of type int and greater than 0";
static const char __pyx_k_the_path_2file_parameter_should_2[] = "the path_2file parameter should be a valid path to a file";
static const char __pyx_k_the_threads_parameter_should_be_2[] = "the threads parameter should be of type int and greater than 0";
static const char __pyx_k_the_verbose_parameter_should_be_2[] = "the verbose parameter should be either TRUE or FALSE";
static const char __pyx_k_available_languages_in_case_of_s_2[] = "available languages in case of stop-word removal are 'afrikaans', 'arabic', 'armenian',                                                                                'basque', 'bengali', 'breton', 'bulgarian', 'catalan', 'croatian', 'czech','danish', 'dutch',                                                                                'english', 'estonian', 'finnish', 'french', 'galician', 'german', 'greek', 'hausa', 'hebrew',                                                                                'hindi', 'hungarian', 'indonesian', 'irish', 'italian', 'latvian', 'marathi', 'norwegian',                                                                                'persian', 'polish', 'portuguese', 'romanian', 'russian', 'slovak', 'slovenian', 'somalia',                                                                                'spanish', 'swahili', 'swedish', 'turkish', 'yoruba', 'zulu.";
static const char __pyx_k_either_the_vector_documents_or_t_2[] = "either the vector_documents or the path_2documents_file can be NOT None but not both";
static const char __pyx_k_run_first_one_of_the_document_te_2[] = "run first one of the 'document_term_matrix' or 'term_document_matrix' methods";
static const char __pyx_k_the_input_path_file_parameter_sh_2[] = "the input_path_file parameter should be a valid path to a file";
static const char __pyx_k_the_language_parameter_should_be_2[] = "the 'language' parameter should be a character string";
static const char __pyx_k_the_output_path_folder_parameter_2[] = "the output_path_folder parameter should end in slash";
static const char __pyx_k_the_output_path_folder_parameter_3[] = "the output_path_folder parameter should be a valid path to a folder";
static const char __pyx_k_the_path_2documents_file_paramet_2[] = "the path_2documents_file parameter should be a valid path to a file";
static const char __pyx_k_the_path_2folder_parameter_shoul_2[] = "the path_2folder parameter should end in slash";
static const char __pyx_k_the_vocabulary_path_parameter_sh_2[] = "the vocabulary_path parameter should be a valid path to a folder";
static const char __pyx_k_the_vocabulary_path_parameter_sh_3[] = "the vocabulary_path parameter should end in slash";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_GB;
static PyObject *__pyx_n_s_KB;
static PyObject *__pyx_n_s_LOCALE_UTF;
static PyObject *__pyx_n_s_MAX_VAL;
static PyObject *__pyx_n_s_MB;
static PyObject *__pyx_n_s_NULL;
static PyObject *__pyx_n_s_REMOVE_characters;
static PyObject *__pyx_n_s_Terms;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_n_s__27;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__37;
static PyObject *__pyx_kp_s__5;
static PyObject *__pyx_kp_s__6;
static PyObject *__pyx_kp_s_a_sparsity_thresh_of;
static PyObject *__pyx_n_s_afrikaans;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arabic;
static PyObject *__pyx_n_s_armenian;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_as_matrix;
static PyObject *__pyx_n_s_as_token;
static PyObject *__pyx_n_s_ascending;
static PyObject *__pyx_kp_s_available_languages_in_case_of_s;
static PyObject *__pyx_kp_s_available_languages_in_case_of_s_2;
static PyObject *__pyx_kp_s_available_methods_are_dice_leven;
static PyObject *__pyx_kp_s_available_normalization_methods;
static PyObject *__pyx_kp_s_available_stemmers_are_porter2_s;
static PyObject *__pyx_kp_s_available_units_are_KB_MB_or_GB;
static PyObject *__pyx_n_s_basestring;
static PyObject *__pyx_n_s_basque;
static PyObject *__pyx_n_s_batches;
static PyObject *__pyx_n_s_bengali;
static PyObject *__pyx_n_s_breton;
static PyObject *__pyx_n_s_builtins;
static PyObject *__pyx_n_s_bulgarian;
static PyObject *__pyx_n_s_catalan;
static PyObject *__pyx_n_s_characters;
static PyObject *__pyx_n_s_child_keys;
static PyObject *__pyx_n_s_child_values;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_concat_delimiter;
static PyObject *__pyx_n_s_correlation;
static PyObject *__pyx_n_s_cosine;
static PyObject *__pyx_n_s_counts;
static PyObject *__pyx_n_s_croatian;
static PyObject *__pyx_n_s_csc_matrix;
static PyObject *__pyx_n_s_csr_matrix;
static PyObject *__pyx_n_s_czech;
static PyObject *__pyx_n_s_danish;
static PyObject *__pyx_n_s_decimals;
static PyObject *__pyx_n_s_diagonal;
static PyObject *__pyx_n_s_dice;
static PyObject *__pyx_n_s_dice_n_gram;
static PyObject *__pyx_n_s_dice_thresh;
static PyObject *__pyx_n_s_drop;
static PyObject *__pyx_n_s_dutch;
static PyObject *__pyx_kp_s_either_the_vector_documents_or_t;
static PyObject *__pyx_kp_s_either_the_vector_documents_or_t_2;
static PyObject *__pyx_n_s_empty_key;
static PyObject *__pyx_n_s_end_query;
static PyObject *__pyx_n_s_english;
static PyObject *__pyx_n_s_estonian;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_file_delimiter;
static PyObject *__pyx_n_s_finnish;
static PyObject *__pyx_n_s_french;
static PyObject *__pyx_n_s_freq;
static PyObject *__pyx_n_s_frequency;
static PyObject *__pyx_n_s_from_dict;
static PyObject *__pyx_n_s_future_utils;
static PyObject *__pyx_n_s_galician;
static PyObject *__pyx_n_s_german;
static PyObject *__pyx_kp_s_give_the_path_to_a_valid_folder;
static PyObject *__pyx_n_s_greek;
static PyObject *__pyx_n_s_hausa;
static PyObject *__pyx_n_s_header;
static PyObject *__pyx_n_s_hebrew;
static PyObject *__pyx_n_s_hindi;
static PyObject *__pyx_n_s_hungarian;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_s_in_case_that_the_batches_paramet;
static PyObject *__pyx_n_s_increment_batch_no;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_indonesian;
static PyObject *__pyx_n_s_input_file;
static PyObject *__pyx_n_s_input_list;
static PyObject *__pyx_n_s_input_path_file;
static PyObject *__pyx_n_s_input_path_folder;
static PyObject *__pyx_n_s_input_string;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_irish;
static PyObject *__pyx_n_s_italian;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_keep;
static PyObject *__pyx_n_s_keep_terms;
static PyObject *__pyx_n_s_l1;
static PyObject *__pyx_n_s_l2;
static PyObject *__pyx_n_s_language;
static PyObject *__pyx_n_s_latvian;
static PyObject *__pyx_n_s_levenshtein;
static PyObject *__pyx_n_s_listvalues;
static PyObject *__pyx_n_s_locale;
static PyObject *__pyx_kp_s_locale_stopword_encoding_csv;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_major;
static PyObject *__pyx_n_s_marathi;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_n_gram;
static PyObject *__pyx_n_s_max_num_char;
static PyObject *__pyx_n_s_max_num_chars;
static PyObject *__pyx_n_s_maxint;
static PyObject *__pyx_n_s_maxsize;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_min_lines;
static PyObject *__pyx_n_s_min_n_gram;
static PyObject *__pyx_n_s_min_num_char;
static PyObject *__pyx_n_s_n_gram;
static PyObject *__pyx_n_s_n_gram_delimiter;
static PyObject *__pyx_n_s_n_grams;
static PyObject *__pyx_n_s_ngram_overlap;
static PyObject *__pyx_n_s_ngram_sequential;
static PyObject *__pyx_kp_s_none_of_the_choosen_Terms_are_pr;
static PyObject *__pyx_n_s_normalize;
static PyObject *__pyx_n_s_norwegian;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_number;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_orient;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_output_path_file;
static PyObject *__pyx_n_s_output_path_folder;
static PyObject *__pyx_kp_b_output_token_txt;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_past_builtins;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_path_2documents_file;
static PyObject *__pyx_n_s_path_2file;
static PyObject *__pyx_n_s_path_2folder;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_persian;
static PyObject *__pyx_n_s_pkg_resources;
static PyObject *__pyx_n_s_polish;
static PyObject *__pyx_n_s_porter2_stemmer;
static PyObject *__pyx_n_s_portuguese;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_every_rows;
static PyObject *__pyx_n_s_py_version;
static PyObject *__pyx_n_s_raise_with_traceback;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_read_csv;
static PyObject *__pyx_n_s_read_delimiter;
static PyObject *__pyx_n_s_read_file_delimiter;
static PyObject *__pyx_n_s_remove_numbers;
static PyObject *__pyx_n_s_remove_punctuation_string;
static PyObject *__pyx_n_s_remove_punctuation_vector;
static PyObject *__pyx_n_s_remove_stopwords;
static PyObject *__pyx_n_s_resource_filename;
static PyObject *__pyx_n_s_result_nested;
static PyObject *__pyx_kp_s_returns_an_empty_sparse_matrix;
static PyObject *__pyx_n_s_romanian;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_rows;
static PyObject *__pyx_kp_s_run_first_one_of_the_document_te;
static PyObject *__pyx_kp_s_run_first_one_of_the_document_te_2;
static PyObject *__pyx_kp_s_run_first_the_Term_Matrix_method;
static PyObject *__pyx_n_s_russian;
static PyObject *__pyx_n_s_save_2single_file;
static PyObject *__pyx_n_s_scipy_sparse;
static PyObject *__pyx_n_s_sentence1;
static PyObject *__pyx_n_s_sentence2;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_n_s_separator;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_skip_distance;
static PyObject *__pyx_n_s_skip_n_gram;
static PyObject *__pyx_n_s_slovak;
static PyObject *__pyx_n_s_slovenian;
static PyObject *__pyx_n_s_somalia;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_sort_terms;
static PyObject *__pyx_n_s_spanish;
static PyObject *__pyx_n_s_sparsity_cols;
static PyObject *__pyx_n_s_sparsity_counts;
static PyObject *__pyx_kp_s_sparsity_of_the_matrix;
static PyObject *__pyx_n_s_sparsity_rows;
static PyObject *__pyx_n_s_sparsity_terms;
static PyObject *__pyx_n_s_sparsity_thresh;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_split_separator;
static PyObject *__pyx_n_s_split_string;
static PyObject *__pyx_n_s_start_query;
static PyObject *__pyx_n_s_stemmer;
static PyObject *__pyx_n_s_stemmer_batches;
static PyObject *__pyx_n_s_stemmer_gamma;
static PyObject *__pyx_n_s_stemmer_ngram;
static PyObject *__pyx_n_s_stemmer_truncate;
static PyObject *__pyx_n_s_stopwords;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_swahili;
static PyObject *__pyx_n_s_swedish;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_term;
static PyObject *__pyx_kp_s_term_does_not_exist_in_the_term;
static PyObject *__pyx_n_s_terms;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_textTinyPy;
static PyObject *__pyx_n_s_tf_idf;
static PyObject *__pyx_kp_s_the;
static PyObject *__pyx_kp_s_the_LOCALE_UTF_parameter_should;
static PyObject *__pyx_kp_s_the_REMOVE_characters_parameter;
static PyObject *__pyx_kp_s_the_Terms_parameter_should_be_a;
static PyObject *__pyx_kp_s_the_as_token_parameter_should_be;
static PyObject *__pyx_kp_s_the_batches_parameter_should_be;
static PyObject *__pyx_kp_s_the_batches_parameter_should_be_2;
static PyObject *__pyx_kp_s_the_characters_parameter_should;
static PyObject *__pyx_kp_s_the_concat_delimiter_parameter_s;
static PyObject *__pyx_kp_s_the_diagonal_parameter_should_be;
static PyObject *__pyx_kp_s_the_dice_n_gram_parameter_should;
static PyObject *__pyx_kp_s_the_dice_thresh_parameter_should;
static PyObject *__pyx_kp_s_the_empty_key_parameter_should_b;
static PyObject *__pyx_kp_s_the_end_query_parameter_should_b;
static PyObject *__pyx_kp_s_the_file_delimiter_parameter_sho;
static PyObject *__pyx_kp_s_the_file_delimiter_should_be_a_s;
static PyObject *__pyx_kp_s_the_increment_batch_no_parameter;
static PyObject *__pyx_kp_s_the_input_file_parameter_should;
static PyObject *__pyx_kp_s_the_input_file_parameter_should_2;
static PyObject *__pyx_kp_s_the_input_list_parameter_should;
static PyObject *__pyx_kp_s_the_input_path_file_parameter_sh;
static PyObject *__pyx_kp_s_the_input_path_file_parameter_sh_2;
static PyObject *__pyx_kp_s_the_input_path_folder_parameter;
static PyObject *__pyx_kp_s_the_input_path_folder_parameter_2;
static PyObject *__pyx_kp_s_the_input_path_folder_parameter_3;
static PyObject *__pyx_kp_s_the_input_string_parameter_shoul;
static PyObject *__pyx_kp_s_the_keep_parameter_should_be_of;
static PyObject *__pyx_kp_s_the_keep_terms_parameter_should;
static PyObject *__pyx_kp_s_the_keep_terms_parameter_should_2;
static PyObject *__pyx_kp_s_the_language_parameter_should_be;
static PyObject *__pyx_kp_s_the_language_parameter_should_be_2;
static PyObject *__pyx_kp_s_the_max_n_gram_parameter_should;
static PyObject *__pyx_kp_s_the_max_n_gram_parameter_should_2;
static PyObject *__pyx_kp_s_the_max_num_char_parameter_shoul;
static PyObject *__pyx_kp_s_the_max_num_chars_parameter_shou;
static PyObject *__pyx_kp_s_the_min_lines_parameter_should_b;
static PyObject *__pyx_kp_s_the_min_n_gram_parameter_should;
static PyObject *__pyx_kp_s_the_min_num_char_parameter_shoul;
static PyObject *__pyx_kp_s_the_most_frequent_terms_method_i;
static PyObject *__pyx_kp_s_the_n_gram_delimiter_parameter_s;
static PyObject *__pyx_kp_s_the_n_gram_parameter_should_be_o;
static PyObject *__pyx_kp_s_the_n_grams_parameter_should_be;
static PyObject *__pyx_kp_s_the_n_grams_parameter_should_be_2;
static PyObject *__pyx_kp_s_the_number_of_threads_should_be;
static PyObject *__pyx_kp_s_the_number_parameter_should_be_o;
static PyObject *__pyx_kp_s_the_output_path_file_parameter_s;
static PyObject *__pyx_kp_s_the_output_path_folder_parameter;
static PyObject *__pyx_kp_s_the_output_path_folder_parameter_2;
static PyObject *__pyx_kp_s_the_output_path_folder_parameter_3;
static PyObject *__pyx_kp_s_the_path_2documents_file_paramet;
static PyObject *__pyx_kp_s_the_path_2documents_file_paramet_2;
static PyObject *__pyx_kp_s_the_path_2file_parameter_should;
static PyObject *__pyx_kp_s_the_path_2file_parameter_should_2;
static PyObject *__pyx_kp_s_the_path_2folder_parameter_shoul;
static PyObject *__pyx_kp_s_the_path_2folder_parameter_shoul_2;
static PyObject *__pyx_kp_s_the_print_every_rows_parameter_s;
static PyObject *__pyx_kp_s_the_read_delimiter_parameter_sho;
static PyObject *__pyx_kp_s_the_read_delimiter_should_be_a_s;
static PyObject *__pyx_kp_s_the_read_file_delimiter_paramete;
static PyObject *__pyx_kp_s_the_read_file_delimiter_should_b;
static PyObject *__pyx_kp_s_the_remove_numbers_parameter_sho;
static PyObject *__pyx_kp_s_the_remove_punctuation_string_pa;
static PyObject *__pyx_kp_s_the_remove_punctuation_vector_pa;
static PyObject *__pyx_kp_s_the_remove_stopwords_parameter_s;
static PyObject *__pyx_kp_s_the_rows_parameter_should_be_of;
static PyObject *__pyx_kp_s_the_save_2single_file_parameter;
static PyObject *__pyx_kp_s_the_sentence1_parameter_should_b;
static PyObject *__pyx_kp_s_the_sentence2_parameter_should_b;
static PyObject *__pyx_kp_s_the_separator_parameter_should_b;
static PyObject *__pyx_kp_s_the_skip_distance_parameter_shou;
static PyObject *__pyx_kp_s_the_skip_n_gram_parameter_should;
static PyObject *__pyx_kp_s_the_sort_terms_parameter_should;
static PyObject *__pyx_kp_s_the_sparsity_thresh_parameter_sh;
static PyObject *__pyx_kp_s_the_specified_n_gram_is_not_incl;
static PyObject *__pyx_kp_s_the_specified_number_is_not_incl;
static PyObject *__pyx_kp_s_the_specified_word_is_not_includ;
static PyObject *__pyx_kp_s_the_split_separator_parameter_sh;
static PyObject *__pyx_kp_s_the_split_string_parameter_shoul;
static PyObject *__pyx_kp_s_the_start_query_parameter_should;
static PyObject *__pyx_kp_s_the_stemmer_batches_parameter_sh;
static PyObject *__pyx_kp_s_the_stemmer_gamma_parameter_shou;
static PyObject *__pyx_kp_s_the_stemmer_ngram_parameter_shou;
static PyObject *__pyx_kp_s_the_stemmer_parameter_should_be;
static PyObject *__pyx_kp_s_the_stemmer_truncate_parameter_s;
static PyObject *__pyx_kp_s_the_tf_idf_parameter_should_be_o;
static PyObject *__pyx_kp_s_the_threads_parameter_should_be;
static PyObject *__pyx_kp_s_the_threads_parameter_should_be_2;
static PyObject *__pyx_kp_s_the_to_array_parameter_should_be;
static PyObject *__pyx_kp_s_the_to_lower_parameter_should_be;
static PyObject *__pyx_kp_s_the_to_upper_parameter_should_be;
static PyObject *__pyx_kp_s_the_trim_token_parameter_should;
static PyObject *__pyx_kp_s_the_trimmed_line_parameter_shoul;
static PyObject *__pyx_kp_s_the_unit_parameter_should_be_of;
static PyObject *__pyx_kp_s_the_upper_parameter_should_be_of;
static PyObject *__pyx_kp_s_the_vector_documents_parameter_s;
static PyObject *__pyx_kp_s_the_verbose_parameter_should_be;
static PyObject *__pyx_kp_s_the_verbose_parameter_should_be_2;
static PyObject *__pyx_kp_s_the_vocabulary_path_file_paramet;
static PyObject *__pyx_kp_s_the_vocabulary_path_parameter_sh;
static PyObject *__pyx_kp_s_the_vocabulary_path_parameter_sh_2;
static PyObject *__pyx_kp_s_the_vocabulary_path_parameter_sh_3;
static PyObject *__pyx_kp_s_the_word1_parameter_should_be_of;
static PyObject *__pyx_kp_s_the_word2_parameter_should_be_of;
static PyObject *__pyx_kp_s_the_word_parameter_should_be_of;
static PyObject *__pyx_kp_s_the_words_vector_parameter_shoul;
static PyObject *__pyx_kp_s_the_write_2file_parameter_should;
static PyObject *__pyx_kp_s_the_x_vector_parameter_should_be;
static PyObject *__pyx_kp_s_the_xml_path_parameter_should_be;
static PyObject *__pyx_kp_s_the_xml_root_parameter_should_be;
static PyObject *__pyx_n_s_threads;
static PyObject *__pyx_n_s_to_array;
static PyObject *__pyx_n_s_to_lower;
static PyObject *__pyx_n_s_to_upper;
static PyObject *__pyx_n_s_toarray;
static PyObject *__pyx_n_s_trim_token;
static PyObject *__pyx_n_s_trimmed_line;
static PyObject *__pyx_n_s_turkish;
static PyObject *__pyx_kp_s_txt;
static PyObject *__pyx_n_s_unit;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_kp_s_variable_sums_to_zero;
static PyObject *__pyx_n_s_vector_documents;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_version_info;
static PyObject *__pyx_n_s_vocabulary_path;
static PyObject *__pyx_n_s_vocabulary_path_file;
static PyObject *__pyx_kp_s_warning_the;
static PyObject *__pyx_kp_s_warning_the_following_terms_sum;
static PyObject *__pyx_n_s_where;
static PyObject *__pyx_n_s_word;
static PyObject *__pyx_n_s_word1;
static PyObject *__pyx_n_s_word2;
static PyObject *__pyx_n_s_words_vector;
static PyObject *__pyx_n_s_write_2file;
static PyObject *__pyx_n_s_x_vector;
static PyObject *__pyx_n_s_xml_path;
static PyObject *__pyx_n_s_xml_root;
static PyObject *__pyx_n_s_yoruba;
static PyObject *__pyx_n_s_zulu;
static int __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self); /* proto */
static void __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_4transform_text(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self, PyObject *__pyx_v_input_string, PyObject *__pyx_v_batches, PyObject *__pyx_v_read_file_delimiter, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_vocabulary_path, PyObject *__pyx_v_concat_delimiter, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_6transform_vec_docs(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self, PyObject *__pyx_v_input_list, PyObject *__pyx_v_as_token, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_vocabulary_path, PyObject *__pyx_v_concat_delimiter, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose); /* proto */
static int __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self); /* proto */
static void __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_4big_text_splitter(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_output_path_folder, PyObject *__pyx_v_batches, PyObject *__pyx_v_end_query, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_6big_text_parser(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_folder, PyObject *__pyx_v_output_path_folder, PyObject *__pyx_v_start_query, PyObject *__pyx_v_end_query, PyObject *__pyx_v_min_lines, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_8big_text_tokenizer(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_folder, PyObject *__pyx_v_output_path_folder, PyObject *__pyx_v_batches, PyObject *__pyx_v_increment_batch_no, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_read_file_delimiter, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_vocabulary_path, PyObject *__pyx_v_save_2single_file, PyObject *__pyx_v_concat_delimiter, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_10vocabulary_accumulator(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_folder, PyObject *__pyx_v_output_path_file, PyObject *__pyx_v_max_num_chars, PyObject *__pyx_v_verbose); /* proto */
static int __pyx_pf_10textTinyPy_10textTinyPy_5utils___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self); /* proto */
static void __pyx_pf_10textTinyPy_10textTinyPy_5utils_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_4vocabulary_parser(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_vocabulary_path_file, PyObject *__pyx_v_start_query, PyObject *__pyx_v_end_query, PyObject *__pyx_v_min_lines, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_language, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_6utf_locale(CYTHON_UNUSED struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_language); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_8bytes_converter(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_unit); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_10text_file_parser(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_start_query, PyObject *__pyx_v_end_query, PyObject *__pyx_v_output_path_file, PyObject *__pyx_v_min_lines, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_12dice_distance(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_word1, PyObject *__pyx_v_word2, PyObject *__pyx_v_n_grams); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_14levenshtein_distance(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_word1, PyObject *__pyx_v_word2); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_16cosine_distance(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_sentence1, PyObject *__pyx_v_sentence2, PyObject *__pyx_v_split_separator); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_18read_characters(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_file, PyObject *__pyx_v_characters, PyObject *__pyx_v_write_2file); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_20read_rows(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_file, PyObject *__pyx_v_read_delimiter, PyObject *__pyx_v_rows, PyObject *__pyx_v_write_2file); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_22xml_parser_subroot_elements(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_xml_path, PyObject *__pyx_v_output_path_file, PyObject *__pyx_v_empty_key); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_24xml_parser_root_elements(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_xml_root, PyObject *__pyx_v_output_path_file); /* proto */
static int __pyx_pf_10textTinyPy_10textTinyPy_11token_stats___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self); /* proto */
static void __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_4path_2vector(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_6freq_distribution(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_x_vector, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter, PyObject *__pyx_v_keep); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_8count_character(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_x_vector, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_10print_count_character(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_number); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_12collocation_words(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_x_vector, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter, PyObject *__pyx_v_n_gram_delimiter); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_14print_collocations(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_word); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_16string_dissimilarity_matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_words_vector, PyObject *__pyx_v_dice_n_gram, PyObject *__pyx_v_method, PyObject *__pyx_v_split_separator, PyObject *__pyx_v_dice_thresh, PyObject *__pyx_v_upper, PyObject *__pyx_v_diagonal, PyObject *__pyx_v_threads); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_18look_up_table(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_words_vector, PyObject *__pyx_v_n_grams); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_20print_words_lookup_tbl(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_n_gram); /* proto */
static int __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self); /* proto */
static void __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_4Term_Matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_vector_documents, PyObject *__pyx_v_path_2documents_file, PyObject *__pyx_v_sort_terms, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_print_every_rows, PyObject *__pyx_v_normalize, PyObject *__pyx_v_tf_idf, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_6document_term_matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_to_array); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_8term_document_matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_to_array); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_10corpus_terms(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_12Sparsity(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_14Term_Matrix_Adjust(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_sparsity_thresh, PyObject *__pyx_v_to_array); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_16most_frequent_terms(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_keep_terms, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_18term_associations(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_Terms, PyObject *__pyx_v_keep_terms, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_tokenizer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_big_text_files(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_utils(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_token_stats(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_docs_matrix(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_1000000000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__10;
static PyObject *__pyx_k__15;
static PyObject *__pyx_k__21;
static PyObject *__pyx_k__29;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;

/* "textTinyPy/textTinyPy.pyx":57
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.bgf = new big_files()
 */

/* Python wrapper */
static int __pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer___cinit__(((struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "textTinyPy/textTinyPy.pyx":59
 *     def __cinit__(self):
 * 
 *         self.bgf = new big_files()             # <<<<<<<<<<<<<<
 * 
 *         self.btk = new BATCH_TOKEN()
 */
  __pyx_v_self->bgf = new big_files();

  /* "textTinyPy/textTinyPy.pyx":61
 *         self.bgf = new big_files()
 * 
 *         self.btk = new BATCH_TOKEN()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->btk = new BATCH_TOKEN();

  /* "textTinyPy/textTinyPy.pyx":57
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.bgf = new big_files()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":64
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.bgf
 */

/* Python wrapper */
static void __pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_2__dealloc__(((struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "textTinyPy/textTinyPy.pyx":66
 *     def __dealloc__(self):
 * 
 *         del self.bgf             # <<<<<<<<<<<<<<
 * 
 *         del self.btk
 */
  delete __pyx_v_self->bgf;

  /* "textTinyPy/textTinyPy.pyx":68
 *         del self.bgf
 * 
 *         del self.btk             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->btk;

  /* "textTinyPy/textTinyPy.pyx":64
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.bgf
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "textTinyPy/textTinyPy.pyx":71
 * 
 * 
 *     def transform_text(self, input_string, batches = None, read_file_delimiter = "\n", LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english',             # <<<<<<<<<<<<<<
 * 
 *                       REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False, split_string = False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_5transform_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_9tokenizer_4transform_text[] = "\n        \n        String tokenization and transformation  ( character string or path to a file )\n        \n        It is memory efficient to read the data using a path file in case of a big file, rather than importing the data and then calling the tokenize function. The utf_locale and split_string\n        \n        functionality is based on the boost library ( http://www.boost.org ). It is advised to specify a path_2folder in case that a big file should be saved, rather than return the \n        \n        vector of all character strings. The skip-grams are a generalization of n-grams in which the components (typically words) need not to be consecutive in the text under consideration, \n        \n        but may leave gaps that are skipped over. They provide one way of overcoming the data sparsity problem found with conventional n-gram analysis. Stemming of the english language is \n        \n        done using the porter2-stemmer, for details see https://github.com/smassung/porter2_stemmer. N-gram stemming is language independent and supported by the following two functions:\n            \n            ngram_overlap    : The ngram_overlap stemming method is based on N-Gram Morphemes for Retrieval, Paul McNamee and James Mayfield ( http://clef.isti.cnr.it/2007/working_notes/mcnameeCLEF2007.pdf )\n            \n            ngram_sequential : The ngram_sequential stemming method is a modified version based on Generation, Implementation and Appraisal of an N-gram based Stemming Algorithm, B. P. Pande, Pawan Tamta, H. S. Dhami ( https://arxiv.org/pdf/1312.4824.pdf )\n            \n        The list of stop-words in all available languages was downloaded from the following link https://github.com/6/stopwords-json        \n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_5transform_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_string = 0;
  PyObject *__pyx_v_batches = 0;
  PyObject *__pyx_v_read_file_delimiter = 0;
  PyObject *__pyx_v_LOCALE_UTF = 0;
  PyObject *__pyx_v_to_lower = 0;
  PyObject *__pyx_v_to_upper = 0;
  PyObject *__pyx_v_language = 0;
  PyObject *__pyx_v_REMOVE_characters = 0;
  PyObject *__pyx_v_remove_punctuation_string = 0;
  PyObject *__pyx_v_remove_numbers = 0;
  PyObject *__pyx_v_trim_token = 0;
  PyObject *__pyx_v_split_string = 0;
  PyObject *__pyx_v_separator = 0;
  PyObject *__pyx_v_remove_punctuation_vector = 0;
  PyObject *__pyx_v_remove_stopwords = 0;
  PyObject *__pyx_v_min_num_char = 0;
  PyObject *__pyx_v_max_num_char = 0;
  PyObject *__pyx_v_stemmer = 0;
  PyObject *__pyx_v_min_n_gram = 0;
  PyObject *__pyx_v_max_n_gram = 0;
  PyObject *__pyx_v_n_gram_delimiter = 0;
  PyObject *__pyx_v_skip_n_gram = 0;
  PyObject *__pyx_v_skip_distance = 0;
  PyObject *__pyx_v_stemmer_ngram = 0;
  PyObject *__pyx_v_stemmer_gamma = 0;
  PyObject *__pyx_v_stemmer_truncate = 0;
  PyObject *__pyx_v_stemmer_batches = 0;
  PyObject *__pyx_v_vocabulary_path = 0;
  PyObject *__pyx_v_concat_delimiter = 0;
  PyObject *__pyx_v_path_2folder = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_text (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_string,&__pyx_n_s_batches,&__pyx_n_s_read_file_delimiter,&__pyx_n_s_LOCALE_UTF,&__pyx_n_s_to_lower,&__pyx_n_s_to_upper,&__pyx_n_s_language,&__pyx_n_s_REMOVE_characters,&__pyx_n_s_remove_punctuation_string,&__pyx_n_s_remove_numbers,&__pyx_n_s_trim_token,&__pyx_n_s_split_string,&__pyx_n_s_separator,&__pyx_n_s_remove_punctuation_vector,&__pyx_n_s_remove_stopwords,&__pyx_n_s_min_num_char,&__pyx_n_s_max_num_char,&__pyx_n_s_stemmer,&__pyx_n_s_min_n_gram,&__pyx_n_s_max_n_gram,&__pyx_n_s_n_gram_delimiter,&__pyx_n_s_skip_n_gram,&__pyx_n_s_skip_distance,&__pyx_n_s_stemmer_ngram,&__pyx_n_s_stemmer_gamma,&__pyx_n_s_stemmer_truncate,&__pyx_n_s_stemmer_batches,&__pyx_n_s_vocabulary_path,&__pyx_n_s_concat_delimiter,&__pyx_n_s_path_2folder,&__pyx_n_s_threads,&__pyx_n_s_verbose,0};
    PyObject* values[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_kp_s_);
    values[3] = ((PyObject *)__pyx_kp_s__2);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)__pyx_n_s_english);
    values[7] = ((PyObject *)__pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":73
 *     def transform_text(self, input_string, batches = None, read_file_delimiter = "\n", LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english',
 * 
 *                       REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False, split_string = False,             # <<<<<<<<<<<<<<
 * 
 *                       separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False, min_num_char = 1, max_num_char = MAX_VAL,
 */
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_False);
    values[11] = ((PyObject *)Py_False);
    values[12] = ((PyObject *)__pyx_kp_s__3);

    /* "textTinyPy/textTinyPy.pyx":75
 *                       REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False, split_string = False,
 * 
 *                       separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False, min_num_char = 1, max_num_char = MAX_VAL,             # <<<<<<<<<<<<<<
 * 
 *                       stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,
 */
    values[13] = ((PyObject *)Py_False);
    values[14] = ((PyObject *)Py_False);
    values[15] = ((PyObject *)__pyx_int_1);
    values[16] = __pyx_k__4;

    /* "textTinyPy/textTinyPy.pyx":77
 *                       separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False, min_num_char = 1, max_num_char = MAX_VAL,
 * 
 *                       stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,             # <<<<<<<<<<<<<<
 * 
 *                       stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, vocabulary_path = None, concat_delimiter = None, path_2folder = "",
 */
    values[17] = ((PyObject *)Py_None);
    values[18] = ((PyObject *)__pyx_int_1);
    values[19] = ((PyObject *)__pyx_int_1);
    values[20] = ((PyObject *)__pyx_kp_s__5);
    values[21] = ((PyObject *)__pyx_int_1);
    values[22] = ((PyObject *)__pyx_int_0);
    values[23] = ((PyObject *)__pyx_int_4);
    values[24] = ((PyObject *)__pyx_float_0_0);
    values[25] = ((PyObject *)__pyx_int_3);
    values[26] = ((PyObject *)__pyx_int_1);

    /* "textTinyPy/textTinyPy.pyx":79
 *                       stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,
 * 
 *                       stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, vocabulary_path = None, concat_delimiter = None, path_2folder = "",             # <<<<<<<<<<<<<<
 * 
 *                       threads = 1, verbose = False):
 */
    values[27] = ((PyObject *)Py_None);
    values[28] = ((PyObject *)Py_None);
    values[29] = ((PyObject *)__pyx_kp_s__2);
    values[30] = ((PyObject *)__pyx_int_1);

    /* "textTinyPy/textTinyPy.pyx":81
 *                       stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, vocabulary_path = None, concat_delimiter = None, path_2folder = "",
 * 
 *                       threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 * 
 */
    values[31] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_string)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_batches);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read_file_delimiter);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LOCALE_UTF);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_lower);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_upper);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_REMOVE_characters);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_string);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_numbers);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trim_token);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_split_string);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_separator);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_vector);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_stopwords);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_num_char);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_num_char);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_n_gram);
          if (value) { values[18] = value; kw_args--; }
        }
        case 19:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_n_gram);
          if (value) { values[19] = value; kw_args--; }
        }
        case 20:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_gram_delimiter);
          if (value) { values[20] = value; kw_args--; }
        }
        case 21:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_n_gram);
          if (value) { values[21] = value; kw_args--; }
        }
        case 22:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_distance);
          if (value) { values[22] = value; kw_args--; }
        }
        case 23:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_ngram);
          if (value) { values[23] = value; kw_args--; }
        }
        case 24:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_gamma);
          if (value) { values[24] = value; kw_args--; }
        }
        case 25:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_truncate);
          if (value) { values[25] = value; kw_args--; }
        }
        case 26:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_batches);
          if (value) { values[26] = value; kw_args--; }
        }
        case 27:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vocabulary_path);
          if (value) { values[27] = value; kw_args--; }
        }
        case 28:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_concat_delimiter);
          if (value) { values[28] = value; kw_args--; }
        }
        case 29:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2folder);
          if (value) { values[29] = value; kw_args--; }
        }
        case 30:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[30] = value; kw_args--; }
        }
        case 31:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[31] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transform_text") < 0)) __PYX_ERR(0, 71, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_string = values[0];
    __pyx_v_batches = values[1];
    __pyx_v_read_file_delimiter = values[2];
    __pyx_v_LOCALE_UTF = values[3];
    __pyx_v_to_lower = values[4];
    __pyx_v_to_upper = values[5];
    __pyx_v_language = values[6];
    __pyx_v_REMOVE_characters = values[7];
    __pyx_v_remove_punctuation_string = values[8];
    __pyx_v_remove_numbers = values[9];
    __pyx_v_trim_token = values[10];
    __pyx_v_split_string = values[11];
    __pyx_v_separator = values[12];
    __pyx_v_remove_punctuation_vector = values[13];
    __pyx_v_remove_stopwords = values[14];
    __pyx_v_min_num_char = values[15];
    __pyx_v_max_num_char = values[16];
    __pyx_v_stemmer = values[17];
    __pyx_v_min_n_gram = values[18];
    __pyx_v_max_n_gram = values[19];
    __pyx_v_n_gram_delimiter = values[20];
    __pyx_v_skip_n_gram = values[21];
    __pyx_v_skip_distance = values[22];
    __pyx_v_stemmer_ngram = values[23];
    __pyx_v_stemmer_gamma = values[24];
    __pyx_v_stemmer_truncate = values[25];
    __pyx_v_stemmer_batches = values[26];
    __pyx_v_vocabulary_path = values[27];
    __pyx_v_concat_delimiter = values[28];
    __pyx_v_path_2folder = values[29];
    __pyx_v_threads = values[30];
    __pyx_v_verbose = values[31];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transform_text", 0, 1, 32, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.tokenizer.transform_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_4transform_text(((struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *)__pyx_v_self), __pyx_v_input_string, __pyx_v_batches, __pyx_v_read_file_delimiter, __pyx_v_LOCALE_UTF, __pyx_v_to_lower, __pyx_v_to_upper, __pyx_v_language, __pyx_v_REMOVE_characters, __pyx_v_remove_punctuation_string, __pyx_v_remove_numbers, __pyx_v_trim_token, __pyx_v_split_string, __pyx_v_separator, __pyx_v_remove_punctuation_vector, __pyx_v_remove_stopwords, __pyx_v_min_num_char, __pyx_v_max_num_char, __pyx_v_stemmer, __pyx_v_min_n_gram, __pyx_v_max_n_gram, __pyx_v_n_gram_delimiter, __pyx_v_skip_n_gram, __pyx_v_skip_distance, __pyx_v_stemmer_ngram, __pyx_v_stemmer_gamma, __pyx_v_stemmer_truncate, __pyx_v_stemmer_batches, __pyx_v_vocabulary_path, __pyx_v_concat_delimiter, __pyx_v_path_2folder, __pyx_v_threads, __pyx_v_verbose);

  /* "textTinyPy/textTinyPy.pyx":71
 * 
 * 
 *     def transform_text(self, input_string, batches = None, read_file_delimiter = "\n", LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english',             # <<<<<<<<<<<<<<
 * 
 *                       REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False, split_string = False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_4transform_text(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self, PyObject *__pyx_v_input_string, PyObject *__pyx_v_batches, PyObject *__pyx_v_read_file_delimiter, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_vocabulary_path, PyObject *__pyx_v_concat_delimiter, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose) {
  std::vector<std::string>  __pyx_v_result_vec;
  int __pyx_v_FLAG_path;
  PyObject *__pyx_v_resource_path = NULL;
  PyObject *__pyx_v_path_stopw = NULL;
  PyObject *__pyx_v_dat_stopw = NULL;
  PyObject *__pyx_v_array_stopw = NULL;
  PyObject *__pyx_v_list_stopw = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  std::string __pyx_t_13;
  std::vector<std::string>  __pyx_t_14;
  std::string __pyx_t_15;
  std::string __pyx_t_16;
  std::string __pyx_t_17;
  PY_LONG_LONG __pyx_t_18;
  std::string __pyx_t_19;
  bool __pyx_t_20;
  bool __pyx_t_21;
  bool __pyx_t_22;
  bool __pyx_t_23;
  bool __pyx_t_24;
  bool __pyx_t_25;
  bool __pyx_t_26;
  std::string __pyx_t_27;
  bool __pyx_t_28;
  std::string __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  std::string __pyx_t_34;
  std::string __pyx_t_35;
  std::string __pyx_t_36;
  int __pyx_t_37;
  double __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  int __pyx_t_41;
  bool __pyx_t_42;
  std::string __pyx_t_43;
  std::string __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  __Pyx_RefNannySetupContext("transform_text", 0);
  __Pyx_INCREF(__pyx_v_remove_stopwords);
  __Pyx_INCREF(__pyx_v_max_num_char);
  __Pyx_INCREF(__pyx_v_stemmer);
  __Pyx_INCREF(__pyx_v_vocabulary_path);
  __Pyx_INCREF(__pyx_v_concat_delimiter);

  /* "textTinyPy/textTinyPy.pyx":109
 *         cdef vector[string] result_vec
 * 
 *         assert isinstance(input_string, basestring), 'the input_string parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         FLAG_path = False
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_string, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_string_parameter_shoul);
      __PYX_ERR(0, 109, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":111
 *         assert isinstance(input_string, basestring), 'the input_string parameter should be of type string'
 * 
 *         FLAG_path = False             # <<<<<<<<<<<<<<
 * 
 *         if os.path.exists(input_string):
 */
  __pyx_v_FLAG_path = 0;

  /* "textTinyPy/textTinyPy.pyx":113
 *         FLAG_path = False
 * 
 *         if os.path.exists(input_string):             # <<<<<<<<<<<<<<
 * 
 *             FLAG_path = True
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_string); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_string};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_string};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(__pyx_v_input_string);
      __Pyx_GIVEREF(__pyx_v_input_string);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_string);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":115
 *         if os.path.exists(input_string):
 * 
 *             FLAG_path = True             # <<<<<<<<<<<<<<
 * 
 *         #--------------------
 */
    __pyx_v_FLAG_path = 1;

    /* "textTinyPy/textTinyPy.pyx":113
 *         FLAG_path = False
 * 
 *         if os.path.exists(input_string):             # <<<<<<<<<<<<<<
 * 
 *             FLAG_path = True
 */
  }

  /* "textTinyPy/textTinyPy.pyx":121
 *         #--------------------
 * 
 *         assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         IF UNAME_SYSNAME == "Windows":
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_path_2folder, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul);
      __PYX_ERR(0, 121, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":129
 *         IF UNAME_SYSNAME == "Darwin" or UNAME_SYSNAME == "Linux":
 * 
 *             assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if batches is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_2folder, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul_2);
      __PYX_ERR(0, 129, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":131
 *             assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if batches is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and greater than 1'
 */
  __pyx_t_2 = (__pyx_v_batches != Py_None);
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":133
 *         if batches is not None:
 * 
 *             assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and greater than 1'             # <<<<<<<<<<<<<<
 * 
 *             assert path_2folder != "", "give the path to a valid folder in case that the batches parameter is not None"
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_batches, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = (__pyx_t_2 != 0);
      if (__pyx_t_7) {
      } else {
        __pyx_t_6 = __pyx_t_7;
        goto __pyx_L5_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_batches, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 133, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __pyx_t_7;
      __pyx_L5_bool_binop_done:;
      if (unlikely(!__pyx_t_6)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_batches_parameter_should_be);
        __PYX_ERR(0, 133, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":135
 *             assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and greater than 1'
 * 
 *             assert path_2folder != "", "give the path to a valid folder in case that the batches parameter is not None"             # <<<<<<<<<<<<<<
 * 
 *             if not FLAG_path:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_path_2folder, __pyx_kp_s__2, Py_NE)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
      if (unlikely(!__pyx_t_6)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_give_the_path_to_a_valid_folder);
        __PYX_ERR(0, 135, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":137
 *             assert path_2folder != "", "give the path to a valid folder in case that the batches parameter is not None"
 * 
 *             if not FLAG_path:             # <<<<<<<<<<<<<<
 * 
 *                 raise_with_traceback(ValueError('in case that the batches parameter is not None the input_string parameter should be a valid path to a file'))
 */
    __pyx_t_6 = ((!(__pyx_v_FLAG_path != 0)) != 0);
    if (__pyx_t_6) {

      /* "textTinyPy/textTinyPy.pyx":139
 *             if not FLAG_path:
 * 
 *                 raise_with_traceback(ValueError('in case that the batches parameter is not None the input_string parameter should be a valid path to a file'))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(read_file_delimiter, basestring), 'the read_file_delimiter parameter should be of type string'
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 139, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":137
 *             assert path_2folder != "", "give the path to a valid folder in case that the batches parameter is not None"
 * 
 *             if not FLAG_path:             # <<<<<<<<<<<<<<
 * 
 *                 raise_with_traceback(ValueError('in case that the batches parameter is not None the input_string parameter should be a valid path to a file'))
 */
    }

    /* "textTinyPy/textTinyPy.pyx":131
 *             assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if batches is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and greater than 1'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":141
 *                 raise_with_traceback(ValueError('in case that the batches parameter is not None the input_string parameter should be a valid path to a file'))
 * 
 *         assert isinstance(read_file_delimiter, basestring), 'the read_file_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert len(read_file_delimiter) == 1, 'the read_file_delimiter should be a single character string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_read_file_delimiter, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_read_file_delimiter_paramete);
      __PYX_ERR(0, 141, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":143
 *         assert isinstance(read_file_delimiter, basestring), 'the read_file_delimiter parameter should be of type string'
 * 
 *         assert len(read_file_delimiter) == 1, 'the read_file_delimiter should be a single character string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_9 = PyObject_Length(__pyx_v_read_file_delimiter); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 143, __pyx_L1_error)
    if (unlikely(!((__pyx_t_9 == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_read_file_delimiter_should_b);
      __PYX_ERR(0, 143, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":145
 *         assert len(read_file_delimiter) == 1, 'the read_file_delimiter should be a single character string'
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_LOCALE_UTF, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_LOCALE_UTF_parameter_should);
      __PYX_ERR(0, 145, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":147
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_to_lower, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_lower_parameter_should_be);
      __PYX_ERR(0, 147, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":149
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_to_upper, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_upper_parameter_should_be);
      __PYX_ERR(0, 149, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":151
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_REMOVE_characters, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_REMOVE_characters_parameter);
      __PYX_ERR(0, 151, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":153
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_remove_punctuation_string, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_string_pa);
      __PYX_ERR(0, 153, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":155
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_remove_numbers, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_numbers_parameter_sho);
      __PYX_ERR(0, 155, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":157
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_trim_token, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trim_token_parameter_should);
      __PYX_ERR(0, 157, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":159
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_split_string, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_split_string_parameter_shoul);
      __PYX_ERR(0, 159, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":161
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_separator, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_separator_parameter_should_b);
      __PYX_ERR(0, 161, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":163
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_remove_punctuation_vector, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_vector_pa);
      __PYX_ERR(0, 163, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":165
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_language, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_language_parameter_should_be);
      __PYX_ERR(0, 165, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":167
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",             # <<<<<<<<<<<<<<
 *                             "estonian", "finnish", "french","galician", "german", "greek", "hausa", "hebrew", "hindi", "hungarian", "indonesian", "irish", "italian",
 *                             "latvian", "marathi", "norwegian", "persian", "polish", "portuguese", "romanian", "russian", "slovak", "slovenian", "somalia", "spanish",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_language);
    __pyx_t_1 = __pyx_v_language;
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_afrikaans, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_arabic, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_armenian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_basque, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_bengali, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_breton, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_bulgarian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_catalan, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_croatian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_czech, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_danish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_dutch, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_english, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_estonian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_finnish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_french, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_galician, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_german, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_greek, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hausa, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hebrew, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hindi, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hungarian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_indonesian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_irish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_italian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_latvian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_marathi, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_norwegian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_persian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_polish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_portuguese, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_romanian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_russian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_slovak, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_slovenian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_somalia, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_spanish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_swahili, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_swedish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_turkish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_yoruba, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_zulu, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
    __pyx_t_6 = __pyx_t_7;
    __pyx_L8_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_languages_in_case_of_s);
      __PYX_ERR(0, 167, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":179
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
  __pyx_t_1 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_remove_stopwords, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":181
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 181, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "textTinyPy/textTinyPy.pyx":189
 *                 ELSE:
 * 
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))             # <<<<<<<<<<<<<<
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 */
      __pyx_t_1 = PyNumber_Add(__pyx_v_language, __pyx_kp_s_txt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_n_s_stopwords);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_resource_path = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":191
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)             # <<<<<<<<<<<<<<
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pkg_resources); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_resource_filename); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_textTinyPy);
        __Pyx_GIVEREF(__pyx_n_s_textTinyPy);
        PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_10, __pyx_n_s_textTinyPy);
        __Pyx_INCREF(__pyx_v_resource_path);
        __Pyx_GIVEREF(__pyx_v_resource_path);
        PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_10, __pyx_v_resource_path);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_path_stopw = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":193
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)             # <<<<<<<<<<<<<<
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_path_stopw);
      __Pyx_GIVEREF(__pyx_v_path_stopw);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path_stopw);
      __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_header, Py_None) < 0) __PYX_ERR(0, 193, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_dat_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":195
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw = [i[0] for i in array_stopw]
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_dat_stopw, __pyx_n_s_as_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_columns, Py_None) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_4};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_4};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 195, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_array_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":197
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 * 
 *                 list_stopw = [i[0] for i in array_stopw]             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw.append("")
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_array_stopw)) || PyTuple_CheckExact(__pyx_v_array_stopw)) {
        __pyx_t_1 = __pyx_v_array_stopw; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_array_stopw); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 197, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_5); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_11(__pyx_t_1);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 197, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 197, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_list_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":199
 *                 list_stopw = [i[0] for i in array_stopw]
 * 
 *                 list_stopw.append("")             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_list_stopw, __pyx_kp_s__2); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 199, __pyx_L1_error)

      /* "textTinyPy/textTinyPy.pyx":181
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
      goto __pyx_L52;
    }

    /* "textTinyPy/textTinyPy.pyx":203
 *             else:
 * 
 *                 list_stopw = []             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(remove_stopwords, list):
 */
    /*else*/ {
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_list_stopw = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L52:;

    /* "textTinyPy/textTinyPy.pyx":179
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
    goto __pyx_L51;
  }

  /* "textTinyPy/textTinyPy.pyx":205
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
  __pyx_t_7 = PyList_Check(__pyx_v_remove_stopwords); 
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":207
 *         elif isinstance(remove_stopwords, list):
 * 
 *             list_stopw = remove_stopwords             # <<<<<<<<<<<<<<
 * 
 *             remove_stopwords = True
 */
    __Pyx_INCREF(__pyx_v_remove_stopwords);
    __pyx_v_list_stopw = __pyx_v_remove_stopwords;

    /* "textTinyPy/textTinyPy.pyx":209
 *             list_stopw = remove_stopwords
 * 
 *             remove_stopwords = True             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_remove_stopwords, Py_True);

    /* "textTinyPy/textTinyPy.pyx":205
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
    goto __pyx_L51;
  }

  /* "textTinyPy/textTinyPy.pyx":213
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L51:;

  /* "textTinyPy/textTinyPy.pyx":215
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_min_num_char, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_6 = __pyx_t_2;
      goto __pyx_L55_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_num_char, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 215, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_t_2;
    __pyx_L55_bool_binop_done:;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_num_char_parameter_shoul);
      __PYX_ERR(0, 215, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":217
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'             # <<<<<<<<<<<<<<
 * 
 *         if max_num_char == MAX_VAL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_max_num_char, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L57_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_v_min_num_char, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 217, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __pyx_t_7;
    __pyx_L57_bool_binop_done:;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_num_char_parameter_shoul);
      __PYX_ERR(0, 217, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":219
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":221
 *         if max_num_char == MAX_VAL:
 * 
 *             max_num_char = 1000000000             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
    __Pyx_INCREF(__pyx_int_1000000000);
    __Pyx_DECREF_SET(__pyx_v_max_num_char, __pyx_int_1000000000);

    /* "textTinyPy/textTinyPy.pyx":219
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  }

  /* "textTinyPy/textTinyPy.pyx":223
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  __pyx_t_6 = (__pyx_v_stemmer != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":225
 *         if stemmer is not None:
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyObject_IsInstance(__pyx_v_stemmer, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 225, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_7 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_parameter_should_be);
        __PYX_ERR(0, 225, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":227
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __Pyx_INCREF(__pyx_v_stemmer);
      __pyx_t_1 = __pyx_v_stemmer;
      __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_porter2_stemmer, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
      if (!__pyx_t_6) {
      } else {
        __pyx_t_7 = __pyx_t_6;
        goto __pyx_L61_bool_binop_done;
      }
      __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
      if (!__pyx_t_6) {
      } else {
        __pyx_t_7 = __pyx_t_6;
        goto __pyx_L61_bool_binop_done;
      }
      __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
      __pyx_t_7 = __pyx_t_6;
      __pyx_L61_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_7 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_stemmers_are_porter2_s);
        __PYX_ERR(0, 227, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":223
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":229
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  __pyx_t_7 = (__pyx_v_stemmer == Py_None);
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":231
 *         if stemmer is None:
 * 
 *             stemmer = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_stemmer, __pyx_n_s_NULL);

    /* "textTinyPy/textTinyPy.pyx":229
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":233
 *             stemmer = "NULL"
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_min_n_gram, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_6 = __pyx_t_2;
      goto __pyx_L65_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_min_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_t_2;
    __pyx_L65_bool_binop_done:;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_n_gram_parameter_should);
      __PYX_ERR(0, 233, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":235
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_max_n_gram, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L67_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_t_7;
    __pyx_L67_bool_binop_done:;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should);
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":237
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_v_min_n_gram, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should_2);
      __PYX_ERR(0, 237, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":239
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_n_gram_delimiter, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_gram_delimiter_parameter_s);
      __PYX_ERR(0, 239, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":241
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_skip_n_gram, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_6 = __pyx_t_2;
      goto __pyx_L69_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_skip_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_t_2;
    __pyx_L69_bool_binop_done:;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_n_gram_parameter_should);
      __PYX_ERR(0, 241, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":243
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_skip_distance, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L71_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_skip_distance, __pyx_int_neg_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __pyx_t_7;
    __pyx_L71_bool_binop_done:;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_distance_parameter_shou);
      __PYX_ERR(0, 243, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":245
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  __pyx_t_6 = (__pyx_v_stemmer != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":247
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 247, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "textTinyPy/textTinyPy.pyx":249
 *             if stemmer == "ngram_sequential":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = (__pyx_t_6 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_7 = __pyx_t_2;
          goto __pyx_L75_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 249, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = __pyx_t_2;
        __pyx_L75_bool_binop_done:;
        if (unlikely(!__pyx_t_7)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 249, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":251
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_2 = PyFloat_Check(__pyx_v_stemmer_gamma); 
        __pyx_t_6 = (__pyx_t_2 != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_7 = __pyx_t_6;
          goto __pyx_L77_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_gamma, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 251, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = __pyx_t_6;
        __pyx_L77_bool_binop_done:;
        if (unlikely(!__pyx_t_7)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_gamma_parameter_shou);
          __PYX_ERR(0, 251, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":253
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PyObject_IsInstance(__pyx_v_stemmer_truncate, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 253, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = (__pyx_t_6 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_7 = __pyx_t_2;
          goto __pyx_L79_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_truncate, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = __pyx_t_2;
        __pyx_L79_bool_binop_done:;
        if (unlikely(!__pyx_t_7)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_truncate_parameter_s);
          __PYX_ERR(0, 253, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":255
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_overlap":
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyObject_IsInstance(__pyx_v_stemmer_batches, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 255, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_6 = (__pyx_t_2 != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_7 = __pyx_t_6;
          goto __pyx_L81_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_batches, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = __pyx_t_6;
        __pyx_L81_bool_binop_done:;
        if (unlikely(!__pyx_t_7)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_batches_parameter_sh);
          __PYX_ERR(0, 255, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":247
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":257
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "textTinyPy/textTinyPy.pyx":259
 *             if stemmer == "ngram_overlap":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         if vocabulary_path is not None:
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = (__pyx_t_6 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_7 = __pyx_t_2;
          goto __pyx_L84_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = __pyx_t_2;
        __pyx_L84_bool_binop_done:;
        if (unlikely(!__pyx_t_7)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 259, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":257
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":245
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  }

  /* "textTinyPy/textTinyPy.pyx":261
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *         if vocabulary_path is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 */
  __pyx_t_7 = (__pyx_v_vocabulary_path != Py_None);
  __pyx_t_2 = (__pyx_t_7 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":263
 *         if vocabulary_path is not None:
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         if vocabulary_path is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_vocabulary_path, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_vocabulary_path_parameter_sh);
        __PYX_ERR(0, 263, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":261
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *         if vocabulary_path is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":265
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 * 
 *         if vocabulary_path is None:             # <<<<<<<<<<<<<<
 * 
 *             vocabulary_path = ""
 */
  __pyx_t_2 = (__pyx_v_vocabulary_path == Py_None);
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":267
 *         if vocabulary_path is None:
 * 
 *             vocabulary_path = ""             # <<<<<<<<<<<<<<
 * 
 *         if concat_delimiter is not None:
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_vocabulary_path, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":265
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 * 
 *         if vocabulary_path is None:             # <<<<<<<<<<<<<<
 * 
 *             vocabulary_path = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":269
 *             vocabulary_path = ""
 * 
 *         if concat_delimiter is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'
 */
  __pyx_t_7 = (__pyx_v_concat_delimiter != Py_None);
  __pyx_t_2 = (__pyx_t_7 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":271
 *         if concat_delimiter is not None:
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_concat_delimiter, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_concat_delimiter_parameter_s);
        __PYX_ERR(0, 271, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":269
 *             vocabulary_path = ""
 * 
 *         if concat_delimiter is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'
 */
    goto __pyx_L88;
  }

  /* "textTinyPy/textTinyPy.pyx":275
 *         else:
 * 
 *             concat_delimiter = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_concat_delimiter, __pyx_n_s_NULL);
  }
  __pyx_L88:;

  /* "textTinyPy/textTinyPy.pyx":277
 *             concat_delimiter = "NULL"
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L89_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_6;
    __pyx_L89_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_threads_parameter_should_be);
      __PYX_ERR(0, 277, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":279
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 279, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 279, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":286
 *         #----------
 * 
 *         if batches is None:             # <<<<<<<<<<<<<<
 * 
 *             result_vec = self.bgf.res_TOKEN(input_string, list_stopw, language, LOCALE_UTF, FLAG_path, read_file_delimiter, max_num_char, REMOVE_characters,
 */
  __pyx_t_2 = (__pyx_v_batches == Py_None);
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":288
 *         if batches is None:
 * 
 *             result_vec = self.bgf.res_TOKEN(input_string, list_stopw, language, LOCALE_UTF, FLAG_path, read_file_delimiter, max_num_char, REMOVE_characters,             # <<<<<<<<<<<<<<
 * 
 *                                              to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 */
    __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_string); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    if (unlikely(!__pyx_v_list_stopw)) { __Pyx_RaiseUnboundLocalError("list_stopw"); __PYX_ERR(0, 288, __pyx_L1_error) }
    __pyx_t_14 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_list_stopw); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_v_language); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_t_16 = __pyx_convert_string_from_py_std__in_string(__pyx_v_LOCALE_UTF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_read_file_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_t_18 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_max_num_char); if (unlikely((__pyx_t_18 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_REMOVE_characters); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":290
 *             result_vec = self.bgf.res_TOKEN(input_string, list_stopw, language, LOCALE_UTF, FLAG_path, read_file_delimiter, max_num_char, REMOVE_characters,
 * 
 *                                              to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,             # <<<<<<<<<<<<<<
 * 
 *                                              separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter,
 */
    __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely((__pyx_t_20 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely((__pyx_t_21 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely((__pyx_t_22 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely((__pyx_t_24 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely((__pyx_t_25 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":292
 *                                              to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 * 
 *                                              separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter,             # <<<<<<<<<<<<<<
 * 
 *                                               concat_delimiter, path_2folder, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose,
 */
    __pyx_t_27 = __pyx_convert_string_from_py_std__in_string(__pyx_v_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely((__pyx_t_28 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_min_num_char); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_29 = __pyx_convert_string_from_py_std__in_string(__pyx_v_stemmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_30 = __Pyx_PyInt_As_int(__pyx_v_min_n_gram); if (unlikely((__pyx_t_30 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_31 = __Pyx_PyInt_As_int(__pyx_v_max_n_gram); if (unlikely((__pyx_t_31 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_v_skip_n_gram); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_33 = __Pyx_PyInt_As_int(__pyx_v_skip_distance); if (unlikely((__pyx_t_33 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __pyx_t_34 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":294
 *                                              separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter,
 * 
 *                                               concat_delimiter, path_2folder, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose,             # <<<<<<<<<<<<<<
 * 
 *                                               False, "output_token.txt", vocabulary_path)
 */
    __pyx_t_35 = __pyx_convert_string_from_py_std__in_string(__pyx_v_concat_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __pyx_t_36 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __pyx_t_37 = __Pyx_PyInt_As_int(__pyx_v_stemmer_ngram); if (unlikely((__pyx_t_37 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __pyx_t_38 = __pyx_PyFloat_AsDouble(__pyx_v_stemmer_gamma); if (unlikely((__pyx_t_38 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __pyx_t_39 = __Pyx_PyInt_As_int(__pyx_v_stemmer_truncate); if (unlikely((__pyx_t_39 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __pyx_t_40 = __Pyx_PyInt_As_int(__pyx_v_stemmer_batches); if (unlikely((__pyx_t_40 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __pyx_t_41 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_41 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __pyx_t_42 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_42 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":296
 *                                               concat_delimiter, path_2folder, stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose,
 * 
 *                                               False, "output_token.txt", vocabulary_path)             # <<<<<<<<<<<<<<
 * 
 *             return result_vec
 */
    __pyx_t_43 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_output_token_txt); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)
    __pyx_t_44 = __pyx_convert_string_from_py_std__in_string(__pyx_v_vocabulary_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":288
 *         if batches is None:
 * 
 *             result_vec = self.bgf.res_TOKEN(input_string, list_stopw, language, LOCALE_UTF, FLAG_path, read_file_delimiter, max_num_char, REMOVE_characters,             # <<<<<<<<<<<<<<
 * 
 *                                              to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 */
    __pyx_v_result_vec = __pyx_v_self->bgf->res_TOKEN(__pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_v_FLAG_path, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_10, __pyx_t_29, __pyx_t_30, __pyx_t_31, __pyx_t_32, __pyx_t_33, __pyx_t_34, __pyx_t_35, __pyx_t_36, __pyx_t_37, __pyx_t_38, __pyx_t_39, __pyx_t_40, __pyx_t_41, __pyx_t_42, 0, __pyx_t_43, __pyx_t_44);

    /* "textTinyPy/textTinyPy.pyx":298
 *                                               False, "output_token.txt", vocabulary_path)
 * 
 *             return result_vec             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_vec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "textTinyPy/textTinyPy.pyx":286
 *         #----------
 * 
 *         if batches is None:             # <<<<<<<<<<<<<<
 * 
 *             result_vec = self.bgf.res_TOKEN(input_string, list_stopw, language, LOCALE_UTF, FLAG_path, read_file_delimiter, max_num_char, REMOVE_characters,
 */
  }

  /* "textTinyPy/textTinyPy.pyx":302
 *         else:
 * 
 *             if concat_delimiter == "NULL":             # <<<<<<<<<<<<<<
 * 
 *                 concat_delimiter = "\n"
 */
  /*else*/ {
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_v_concat_delimiter, __pyx_n_s_NULL, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 302, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "textTinyPy/textTinyPy.pyx":304
 *             if concat_delimiter == "NULL":
 * 
 *                 concat_delimiter = "\n"             # <<<<<<<<<<<<<<
 * 
 *             self.btk.batch_2file(input_string, path_2folder, batches, read_file_delimiter, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower,
 */
      __Pyx_INCREF(__pyx_kp_s_);
      __Pyx_DECREF_SET(__pyx_v_concat_delimiter, __pyx_kp_s_);

      /* "textTinyPy/textTinyPy.pyx":302
 *         else:
 * 
 *             if concat_delimiter == "NULL":             # <<<<<<<<<<<<<<
 * 
 *                 concat_delimiter = "\n"
 */
    }

    /* "textTinyPy/textTinyPy.pyx":306
 *                 concat_delimiter = "\n"
 * 
 *             self.btk.batch_2file(input_string, path_2folder, batches, read_file_delimiter, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower,             # <<<<<<<<<<<<<<
 * 
 *                                  to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords,
 */
    __pyx_t_44 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_string); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_43 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_41 = __Pyx_PyInt_As_int(__pyx_v_batches); if (unlikely((__pyx_t_41 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_36 = __pyx_convert_string_from_py_std__in_string(__pyx_v_read_file_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    if (unlikely(!__pyx_v_list_stopw)) { __Pyx_RaiseUnboundLocalError("list_stopw"); __PYX_ERR(0, 306, __pyx_L1_error) }
    __pyx_t_14 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_list_stopw); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_35 = __pyx_convert_string_from_py_std__in_string(__pyx_v_language); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_34 = __pyx_convert_string_from_py_std__in_string(__pyx_v_LOCALE_UTF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_40 = __Pyx_PyInt_As_int(__pyx_v_max_num_char); if (unlikely((__pyx_t_40 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_29 = __pyx_convert_string_from_py_std__in_string(__pyx_v_REMOVE_characters); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)
    __pyx_t_42 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely((__pyx_t_42 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 306, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":308
 *             self.btk.batch_2file(input_string, path_2folder, batches, read_file_delimiter, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower,
 * 
 *                                  to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords,             # <<<<<<<<<<<<<<
 * 
 *                                  min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate,
 */
    __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely((__pyx_t_28 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely((__pyx_t_25 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely((__pyx_t_24 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely((__pyx_t_22 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_27 = __pyx_convert_string_from_py_std__in_string(__pyx_v_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely((__pyx_t_21 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":310
 *                                  to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords,
 * 
 *                                  min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate,             # <<<<<<<<<<<<<<
 * 
 *                                  stemmer_batches, threads, concat_delimiter, verbose, vocabulary_path)
 */
    __pyx_t_39 = __Pyx_PyInt_As_int(__pyx_v_min_num_char); if (unlikely((__pyx_t_39 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_stemmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_37 = __Pyx_PyInt_As_int(__pyx_v_min_n_gram); if (unlikely((__pyx_t_37 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_33 = __Pyx_PyInt_As_int(__pyx_v_max_n_gram); if (unlikely((__pyx_t_33 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_v_skip_n_gram); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_31 = __Pyx_PyInt_As_int(__pyx_v_skip_distance); if (unlikely((__pyx_t_31 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_30 = __Pyx_PyInt_As_int(__pyx_v_stemmer_ngram); if (unlikely((__pyx_t_30 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_38 = __pyx_PyFloat_AsDouble(__pyx_v_stemmer_gamma); if (unlikely((__pyx_t_38 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_stemmer_truncate); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":312
 *                                  min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate,
 * 
 *                                  stemmer_batches, threads, concat_delimiter, verbose, vocabulary_path)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_45 = __Pyx_PyInt_As_int(__pyx_v_stemmer_batches); if (unlikely((__pyx_t_45 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_t_46 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_46 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_t_16 = __pyx_convert_string_from_py_std__in_string(__pyx_v_concat_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_20 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_v_vocabulary_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":306
 *                 concat_delimiter = "\n"
 * 
 *             self.btk.batch_2file(input_string, path_2folder, batches, read_file_delimiter, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower,             # <<<<<<<<<<<<<<
 * 
 *                                  to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords,
 */
    __pyx_v_self->btk->batch_2file(__pyx_t_44, __pyx_t_43, __pyx_t_41, __pyx_t_36, __pyx_t_14, __pyx_t_35, __pyx_t_34, __pyx_t_40, __pyx_t_29, __pyx_t_42, __pyx_t_28, __pyx_t_26, __pyx_t_25, __pyx_t_24, __pyx_t_23, __pyx_t_22, __pyx_t_27, __pyx_t_21, __pyx_t_39, __pyx_t_19, __pyx_t_37, __pyx_t_33, __pyx_t_32, __pyx_t_31, __pyx_t_17, __pyx_t_30, __pyx_t_38, __pyx_t_10, __pyx_t_45, __pyx_t_46, __pyx_t_16, __pyx_t_20, __pyx_t_15);
  }

  /* "textTinyPy/textTinyPy.pyx":71
 * 
 * 
 *     def transform_text(self, input_string, batches = None, read_file_delimiter = "\n", LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english',             # <<<<<<<<<<<<<<
 * 
 *                       REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False, split_string = False,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.tokenizer.transform_text", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resource_path);
  __Pyx_XDECREF(__pyx_v_path_stopw);
  __Pyx_XDECREF(__pyx_v_dat_stopw);
  __Pyx_XDECREF(__pyx_v_array_stopw);
  __Pyx_XDECREF(__pyx_v_list_stopw);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_remove_stopwords);
  __Pyx_XDECREF(__pyx_v_max_num_char);
  __Pyx_XDECREF(__pyx_v_stemmer);
  __Pyx_XDECREF(__pyx_v_vocabulary_path);
  __Pyx_XDECREF(__pyx_v_concat_delimiter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":317
 * 
 * 
 *     def transform_vec_docs(self, input_list, as_token = False, LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english', REMOVE_characters = "", remove_punctuation_string = False,             # <<<<<<<<<<<<<<
 * 
 *                            remove_numbers = False, trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_7transform_vec_docs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_9tokenizer_6transform_vec_docs[] = "\n        \n        String tokenization and transformation  ( a list of character strings )\n        \n        The utf_locale and split_string functionality is based on the boost library ( http://www.boost.org ). It is advised to specify a path_2folder in case that a big file should be saved, \n        \n        rather than return the vector of all character strings. The skip-grams are a generalization of n-grams in which the components (typically words) need not to be consecutive in the text \n        \n        under consideration, but may leave gaps that are skipped over. They provide one way of overcoming the data sparsity problem found with conventional n-gram analysis. Stemming of the english language is \n        \n        done using the porter2-stemmer, for details see https://github.com/smassung/porter2_stemmer. N-gram stemming is language independent and supported by the following two functions:\n            \n            ngram_overlap    : The ngram_overlap stemming method is based on N-Gram Morphemes for Retrieval, Paul McNamee and James Mayfield ( http://clef.isti.cnr.it/2007/working_notes/mcnameeCLEF2007.pdf )\n            \n            ngram_sequential : The ngram_sequential stemming method is a modified version based on Generation, Implementation and Appraisal of an N-gram based Stemming Algorithm, B. P. Pande, Pawan Tamta, H. S. Dhami ( https://arxiv.org/pdf/1312.4824.pdf )\n            \n        The list of stop-words in all available languages was downloaded from the following link https://github.com/6/stopwords-json        \n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_7transform_vec_docs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_list = 0;
  PyObject *__pyx_v_as_token = 0;
  PyObject *__pyx_v_LOCALE_UTF = 0;
  PyObject *__pyx_v_to_lower = 0;
  PyObject *__pyx_v_to_upper = 0;
  PyObject *__pyx_v_language = 0;
  PyObject *__pyx_v_REMOVE_characters = 0;
  PyObject *__pyx_v_remove_punctuation_string = 0;
  PyObject *__pyx_v_remove_numbers = 0;
  PyObject *__pyx_v_trim_token = 0;
  PyObject *__pyx_v_split_string = 0;
  PyObject *__pyx_v_separator = 0;
  PyObject *__pyx_v_remove_punctuation_vector = 0;
  PyObject *__pyx_v_remove_stopwords = 0;
  PyObject *__pyx_v_min_num_char = 0;
  PyObject *__pyx_v_max_num_char = 0;
  PyObject *__pyx_v_stemmer = 0;
  PyObject *__pyx_v_min_n_gram = 0;
  PyObject *__pyx_v_max_n_gram = 0;
  PyObject *__pyx_v_n_gram_delimiter = 0;
  PyObject *__pyx_v_skip_n_gram = 0;
  PyObject *__pyx_v_skip_distance = 0;
  PyObject *__pyx_v_stemmer_ngram = 0;
  PyObject *__pyx_v_stemmer_gamma = 0;
  PyObject *__pyx_v_stemmer_truncate = 0;
  PyObject *__pyx_v_stemmer_batches = 0;
  PyObject *__pyx_v_vocabulary_path = 0;
  PyObject *__pyx_v_concat_delimiter = 0;
  PyObject *__pyx_v_path_2folder = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_vec_docs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_list,&__pyx_n_s_as_token,&__pyx_n_s_LOCALE_UTF,&__pyx_n_s_to_lower,&__pyx_n_s_to_upper,&__pyx_n_s_language,&__pyx_n_s_REMOVE_characters,&__pyx_n_s_remove_punctuation_string,&__pyx_n_s_remove_numbers,&__pyx_n_s_trim_token,&__pyx_n_s_split_string,&__pyx_n_s_separator,&__pyx_n_s_remove_punctuation_vector,&__pyx_n_s_remove_stopwords,&__pyx_n_s_min_num_char,&__pyx_n_s_max_num_char,&__pyx_n_s_stemmer,&__pyx_n_s_min_n_gram,&__pyx_n_s_max_n_gram,&__pyx_n_s_n_gram_delimiter,&__pyx_n_s_skip_n_gram,&__pyx_n_s_skip_distance,&__pyx_n_s_stemmer_ngram,&__pyx_n_s_stemmer_gamma,&__pyx_n_s_stemmer_truncate,&__pyx_n_s_stemmer_batches,&__pyx_n_s_vocabulary_path,&__pyx_n_s_concat_delimiter,&__pyx_n_s_path_2folder,&__pyx_n_s_threads,&__pyx_n_s_verbose,0};
    PyObject* values[31] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_False);
    values[2] = ((PyObject *)__pyx_kp_s__2);
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)__pyx_n_s_english);
    values[6] = ((PyObject *)__pyx_kp_s__2);
    values[7] = ((PyObject *)Py_False);

    /* "textTinyPy/textTinyPy.pyx":319
 *     def transform_vec_docs(self, input_list, as_token = False, LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english', REMOVE_characters = "", remove_punctuation_string = False,
 * 
 *                            remove_numbers = False, trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,             # <<<<<<<<<<<<<<
 * 
 *                            min_num_char = 1, max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,
 */
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_False);
    values[11] = ((PyObject *)__pyx_kp_s__3);
    values[12] = ((PyObject *)Py_False);
    values[13] = ((PyObject *)Py_False);
    values[14] = ((PyObject *)__pyx_int_1);
    values[15] = __pyx_k__10;

    /* "textTinyPy/textTinyPy.pyx":321
 *                            remove_numbers = False, trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,
 * 
 *                            min_num_char = 1, max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,             # <<<<<<<<<<<<<<
 * 
 *                            stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, vocabulary_path = None, concat_delimiter = None, path_2folder = "", threads = 1, verbose = False):
 */
    values[16] = ((PyObject *)Py_None);
    values[17] = ((PyObject *)__pyx_int_1);
    values[18] = ((PyObject *)__pyx_int_1);
    values[19] = ((PyObject *)__pyx_kp_s__5);
    values[20] = ((PyObject *)__pyx_int_1);
    values[21] = ((PyObject *)__pyx_int_0);
    values[22] = ((PyObject *)__pyx_int_4);
    values[23] = ((PyObject *)__pyx_float_0_0);
    values[24] = ((PyObject *)__pyx_int_3);
    values[25] = ((PyObject *)__pyx_int_1);

    /* "textTinyPy/textTinyPy.pyx":323
 *                            min_num_char = 1, max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,
 * 
 *                            stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, vocabulary_path = None, concat_delimiter = None, path_2folder = "", threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 * 
 */
    values[26] = ((PyObject *)Py_None);
    values[27] = ((PyObject *)Py_None);
    values[28] = ((PyObject *)__pyx_kp_s__2);
    values[29] = ((PyObject *)__pyx_int_1);
    values[30] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_list)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_as_token);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LOCALE_UTF);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_lower);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_upper);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_REMOVE_characters);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_string);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_numbers);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trim_token);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_split_string);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_separator);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_vector);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_stopwords);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_num_char);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_num_char);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_n_gram);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_n_gram);
          if (value) { values[18] = value; kw_args--; }
        }
        case 19:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_gram_delimiter);
          if (value) { values[19] = value; kw_args--; }
        }
        case 20:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_n_gram);
          if (value) { values[20] = value; kw_args--; }
        }
        case 21:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_distance);
          if (value) { values[21] = value; kw_args--; }
        }
        case 22:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_ngram);
          if (value) { values[22] = value; kw_args--; }
        }
        case 23:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_gamma);
          if (value) { values[23] = value; kw_args--; }
        }
        case 24:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_truncate);
          if (value) { values[24] = value; kw_args--; }
        }
        case 25:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_batches);
          if (value) { values[25] = value; kw_args--; }
        }
        case 26:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vocabulary_path);
          if (value) { values[26] = value; kw_args--; }
        }
        case 27:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_concat_delimiter);
          if (value) { values[27] = value; kw_args--; }
        }
        case 28:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2folder);
          if (value) { values[28] = value; kw_args--; }
        }
        case 29:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[29] = value; kw_args--; }
        }
        case 30:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[30] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transform_vec_docs") < 0)) __PYX_ERR(0, 317, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_list = values[0];
    __pyx_v_as_token = values[1];
    __pyx_v_LOCALE_UTF = values[2];
    __pyx_v_to_lower = values[3];
    __pyx_v_to_upper = values[4];
    __pyx_v_language = values[5];
    __pyx_v_REMOVE_characters = values[6];
    __pyx_v_remove_punctuation_string = values[7];
    __pyx_v_remove_numbers = values[8];
    __pyx_v_trim_token = values[9];
    __pyx_v_split_string = values[10];
    __pyx_v_separator = values[11];
    __pyx_v_remove_punctuation_vector = values[12];
    __pyx_v_remove_stopwords = values[13];
    __pyx_v_min_num_char = values[14];
    __pyx_v_max_num_char = values[15];
    __pyx_v_stemmer = values[16];
    __pyx_v_min_n_gram = values[17];
    __pyx_v_max_n_gram = values[18];
    __pyx_v_n_gram_delimiter = values[19];
    __pyx_v_skip_n_gram = values[20];
    __pyx_v_skip_distance = values[21];
    __pyx_v_stemmer_ngram = values[22];
    __pyx_v_stemmer_gamma = values[23];
    __pyx_v_stemmer_truncate = values[24];
    __pyx_v_stemmer_batches = values[25];
    __pyx_v_vocabulary_path = values[26];
    __pyx_v_concat_delimiter = values[27];
    __pyx_v_path_2folder = values[28];
    __pyx_v_threads = values[29];
    __pyx_v_verbose = values[30];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transform_vec_docs", 0, 1, 31, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 317, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.tokenizer.transform_vec_docs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_6transform_vec_docs(((struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *)__pyx_v_self), __pyx_v_input_list, __pyx_v_as_token, __pyx_v_LOCALE_UTF, __pyx_v_to_lower, __pyx_v_to_upper, __pyx_v_language, __pyx_v_REMOVE_characters, __pyx_v_remove_punctuation_string, __pyx_v_remove_numbers, __pyx_v_trim_token, __pyx_v_split_string, __pyx_v_separator, __pyx_v_remove_punctuation_vector, __pyx_v_remove_stopwords, __pyx_v_min_num_char, __pyx_v_max_num_char, __pyx_v_stemmer, __pyx_v_min_n_gram, __pyx_v_max_n_gram, __pyx_v_n_gram_delimiter, __pyx_v_skip_n_gram, __pyx_v_skip_distance, __pyx_v_stemmer_ngram, __pyx_v_stemmer_gamma, __pyx_v_stemmer_truncate, __pyx_v_stemmer_batches, __pyx_v_vocabulary_path, __pyx_v_concat_delimiter, __pyx_v_path_2folder, __pyx_v_threads, __pyx_v_verbose);

  /* "textTinyPy/textTinyPy.pyx":317
 * 
 * 
 *     def transform_vec_docs(self, input_list, as_token = False, LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english', REMOVE_characters = "", remove_punctuation_string = False,             # <<<<<<<<<<<<<<
 * 
 *                            remove_numbers = False, trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_9tokenizer_6transform_vec_docs(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer *__pyx_v_self, PyObject *__pyx_v_input_list, PyObject *__pyx_v_as_token, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_vocabulary_path, PyObject *__pyx_v_concat_delimiter, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_resource_path = NULL;
  PyObject *__pyx_v_path_stopw = NULL;
  PyObject *__pyx_v_dat_stopw = NULL;
  PyObject *__pyx_v_array_stopw = NULL;
  PyObject *__pyx_v_list_stopw = NULL;
  std::vector<std::string>  __pyx_v_result_list_string;
  std::vector<std::vector<std::string> >  __pyx_v_result_list_token;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  std::vector<std::string>  __pyx_t_13;
  std::vector<std::string>  __pyx_t_14;
  std::string __pyx_t_15;
  std::string __pyx_t_16;
  std::string __pyx_t_17;
  bool __pyx_t_18;
  bool __pyx_t_19;
  bool __pyx_t_20;
  bool __pyx_t_21;
  bool __pyx_t_22;
  bool __pyx_t_23;
  bool __pyx_t_24;
  std::string __pyx_t_25;
  bool __pyx_t_26;
  int __pyx_t_27;
  std::string __pyx_t_28;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  std::string __pyx_t_33;
  std::string __pyx_t_34;
  std::string __pyx_t_35;
  int __pyx_t_36;
  double __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  bool __pyx_t_41;
  std::string __pyx_t_42;
  __Pyx_RefNannySetupContext("transform_vec_docs", 0);
  __Pyx_INCREF(__pyx_v_remove_stopwords);
  __Pyx_INCREF(__pyx_v_max_num_char);
  __Pyx_INCREF(__pyx_v_stemmer);
  __Pyx_INCREF(__pyx_v_vocabulary_path);
  __Pyx_INCREF(__pyx_v_concat_delimiter);

  /* "textTinyPy/textTinyPy.pyx":347
 * 
 * 
 *         assert isinstance(input_list, list) and len(input_list) > 1, 'the input_list parameter should be of type list'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(as_token, bool), 'the as_token parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyList_Check(__pyx_v_input_list); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_4 = PyObject_Length(__pyx_v_input_list); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __pyx_t_3 = ((__pyx_t_4 > 1) != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_list_parameter_should);
      __PYX_ERR(0, 347, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":349
 *         assert isinstance(input_list, list) and len(input_list) > 1, 'the input_list parameter should be of type list'
 * 
 *         assert isinstance(as_token, bool), 'the as_token parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_as_token, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_as_token_parameter_should_be);
      __PYX_ERR(0, 349, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":351
 *         assert isinstance(as_token, bool), 'the as_token parameter should be of type boolean'
 * 
 *         assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         IF UNAME_SYSNAME == "Windows":
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_path_2folder, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul);
      __PYX_ERR(0, 351, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":359
 *         IF UNAME_SYSNAME == "Darwin" or UNAME_SYSNAME == "Linux":
 * 
 *             assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_2folder, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_6, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul_2);
      __PYX_ERR(0, 359, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":361
 *             assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_LOCALE_UTF, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_LOCALE_UTF_parameter_should);
      __PYX_ERR(0, 361, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":363
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_to_lower, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_lower_parameter_should_be);
      __PYX_ERR(0, 363, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":365
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_to_upper, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_upper_parameter_should_be);
      __PYX_ERR(0, 365, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":367
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_REMOVE_characters, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_REMOVE_characters_parameter);
      __PYX_ERR(0, 367, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":369
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_punctuation_string, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_string_pa);
      __PYX_ERR(0, 369, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":371
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_numbers, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_numbers_parameter_sho);
      __PYX_ERR(0, 371, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":373
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_trim_token, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trim_token_parameter_should);
      __PYX_ERR(0, 373, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":375
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_split_string, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_split_string_parameter_shoul);
      __PYX_ERR(0, 375, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":377
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_separator, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_separator_parameter_should_b);
      __PYX_ERR(0, 377, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":379
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_punctuation_vector, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_vector_pa);
      __PYX_ERR(0, 379, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":381
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_language, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_language_parameter_should_be);
      __PYX_ERR(0, 381, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":383
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",             # <<<<<<<<<<<<<<
 *                             "estonian", "finnish", "french","galician", "german", "greek", "hausa", "hebrew", "hindi", "hungarian", "indonesian", "irish", "italian",
 *                             "latvian", "marathi", "norwegian", "persian", "polish", "portuguese", "romanian", "russian", "slovak", "slovenian", "somalia", "spanish",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_language);
    __pyx_t_5 = __pyx_v_language;
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_afrikaans, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_arabic, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_armenian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_basque, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_bengali, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_breton, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_bulgarian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_catalan, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_croatian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_czech, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_danish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_dutch, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_english, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_estonian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_finnish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_french, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_galician, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_german, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_greek, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_hausa, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_hebrew, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_hindi, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_hungarian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_indonesian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_irish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_italian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_latvian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_marathi, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_norwegian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_persian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_polish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_portuguese, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_romanian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_russian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_slovak, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_slovenian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_somalia, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_spanish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_swahili, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_swedish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_turkish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_yoruba, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_zulu, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 383, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_languages_in_case_of_s);
      __PYX_ERR(0, 383, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":395
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
  __pyx_t_5 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_stopwords, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":397
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":405
 *                 ELSE:
 * 
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))             # <<<<<<<<<<<<<<
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 */
      __pyx_t_5 = PyNumber_Add(__pyx_v_language, __pyx_kp_s_txt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_n_s_stopwords);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyString_Join(__pyx_kp_s__6, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_resource_path = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "textTinyPy/textTinyPy.pyx":407
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)             # <<<<<<<<<<<<<<
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pkg_resources); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_resource_filename); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_textTinyPy);
        __Pyx_GIVEREF(__pyx_n_s_textTinyPy);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_n_s_textTinyPy);
        __Pyx_INCREF(__pyx_v_resource_path);
        __Pyx_GIVEREF(__pyx_v_resource_path);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_resource_path);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_path_stopw = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "textTinyPy/textTinyPy.pyx":409
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)             # <<<<<<<<<<<<<<
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_path_stopw);
      __Pyx_GIVEREF(__pyx_v_path_stopw);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_path_stopw);
      __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_header, Py_None) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 409, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_dat_stopw = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "textTinyPy/textTinyPy.pyx":411
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw = [i[0] for i in array_stopw]
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_dat_stopw, __pyx_n_s_as_matrix); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_columns, Py_None) < 0) __PYX_ERR(0, 411, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 411, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 411, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 411, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 411, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 411, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 411, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_array_stopw = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "textTinyPy/textTinyPy.pyx":413
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 * 
 *                 list_stopw = [i[0] for i in array_stopw]             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw.append("")
 */
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 413, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (likely(PyList_CheckExact(__pyx_v_array_stopw)) || PyTuple_CheckExact(__pyx_v_array_stopw)) {
        __pyx_t_5 = __pyx_v_array_stopw; __Pyx_INCREF(__pyx_t_5); __pyx_t_4 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_array_stopw); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 413, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_9); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 413, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 413, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_9); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 413, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 413, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_11(__pyx_t_5);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 413, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_list_stopw = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "textTinyPy/textTinyPy.pyx":415
 *                 list_stopw = [i[0] for i in array_stopw]
 * 
 *                 list_stopw.append("")             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_list_stopw, __pyx_kp_s__2); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 415, __pyx_L1_error)

      /* "textTinyPy/textTinyPy.pyx":397
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
      goto __pyx_L49;
    }

    /* "textTinyPy/textTinyPy.pyx":419
 *             else:
 * 
 *                 list_stopw = []             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(remove_stopwords, list):
 */
    /*else*/ {
      __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_v_list_stopw = __pyx_t_6;
      __pyx_t_6 = 0;
    }
    __pyx_L49:;

    /* "textTinyPy/textTinyPy.pyx":395
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
    goto __pyx_L48;
  }

  /* "textTinyPy/textTinyPy.pyx":421
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
  __pyx_t_3 = PyList_Check(__pyx_v_remove_stopwords); 
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":423
 *         elif isinstance(remove_stopwords, list):
 * 
 *             list_stopw = remove_stopwords             # <<<<<<<<<<<<<<
 * 
 *             remove_stopwords = True
 */
    __Pyx_INCREF(__pyx_v_remove_stopwords);
    __pyx_v_list_stopw = __pyx_v_remove_stopwords;

    /* "textTinyPy/textTinyPy.pyx":425
 *             list_stopw = remove_stopwords
 * 
 *             remove_stopwords = True             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_remove_stopwords, Py_True);

    /* "textTinyPy/textTinyPy.pyx":421
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
    goto __pyx_L48;
  }

  /* "textTinyPy/textTinyPy.pyx":429
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_6);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_L48:;

  /* "textTinyPy/textTinyPy.pyx":431
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_min_num_char, __pyx_t_6); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L52_bool_binop_done;
    }
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_min_num_char, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 431, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L52_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_num_char_parameter_shoul);
      __PYX_ERR(0, 431, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":433
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'             # <<<<<<<<<<<<<<
 * 
 *         if max_num_char == MAX_VAL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_max_num_char, __pyx_t_6); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L54_bool_binop_done;
    }
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_v_min_num_char, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 433, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 433, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L54_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_num_char_parameter_shoul);
      __PYX_ERR(0, 433, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":435
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":437
 *         if max_num_char == MAX_VAL:
 * 
 *             max_num_char = 1000000000             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
    __Pyx_INCREF(__pyx_int_1000000000);
    __Pyx_DECREF_SET(__pyx_v_max_num_char, __pyx_int_1000000000);

    /* "textTinyPy/textTinyPy.pyx":435
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  }

  /* "textTinyPy/textTinyPy.pyx":439
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  __pyx_t_1 = (__pyx_v_stemmer != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":441
 *         if stemmer is not None:
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyObject_IsInstance(__pyx_v_stemmer, __pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 441, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!(__pyx_t_3 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_parameter_should_be);
        __PYX_ERR(0, 441, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":443
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __Pyx_INCREF(__pyx_v_stemmer);
      __pyx_t_5 = __pyx_v_stemmer;
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_porter2_stemmer, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
      if (!__pyx_t_1) {
      } else {
        __pyx_t_3 = __pyx_t_1;
        goto __pyx_L58_bool_binop_done;
      }
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
      if (!__pyx_t_1) {
      } else {
        __pyx_t_3 = __pyx_t_1;
        goto __pyx_L58_bool_binop_done;
      }
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_5, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
      __pyx_t_3 = __pyx_t_1;
      __pyx_L58_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!(__pyx_t_3 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_stemmers_are_porter2_s);
        __PYX_ERR(0, 443, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":439
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":445
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  __pyx_t_3 = (__pyx_v_stemmer == Py_None);
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":447
 *         if stemmer is None:
 * 
 *             stemmer = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_stemmer, __pyx_n_s_NULL);

    /* "textTinyPy/textTinyPy.pyx":445
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":449
 *             stemmer = "NULL"
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_min_n_gram, __pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L62_bool_binop_done;
    }
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_min_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 449, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 449, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L62_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_n_gram_parameter_should);
      __PYX_ERR(0, 449, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":451
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_max_n_gram, __pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L64_bool_binop_done;
    }
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 451, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L64_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should);
      __PYX_ERR(0, 451, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":453
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_v_min_n_gram, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 453, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should_2);
      __PYX_ERR(0, 453, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":455
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_n_gram_delimiter, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_gram_delimiter_parameter_s);
      __PYX_ERR(0, 455, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":457
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_skip_n_gram, __pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L66_bool_binop_done;
    }
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_skip_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L66_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_n_gram_parameter_should);
      __PYX_ERR(0, 457, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":459
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_skip_distance, __pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L68_bool_binop_done;
    }
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_skip_distance, __pyx_int_neg_1, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L68_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_distance_parameter_shou);
      __PYX_ERR(0, 459, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":461
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  __pyx_t_1 = (__pyx_v_stemmer != Py_None);
  __pyx_t_3 = (__pyx_t_1 != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":463
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 463, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":465
 *             if stemmer == "ngram_sequential":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L72_bool_binop_done;
        }
        __pyx_t_5 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 465, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_3 = __pyx_t_2;
        __pyx_L72_bool_binop_done:;
        if (unlikely(!__pyx_t_3)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 465, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":467
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_2 = PyFloat_Check(__pyx_v_stemmer_gamma); 
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (__pyx_t_1) {
        } else {
          __pyx_t_3 = __pyx_t_1;
          goto __pyx_L74_bool_binop_done;
        }
        __pyx_t_5 = PyObject_RichCompare(__pyx_v_stemmer_gamma, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 467, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 467, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_3 = __pyx_t_1;
        __pyx_L74_bool_binop_done:;
        if (unlikely(!__pyx_t_3)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_gamma_parameter_shou);
          __PYX_ERR(0, 467, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":469
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_stemmer_truncate, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L76_bool_binop_done;
        }
        __pyx_t_5 = PyObject_RichCompare(__pyx_v_stemmer_truncate, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_3 = __pyx_t_2;
        __pyx_L76_bool_binop_done:;
        if (unlikely(!__pyx_t_3)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_truncate_parameter_s);
          __PYX_ERR(0, 469, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":471
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_overlap":
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = PyObject_IsInstance(__pyx_v_stemmer_batches, __pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (__pyx_t_1) {
        } else {
          __pyx_t_3 = __pyx_t_1;
          goto __pyx_L78_bool_binop_done;
        }
        __pyx_t_5 = PyObject_RichCompare(__pyx_v_stemmer_batches, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 471, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_3 = __pyx_t_1;
        __pyx_L78_bool_binop_done:;
        if (unlikely(!__pyx_t_3)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_batches_parameter_sh);
          __PYX_ERR(0, 471, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":463
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":473
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 473, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":475
 *             if stemmer == "ngram_overlap":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         if vocabulary_path is not None:
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_5); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L81_bool_binop_done;
        }
        __pyx_t_5 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_3 = __pyx_t_2;
        __pyx_L81_bool_binop_done:;
        if (unlikely(!__pyx_t_3)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 475, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":473
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":461
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  }

  /* "textTinyPy/textTinyPy.pyx":477
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *         if vocabulary_path is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 */
  __pyx_t_3 = (__pyx_v_vocabulary_path != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":479
 *         if vocabulary_path is not None:
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         if vocabulary_path is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_vocabulary_path, __pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_vocabulary_path_parameter_sh);
        __PYX_ERR(0, 479, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":477
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *         if vocabulary_path is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":481
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 * 
 *         if vocabulary_path is None:             # <<<<<<<<<<<<<<
 * 
 *             vocabulary_path = ""
 */
  __pyx_t_2 = (__pyx_v_vocabulary_path == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":483
 *         if vocabulary_path is None:
 * 
 *             vocabulary_path = ""             # <<<<<<<<<<<<<<
 * 
 *         if concat_delimiter is not None:
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_vocabulary_path, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":481
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 * 
 *         if vocabulary_path is None:             # <<<<<<<<<<<<<<
 * 
 *             vocabulary_path = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":485
 *             vocabulary_path = ""
 * 
 *         if concat_delimiter is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'
 */
  __pyx_t_3 = (__pyx_v_concat_delimiter != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":487
 *         if concat_delimiter is not None:
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_concat_delimiter, __pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_concat_delimiter_parameter_s);
        __PYX_ERR(0, 487, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":485
 *             vocabulary_path = ""
 * 
 *         if concat_delimiter is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'
 */
    goto __pyx_L85;
  }

  /* "textTinyPy/textTinyPy.pyx":491
 *         else:
 * 
 *             concat_delimiter = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_concat_delimiter, __pyx_n_s_NULL);
  }
  __pyx_L85:;

  /* "textTinyPy/textTinyPy.pyx":493
 *             concat_delimiter = "NULL"
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = (__pyx_t_3 != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L86_bool_binop_done;
    }
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 493, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L86_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_threads_parameter_should_be);
      __PYX_ERR(0, 493, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":495
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_5 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_5); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 495, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":506
 *         cdef vector[vector[string]] result_list_token
 * 
 *         if as_token:             # <<<<<<<<<<<<<<
 * 
 *             result_list_token = self.bgf.res_token_list(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_as_token); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 506, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":508
 *         if as_token:
 * 
 *             result_list_token = self.bgf.res_token_list(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,             # <<<<<<<<<<<<<<
 * 
 *                                                         remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,
 */
    __pyx_t_13 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_input_list); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    if (unlikely(!__pyx_v_list_stopw)) { __Pyx_RaiseUnboundLocalError("list_stopw"); __PYX_ERR(0, 508, __pyx_L1_error) }
    __pyx_t_14 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_list_stopw); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_v_language); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_16 = __pyx_convert_string_from_py_std__in_string(__pyx_v_LOCALE_UTF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_max_num_char); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_REMOVE_characters); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely((__pyx_t_18 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely((__pyx_t_19 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely((__pyx_t_20 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":510
 *             result_list_token = self.bgf.res_token_list(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,
 * 
 *                                                         remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,             # <<<<<<<<<<<<<<
 * 
 *                                                         min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2folder, stemmer_ngram,
 */
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely((__pyx_t_21 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely((__pyx_t_22 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely((__pyx_t_24 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_25 = __pyx_convert_string_from_py_std__in_string(__pyx_v_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_27 = __Pyx_PyInt_As_int(__pyx_v_min_num_char); if (unlikely((__pyx_t_27 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __pyx_t_28 = __pyx_convert_string_from_py_std__in_string(__pyx_v_stemmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":512
 *                                                         remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,
 * 
 *                                                         min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2folder, stemmer_ngram,             # <<<<<<<<<<<<<<
 * 
 *                                                         stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path)
 */
    __pyx_t_29 = __Pyx_PyInt_As_int(__pyx_v_min_n_gram); if (unlikely((__pyx_t_29 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_t_30 = __Pyx_PyInt_As_int(__pyx_v_max_n_gram); if (unlikely((__pyx_t_30 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_t_31 = __Pyx_PyInt_As_int(__pyx_v_skip_n_gram); if (unlikely((__pyx_t_31 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_v_skip_distance); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_t_33 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_t_34 = __pyx_convert_string_from_py_std__in_string(__pyx_v_concat_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_t_35 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
    __pyx_t_36 = __Pyx_PyInt_As_int(__pyx_v_stemmer_ngram); if (unlikely((__pyx_t_36 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":514
 *                                                         min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2folder, stemmer_ngram,
 * 
 *                                                         stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path)             # <<<<<<<<<<<<<<
 * 
 *             return result_list_token
 */
    __pyx_t_37 = __pyx_PyFloat_AsDouble(__pyx_v_stemmer_gamma); if (unlikely((__pyx_t_37 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __pyx_t_38 = __Pyx_PyInt_As_int(__pyx_v_stemmer_truncate); if (unlikely((__pyx_t_38 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __pyx_t_39 = __Pyx_PyInt_As_int(__pyx_v_stemmer_batches); if (unlikely((__pyx_t_39 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __pyx_t_40 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_40 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __pyx_t_41 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_41 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
    __pyx_t_42 = __pyx_convert_string_from_py_std__in_string(__pyx_v_vocabulary_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":508
 *         if as_token:
 * 
 *             result_list_token = self.bgf.res_token_list(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,             # <<<<<<<<<<<<<<
 * 
 *                                                         remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,
 */
    __pyx_v_result_list_token = __pyx_v_self->bgf->res_token_list(__pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_8, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_29, __pyx_t_30, __pyx_t_31, __pyx_t_32, __pyx_t_33, __pyx_t_34, __pyx_t_35, __pyx_t_36, __pyx_t_37, __pyx_t_38, __pyx_t_39, __pyx_t_40, __pyx_t_41, __pyx_t_42);

    /* "textTinyPy/textTinyPy.pyx":516
 *                                                         stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path)
 * 
 *             return result_list_token             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_v_result_list_token); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "textTinyPy/textTinyPy.pyx":506
 *         cdef vector[vector[string]] result_list_token
 * 
 *         if as_token:             # <<<<<<<<<<<<<<
 * 
 *             result_list_token = self.bgf.res_token_list(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,
 */
  }

  /* "textTinyPy/textTinyPy.pyx":520
 *         else:
 * 
 *             result_list_string = self.bgf.res_token_vector(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,             # <<<<<<<<<<<<<<
 * 
 *                                                            remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,
 */
  /*else*/ {
    __pyx_t_14 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_input_list); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    if (unlikely(!__pyx_v_list_stopw)) { __Pyx_RaiseUnboundLocalError("list_stopw"); __PYX_ERR(0, 520, __pyx_L1_error) }
    __pyx_t_13 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_list_stopw); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_42 = __pyx_convert_string_from_py_std__in_string(__pyx_v_language); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_35 = __pyx_convert_string_from_py_std__in_string(__pyx_v_LOCALE_UTF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_40 = __Pyx_PyInt_As_int(__pyx_v_max_num_char); if (unlikely((__pyx_t_40 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_34 = __pyx_convert_string_from_py_std__in_string(__pyx_v_REMOVE_characters); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_41 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely((__pyx_t_41 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)
    __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely((__pyx_t_24 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 520, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":522
 *             result_list_string = self.bgf.res_token_vector(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,
 * 
 *                                                            remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,             # <<<<<<<<<<<<<<
 * 
 *                                                            min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2folder, stemmer_ngram,
 */
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely((__pyx_t_22 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely((__pyx_t_21 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely((__pyx_t_20 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_33 = __pyx_convert_string_from_py_std__in_string(__pyx_v_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely((__pyx_t_19 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_39 = __Pyx_PyInt_As_int(__pyx_v_min_num_char); if (unlikely((__pyx_t_39 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_28 = __pyx_convert_string_from_py_std__in_string(__pyx_v_stemmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 522, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":524
 *                                                            remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,
 * 
 *                                                            min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2folder, stemmer_ngram,             # <<<<<<<<<<<<<<
 * 
 *                                                            stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path)
 */
    __pyx_t_38 = __Pyx_PyInt_As_int(__pyx_v_min_n_gram); if (unlikely((__pyx_t_38 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_t_36 = __Pyx_PyInt_As_int(__pyx_v_max_n_gram); if (unlikely((__pyx_t_36 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_v_skip_n_gram); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_t_31 = __Pyx_PyInt_As_int(__pyx_v_skip_distance); if (unlikely((__pyx_t_31 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_t_25 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_concat_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_t_16 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
    __pyx_t_30 = __Pyx_PyInt_As_int(__pyx_v_stemmer_ngram); if (unlikely((__pyx_t_30 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":526
 *                                                            min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter, path_2folder, stemmer_ngram,
 * 
 *                                                            stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path)             # <<<<<<<<<<<<<<
 * 
 *             return result_list_string
 */
    __pyx_t_37 = __pyx_PyFloat_AsDouble(__pyx_v_stemmer_gamma); if (unlikely((__pyx_t_37 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
    __pyx_t_29 = __Pyx_PyInt_As_int(__pyx_v_stemmer_truncate); if (unlikely((__pyx_t_29 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
    __pyx_t_27 = __Pyx_PyInt_As_int(__pyx_v_stemmer_batches); if (unlikely((__pyx_t_27 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
    __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_18 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
    __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_v_vocabulary_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)

    /* "textTinyPy/textTinyPy.pyx":520
 *         else:
 * 
 *             result_list_string = self.bgf.res_token_vector(input_list, list_stopw, language, LOCALE_UTF, max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string,             # <<<<<<<<<<<<<<
 * 
 *                                                            remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char, stemmer,
 */
    __pyx_v_result_list_string = __pyx_v_self->bgf->res_token_vector(__pyx_t_14, __pyx_t_13, __pyx_t_42, __pyx_t_35, __pyx_t_40, __pyx_t_34, __pyx_t_41, __pyx_t_26, __pyx_t_24, __pyx_t_23, __pyx_t_22, __pyx_t_21, __pyx_t_20, __pyx_t_33, __pyx_t_19, __pyx_t_39, __pyx_t_28, __pyx_t_38, __pyx_t_36, __pyx_t_32, __pyx_t_31, __pyx_t_25, __pyx_t_17, __pyx_t_16, __pyx_t_30, __pyx_t_37, __pyx_t_29, __pyx_t_27, __pyx_t_8, __pyx_t_18, __pyx_t_15);

    /* "textTinyPy/textTinyPy.pyx":528
 *                                                            stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose, vocabulary_path)
 * 
 *             return result_list_string             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_list_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "textTinyPy/textTinyPy.pyx":317
 * 
 * 
 *     def transform_vec_docs(self, input_list, as_token = False, LOCALE_UTF = "", to_lower = False, to_upper = False, language = 'english', REMOVE_characters = "", remove_punctuation_string = False,             # <<<<<<<<<<<<<<
 * 
 *                            remove_numbers = False, trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.tokenizer.transform_vec_docs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resource_path);
  __Pyx_XDECREF(__pyx_v_path_stopw);
  __Pyx_XDECREF(__pyx_v_dat_stopw);
  __Pyx_XDECREF(__pyx_v_array_stopw);
  __Pyx_XDECREF(__pyx_v_list_stopw);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_remove_stopwords);
  __Pyx_XDECREF(__pyx_v_max_num_char);
  __Pyx_XDECREF(__pyx_v_stemmer);
  __Pyx_XDECREF(__pyx_v_vocabulary_path);
  __Pyx_XDECREF(__pyx_v_concat_delimiter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":544
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.bgf = new big_files()
 */

/* Python wrapper */
static int __pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files___cinit__(((struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "textTinyPy/textTinyPy.pyx":546
 *     def __cinit__(self):
 * 
 *         self.bgf = new big_files()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->bgf = new big_files();

  /* "textTinyPy/textTinyPy.pyx":544
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.bgf = new big_files()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":549
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.bgf
 */

/* Python wrapper */
static void __pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_2__dealloc__(((struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "textTinyPy/textTinyPy.pyx":551
 *     def __dealloc__(self):
 * 
 *         del self.bgf             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->bgf;

  /* "textTinyPy/textTinyPy.pyx":549
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.bgf
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "textTinyPy/textTinyPy.pyx":555
 * 
 * 
 *     def big_text_splitter(self, input_path_file = None, output_path_folder = None, batches = 2, end_query = None, trimmed_line = False, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_5big_text_splitter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_4big_text_splitter[] = "\n        \n        The big_text_splitter function splits a text file into sub-text-files using either the batches parameter (big-text-splitter-bytes) or both the batches and \n        \n        the end_query parameter (big-text-splitter-query). The end_query parameter (if not None) should be a character string specifying a word that appears repeatedly \n        \n        at the end of each line in the text file.\n\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_5big_text_splitter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_file = 0;
  PyObject *__pyx_v_output_path_folder = 0;
  PyObject *__pyx_v_batches = 0;
  PyObject *__pyx_v_end_query = 0;
  PyObject *__pyx_v_trimmed_line = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("big_text_splitter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_file,&__pyx_n_s_output_path_folder,&__pyx_n_s_batches,&__pyx_n_s_end_query,&__pyx_n_s_trimmed_line,&__pyx_n_s_verbose,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_int_2);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_path_folder);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_batches);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_query);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trimmed_line);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "big_text_splitter") < 0)) __PYX_ERR(0, 555, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_file = values[0];
    __pyx_v_output_path_folder = values[1];
    __pyx_v_batches = values[2];
    __pyx_v_end_query = values[3];
    __pyx_v_trimmed_line = values[4];
    __pyx_v_verbose = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("big_text_splitter", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 555, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.big_text_splitter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_4big_text_splitter(((struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *)__pyx_v_self), __pyx_v_input_path_file, __pyx_v_output_path_folder, __pyx_v_batches, __pyx_v_end_query, __pyx_v_trimmed_line, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_4big_text_splitter(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_output_path_folder, PyObject *__pyx_v_batches, PyObject *__pyx_v_end_query, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_t_9;
  std::string __pyx_t_10;
  std::string __pyx_t_11;
  bool __pyx_t_12;
  bool __pyx_t_13;
  __Pyx_RefNannySetupContext("big_text_splitter", 0);
  __Pyx_INCREF(__pyx_v_end_query);

  /* "textTinyPy/textTinyPy.pyx":568
 *         '''
 * 
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh);
      __PYX_ERR(0, 568, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":570
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(output_path_folder, basestring), 'the output_path_folder parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_path_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_path_file);
        __Pyx_GIVEREF(__pyx_v_input_path_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_path_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh_2);
      __PYX_ERR(0, 570, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":572
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(output_path_folder, basestring), 'the output_path_folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         IF UNAME_SYSNAME == "Windows":
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_output_path_folder, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_folder_parameter);
      __PYX_ERR(0, 572, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":580
 *         IF UNAME_SYSNAME == "Darwin" or UNAME_SYSNAME == "Linux":
 * 
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(output_path_folder), "the output_path_folder parameter should be a valid path to a folder"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_path_folder, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_folder_parameter_2);
      __PYX_ERR(0, 580, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":582
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"
 * 
 *         assert os.path.exists(output_path_folder), "the output_path_folder parameter should be a valid path to a folder"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_output_path_folder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_output_path_folder};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_output_path_folder};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_output_path_folder);
        __Pyx_GIVEREF(__pyx_v_output_path_folder);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_output_path_folder);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_folder_parameter_3);
      __PYX_ERR(0, 582, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":584
 *         assert os.path.exists(output_path_folder), "the output_path_folder parameter should be a valid path to a folder"
 * 
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'             # <<<<<<<<<<<<<<
 * 
 *         if end_query is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_batches, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_batches, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_7;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_batches_parameter_should_be_2);
      __PYX_ERR(0, 584, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":586
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'
 * 
 *         if end_query is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_end_query != Py_None);
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":588
 *         if end_query is not None:
 * 
 *             assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         if end_query is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = PyObject_IsInstance(__pyx_v_end_query, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 588, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_7 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_end_query_parameter_should_b);
        __PYX_ERR(0, 588, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":586
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'
 * 
 *         if end_query is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":590
 *             assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 * 
 *         if end_query is None:             # <<<<<<<<<<<<<<
 * 
 *             end_query = "NULL"
 */
  __pyx_t_7 = (__pyx_v_end_query == Py_None);
  __pyx_t_2 = (__pyx_t_7 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":592
 *         if end_query is None:
 * 
 *             end_query = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_end_query, __pyx_n_s_NULL);

    /* "textTinyPy/textTinyPy.pyx":590
 *             assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 * 
 *         if end_query is None:             # <<<<<<<<<<<<<<
 * 
 *             end_query = "NULL"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":594
 *             end_query = "NULL"
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_trimmed_line, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trimmed_line_parameter_shoul);
      __PYX_ERR(0, 594, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":596
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         self.bgf.bytes_splitter(input_path_file, batches, output_path_folder, end_query, trimmed_line, verbose)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 596, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 596, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":598
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         self.bgf.bytes_splitter(input_path_file, batches, output_path_folder, end_query, trimmed_line, verbose)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_batches); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_output_path_folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_end_query); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_trimmed_line); if (unlikely((__pyx_t_12 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
  __pyx_v_self->bgf->bytes_splitter(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13);

  /* "textTinyPy/textTinyPy.pyx":555
 * 
 * 
 *     def big_text_splitter(self, input_path_file = None, output_path_folder = None, batches = 2, end_query = None, trimmed_line = False, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.big_text_splitter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_end_query);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":602
 * 
 * 
 *     def big_text_parser(self, input_path_folder = None, output_path_folder = None, start_query = None, end_query = None, min_lines = 1, trimmed_line = False, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_7big_text_parser(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_6big_text_parser[] = "\n        \n        the big_text_parser function parses text files from an input folder and saves those processed files to an output folder\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_7big_text_parser(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_folder = 0;
  PyObject *__pyx_v_output_path_folder = 0;
  PyObject *__pyx_v_start_query = 0;
  PyObject *__pyx_v_end_query = 0;
  PyObject *__pyx_v_min_lines = 0;
  PyObject *__pyx_v_trimmed_line = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("big_text_parser (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_folder,&__pyx_n_s_output_path_folder,&__pyx_n_s_start_query,&__pyx_n_s_end_query,&__pyx_n_s_min_lines,&__pyx_n_s_trimmed_line,&__pyx_n_s_verbose,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)__pyx_int_1);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_folder);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_path_folder);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_query);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_query);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_lines);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trimmed_line);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "big_text_parser") < 0)) __PYX_ERR(0, 602, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_folder = values[0];
    __pyx_v_output_path_folder = values[1];
    __pyx_v_start_query = values[2];
    __pyx_v_end_query = values[3];
    __pyx_v_min_lines = values[4];
    __pyx_v_trimmed_line = values[5];
    __pyx_v_verbose = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("big_text_parser", 0, 0, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 602, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.big_text_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_6big_text_parser(((struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *)__pyx_v_self), __pyx_v_input_path_folder, __pyx_v_output_path_folder, __pyx_v_start_query, __pyx_v_end_query, __pyx_v_min_lines, __pyx_v_trimmed_line, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_6big_text_parser(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_folder, PyObject *__pyx_v_output_path_folder, PyObject *__pyx_v_start_query, PyObject *__pyx_v_end_query, PyObject *__pyx_v_min_lines, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  std::string __pyx_t_6;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_t_10;
  bool __pyx_t_11;
  bool __pyx_t_12;
  __Pyx_RefNannySetupContext("big_text_parser", 0);

  /* "textTinyPy/textTinyPy.pyx":610
 *         '''
 * 
 *         assert isinstance(input_path_folder, basestring), 'the input_path_folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(output_path_folder, basestring), 'the output_path_folder parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_folder, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_folder_parameter);
      __PYX_ERR(0, 610, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":612
 *         assert isinstance(input_path_folder, basestring), 'the input_path_folder parameter should be of type string'
 * 
 *         assert isinstance(output_path_folder, basestring), 'the output_path_folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         IF UNAME_SYSNAME == "Windows":
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_output_path_folder, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_folder_parameter);
      __PYX_ERR(0, 612, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":620
 *         ELSE:
 * 
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_path_folder, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 620, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_folder_parameter_2);
      __PYX_ERR(0, 620, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":622
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"
 * 
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_start_query, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_start_query_parameter_should);
      __PYX_ERR(0, 622, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":624
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'
 * 
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_end_query, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_end_query_parameter_should_b);
      __PYX_ERR(0, 624, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":626
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 * 
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_min_lines, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_min_lines, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 626, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_lines_parameter_should_b);
      __PYX_ERR(0, 626, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":628
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_trimmed_line, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 628, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trimmed_line_parameter_shoul);
      __PYX_ERR(0, 628, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":630
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         self.bgf.wrapper_batches_parser(input_path_folder, start_query, end_query, output_path_folder, min_lines, trimmed_line, verbose)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 630, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 630, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":632
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         self.bgf.wrapper_batches_parser(input_path_folder, start_query, end_query, output_path_folder, min_lines, trimmed_line, verbose)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_start_query); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_end_query); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_output_path_folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_min_lines); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_trimmed_line); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_12 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L1_error)
  __pyx_v_self->bgf->wrapper_batches_parser(__pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

  /* "textTinyPy/textTinyPy.pyx":602
 * 
 * 
 *     def big_text_parser(self, input_path_folder = None, output_path_folder = None, start_query = None, end_query = None, min_lines = 1, trimmed_line = False, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.big_text_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":636
 * 
 * 
 *     def big_text_tokenizer(self, input_path_folder = None, output_path_folder = None, batches = 2, increment_batch_no = 1, LOCALE_UTF = "", to_lower = False,             # <<<<<<<<<<<<<<
 * 
 *                            to_upper = False, language = 'english', read_file_delimiter = "\n", remove_punctuation_string = False, remove_numbers = False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_9big_text_tokenizer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_8big_text_tokenizer[] = "\n        \n        the big_text_tokenizer function tokenizes and transforms the text files of a folder and saves those files to either a folder or a single file.\n        \n        There is also the option to save a frequency vocabulary of those transformed tokens to a file.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_9big_text_tokenizer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_folder = 0;
  PyObject *__pyx_v_output_path_folder = 0;
  PyObject *__pyx_v_batches = 0;
  PyObject *__pyx_v_increment_batch_no = 0;
  PyObject *__pyx_v_LOCALE_UTF = 0;
  PyObject *__pyx_v_to_lower = 0;
  PyObject *__pyx_v_to_upper = 0;
  PyObject *__pyx_v_language = 0;
  PyObject *__pyx_v_read_file_delimiter = 0;
  PyObject *__pyx_v_remove_punctuation_string = 0;
  PyObject *__pyx_v_remove_numbers = 0;
  PyObject *__pyx_v_trim_token = 0;
  PyObject *__pyx_v_REMOVE_characters = 0;
  PyObject *__pyx_v_split_string = 0;
  PyObject *__pyx_v_separator = 0;
  PyObject *__pyx_v_remove_punctuation_vector = 0;
  PyObject *__pyx_v_remove_stopwords = 0;
  PyObject *__pyx_v_min_num_char = 0;
  PyObject *__pyx_v_max_num_char = 0;
  PyObject *__pyx_v_stemmer = 0;
  PyObject *__pyx_v_min_n_gram = 0;
  PyObject *__pyx_v_max_n_gram = 0;
  PyObject *__pyx_v_n_gram_delimiter = 0;
  PyObject *__pyx_v_skip_n_gram = 0;
  PyObject *__pyx_v_skip_distance = 0;
  PyObject *__pyx_v_stemmer_ngram = 0;
  PyObject *__pyx_v_stemmer_gamma = 0;
  PyObject *__pyx_v_stemmer_truncate = 0;
  PyObject *__pyx_v_stemmer_batches = 0;
  PyObject *__pyx_v_vocabulary_path = 0;
  PyObject *__pyx_v_save_2single_file = 0;
  PyObject *__pyx_v_concat_delimiter = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("big_text_tokenizer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_folder,&__pyx_n_s_output_path_folder,&__pyx_n_s_batches,&__pyx_n_s_increment_batch_no,&__pyx_n_s_LOCALE_UTF,&__pyx_n_s_to_lower,&__pyx_n_s_to_upper,&__pyx_n_s_language,&__pyx_n_s_read_file_delimiter,&__pyx_n_s_remove_punctuation_string,&__pyx_n_s_remove_numbers,&__pyx_n_s_trim_token,&__pyx_n_s_REMOVE_characters,&__pyx_n_s_split_string,&__pyx_n_s_separator,&__pyx_n_s_remove_punctuation_vector,&__pyx_n_s_remove_stopwords,&__pyx_n_s_min_num_char,&__pyx_n_s_max_num_char,&__pyx_n_s_stemmer,&__pyx_n_s_min_n_gram,&__pyx_n_s_max_n_gram,&__pyx_n_s_n_gram_delimiter,&__pyx_n_s_skip_n_gram,&__pyx_n_s_skip_distance,&__pyx_n_s_stemmer_ngram,&__pyx_n_s_stemmer_gamma,&__pyx_n_s_stemmer_truncate,&__pyx_n_s_stemmer_batches,&__pyx_n_s_vocabulary_path,&__pyx_n_s_save_2single_file,&__pyx_n_s_concat_delimiter,&__pyx_n_s_threads,&__pyx_n_s_verbose,0};
    PyObject* values[34] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_int_2);
    values[3] = ((PyObject *)__pyx_int_1);
    values[4] = ((PyObject *)__pyx_kp_s__2);
    values[5] = ((PyObject *)Py_False);

    /* "textTinyPy/textTinyPy.pyx":638
 *     def big_text_tokenizer(self, input_path_folder = None, output_path_folder = None, batches = 2, increment_batch_no = 1, LOCALE_UTF = "", to_lower = False,
 * 
 *                            to_upper = False, language = 'english', read_file_delimiter = "\n", remove_punctuation_string = False, remove_numbers = False,             # <<<<<<<<<<<<<<
 * 
 *                            trim_token = False, REMOVE_characters = "", split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False,
 */
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)__pyx_n_s_english);
    values[8] = ((PyObject *)__pyx_kp_s_);
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_False);

    /* "textTinyPy/textTinyPy.pyx":640
 *                            to_upper = False, language = 'english', read_file_delimiter = "\n", remove_punctuation_string = False, remove_numbers = False,
 * 
 *                            trim_token = False, REMOVE_characters = "", split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False,             # <<<<<<<<<<<<<<
 * 
 *                            remove_stopwords = False, min_num_char = 1, max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ",
 */
    values[11] = ((PyObject *)Py_False);
    values[12] = ((PyObject *)__pyx_kp_s__2);
    values[13] = ((PyObject *)Py_False);
    values[14] = ((PyObject *)__pyx_kp_s__3);
    values[15] = ((PyObject *)Py_False);

    /* "textTinyPy/textTinyPy.pyx":642
 *                            trim_token = False, REMOVE_characters = "", split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False,
 * 
 *                            remove_stopwords = False, min_num_char = 1, max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ",             # <<<<<<<<<<<<<<
 * 
 *                            skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1,
 */
    values[16] = ((PyObject *)Py_False);
    values[17] = ((PyObject *)__pyx_int_1);
    values[18] = __pyx_k__15;
    values[19] = ((PyObject *)Py_None);
    values[20] = ((PyObject *)__pyx_int_1);
    values[21] = ((PyObject *)__pyx_int_1);
    values[22] = ((PyObject *)__pyx_kp_s__5);
    values[23] = ((PyObject *)__pyx_int_1);
    values[24] = ((PyObject *)__pyx_int_0);
    values[25] = ((PyObject *)__pyx_int_4);
    values[26] = ((PyObject *)__pyx_float_0_0);
    values[27] = ((PyObject *)__pyx_int_3);
    values[28] = ((PyObject *)__pyx_int_1);

    /* "textTinyPy/textTinyPy.pyx":646
 *                            skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1,
 * 
 *                            vocabulary_path = None, save_2single_file = False, concat_delimiter = None, threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */
    values[29] = ((PyObject *)Py_None);
    values[30] = ((PyObject *)Py_False);
    values[31] = ((PyObject *)Py_None);
    values[32] = ((PyObject *)__pyx_int_1);
    values[33] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_folder);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_path_folder);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_batches);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_increment_batch_no);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LOCALE_UTF);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_lower);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_upper);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read_file_delimiter);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_string);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_numbers);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trim_token);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_REMOVE_characters);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_split_string);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_separator);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_vector);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_stopwords);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_num_char);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_num_char);
          if (value) { values[18] = value; kw_args--; }
        }
        case 19:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer);
          if (value) { values[19] = value; kw_args--; }
        }
        case 20:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_n_gram);
          if (value) { values[20] = value; kw_args--; }
        }
        case 21:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_n_gram);
          if (value) { values[21] = value; kw_args--; }
        }
        case 22:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_gram_delimiter);
          if (value) { values[22] = value; kw_args--; }
        }
        case 23:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_n_gram);
          if (value) { values[23] = value; kw_args--; }
        }
        case 24:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_distance);
          if (value) { values[24] = value; kw_args--; }
        }
        case 25:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_ngram);
          if (value) { values[25] = value; kw_args--; }
        }
        case 26:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_gamma);
          if (value) { values[26] = value; kw_args--; }
        }
        case 27:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_truncate);
          if (value) { values[27] = value; kw_args--; }
        }
        case 28:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_batches);
          if (value) { values[28] = value; kw_args--; }
        }
        case 29:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vocabulary_path);
          if (value) { values[29] = value; kw_args--; }
        }
        case 30:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_save_2single_file);
          if (value) { values[30] = value; kw_args--; }
        }
        case 31:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_concat_delimiter);
          if (value) { values[31] = value; kw_args--; }
        }
        case 32:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[32] = value; kw_args--; }
        }
        case 33:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[33] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "big_text_tokenizer") < 0)) __PYX_ERR(0, 636, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 34: values[33] = PyTuple_GET_ITEM(__pyx_args, 33);
        case 33: values[32] = PyTuple_GET_ITEM(__pyx_args, 32);
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_folder = values[0];
    __pyx_v_output_path_folder = values[1];
    __pyx_v_batches = values[2];
    __pyx_v_increment_batch_no = values[3];
    __pyx_v_LOCALE_UTF = values[4];
    __pyx_v_to_lower = values[5];
    __pyx_v_to_upper = values[6];
    __pyx_v_language = values[7];
    __pyx_v_read_file_delimiter = values[8];
    __pyx_v_remove_punctuation_string = values[9];
    __pyx_v_remove_numbers = values[10];
    __pyx_v_trim_token = values[11];
    __pyx_v_REMOVE_characters = values[12];
    __pyx_v_split_string = values[13];
    __pyx_v_separator = values[14];
    __pyx_v_remove_punctuation_vector = values[15];
    __pyx_v_remove_stopwords = values[16];
    __pyx_v_min_num_char = values[17];
    __pyx_v_max_num_char = values[18];
    __pyx_v_stemmer = values[19];
    __pyx_v_min_n_gram = values[20];
    __pyx_v_max_n_gram = values[21];
    __pyx_v_n_gram_delimiter = values[22];
    __pyx_v_skip_n_gram = values[23];
    __pyx_v_skip_distance = values[24];
    __pyx_v_stemmer_ngram = values[25];
    __pyx_v_stemmer_gamma = values[26];
    __pyx_v_stemmer_truncate = values[27];
    __pyx_v_stemmer_batches = values[28];
    __pyx_v_vocabulary_path = values[29];
    __pyx_v_save_2single_file = values[30];
    __pyx_v_concat_delimiter = values[31];
    __pyx_v_threads = values[32];
    __pyx_v_verbose = values[33];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("big_text_tokenizer", 0, 0, 34, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 636, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.big_text_tokenizer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_8big_text_tokenizer(((struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *)__pyx_v_self), __pyx_v_input_path_folder, __pyx_v_output_path_folder, __pyx_v_batches, __pyx_v_increment_batch_no, __pyx_v_LOCALE_UTF, __pyx_v_to_lower, __pyx_v_to_upper, __pyx_v_language, __pyx_v_read_file_delimiter, __pyx_v_remove_punctuation_string, __pyx_v_remove_numbers, __pyx_v_trim_token, __pyx_v_REMOVE_characters, __pyx_v_split_string, __pyx_v_separator, __pyx_v_remove_punctuation_vector, __pyx_v_remove_stopwords, __pyx_v_min_num_char, __pyx_v_max_num_char, __pyx_v_stemmer, __pyx_v_min_n_gram, __pyx_v_max_n_gram, __pyx_v_n_gram_delimiter, __pyx_v_skip_n_gram, __pyx_v_skip_distance, __pyx_v_stemmer_ngram, __pyx_v_stemmer_gamma, __pyx_v_stemmer_truncate, __pyx_v_stemmer_batches, __pyx_v_vocabulary_path, __pyx_v_save_2single_file, __pyx_v_concat_delimiter, __pyx_v_threads, __pyx_v_verbose);

  /* "textTinyPy/textTinyPy.pyx":636
 * 
 * 
 *     def big_text_tokenizer(self, input_path_folder = None, output_path_folder = None, batches = 2, increment_batch_no = 1, LOCALE_UTF = "", to_lower = False,             # <<<<<<<<<<<<<<
 * 
 *                            to_upper = False, language = 'english', read_file_delimiter = "\n", remove_punctuation_string = False, remove_numbers = False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_8big_text_tokenizer(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_folder, PyObject *__pyx_v_output_path_folder, PyObject *__pyx_v_batches, PyObject *__pyx_v_increment_batch_no, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_read_file_delimiter, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_vocabulary_path, PyObject *__pyx_v_save_2single_file, PyObject *__pyx_v_concat_delimiter, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_resource_path = NULL;
  PyObject *__pyx_v_path_stopw = NULL;
  PyObject *__pyx_v_dat_stopw = NULL;
  PyObject *__pyx_v_array_stopw = NULL;
  PyObject *__pyx_v_list_stopw = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  std::string __pyx_t_13;
  std::string __pyx_t_14;
  int __pyx_t_15;
  std::vector<std::string>  __pyx_t_16;
  std::string __pyx_t_17;
  std::string __pyx_t_18;
  std::string __pyx_t_19;
  int __pyx_t_20;
  std::string __pyx_t_21;
  bool __pyx_t_22;
  bool __pyx_t_23;
  bool __pyx_t_24;
  bool __pyx_t_25;
  bool __pyx_t_26;
  bool __pyx_t_27;
  bool __pyx_t_28;
  std::string __pyx_t_29;
  bool __pyx_t_30;
  int __pyx_t_31;
  std::string __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  std::string __pyx_t_37;
  std::string __pyx_t_38;
  int __pyx_t_39;
  double __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  bool __pyx_t_44;
  std::string __pyx_t_45;
  bool __pyx_t_46;
  __Pyx_RefNannySetupContext("big_text_tokenizer", 0);
  __Pyx_INCREF(__pyx_v_remove_stopwords);
  __Pyx_INCREF(__pyx_v_max_num_char);
  __Pyx_INCREF(__pyx_v_stemmer);
  __Pyx_INCREF(__pyx_v_vocabulary_path);
  __Pyx_INCREF(__pyx_v_concat_delimiter);

  /* "textTinyPy/textTinyPy.pyx":657
 * 
 * 
 *         assert isinstance(input_path_folder, basestring), 'the input_path_folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         IF UNAME_SYSNAME == "Windows":
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_folder, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_folder_parameter);
      __PYX_ERR(0, 657, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":665
 *         ELSE:
 * 
 *             assert input_path_folder.split('/')[-1] == "", "the input_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(output_path_folder, basestring), 'the output_path_folder parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_input_path_folder, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 665, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_folder_parameter_2);
      __PYX_ERR(0, 665, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":667
 *             assert input_path_folder.split('/')[-1] == "", "the input_path_folder parameter should end in slash"
 * 
 *         assert isinstance(output_path_folder, basestring), 'the output_path_folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         IF UNAME_SYSNAME == "Windows":
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_output_path_folder, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_folder_parameter);
      __PYX_ERR(0, 667, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":675
 *         ELSE:
 * 
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_output_path_folder, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_folder_parameter_2);
      __PYX_ERR(0, 675, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":677
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"
 * 
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(increment_batch_no, int) and increment_batch_no >= 0, 'the increment_batch_no parameter should be of type integer and greater or equal to 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_batches, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_batches, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 677, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 677, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_batches_parameter_should_be_2);
      __PYX_ERR(0, 677, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":679
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'
 * 
 *         assert isinstance(increment_batch_no, int) and increment_batch_no >= 0, 'the increment_batch_no parameter should be of type integer and greater or equal to 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(read_file_delimiter, basestring), 'the read_file_delimiter parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_increment_batch_no, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_increment_batch_no, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_increment_batch_no_parameter);
      __PYX_ERR(0, 679, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":681
 *         assert isinstance(increment_batch_no, int) and increment_batch_no >= 0, 'the increment_batch_no parameter should be of type integer and greater or equal to 0'
 * 
 *         assert isinstance(read_file_delimiter, basestring), 'the read_file_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert len(read_file_delimiter) == 1, 'the read_file_delimiter should be a single character string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_read_file_delimiter, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_read_file_delimiter_paramete);
      __PYX_ERR(0, 681, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":683
 *         assert isinstance(read_file_delimiter, basestring), 'the read_file_delimiter parameter should be of type string'
 * 
 *         assert len(read_file_delimiter) == 1, 'the read_file_delimiter should be a single character string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_6 = PyObject_Length(__pyx_v_read_file_delimiter); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 683, __pyx_L1_error)
    if (unlikely(!((__pyx_t_6 == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_read_file_delimiter_should_b);
      __PYX_ERR(0, 683, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":685
 *         assert len(read_file_delimiter) == 1, 'the read_file_delimiter should be a single character string'
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_LOCALE_UTF, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_LOCALE_UTF_parameter_should);
      __PYX_ERR(0, 685, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":687
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_to_lower, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 687, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_lower_parameter_should_be);
      __PYX_ERR(0, 687, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":689
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_to_upper, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_upper_parameter_should_be);
      __PYX_ERR(0, 689, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":691
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_REMOVE_characters, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_REMOVE_characters_parameter);
      __PYX_ERR(0, 691, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":693
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_punctuation_string, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_string_pa);
      __PYX_ERR(0, 693, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":695
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_numbers, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 695, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_numbers_parameter_sho);
      __PYX_ERR(0, 695, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":697
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_trim_token, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trim_token_parameter_should);
      __PYX_ERR(0, 697, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":699
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_split_string, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_split_string_parameter_shoul);
      __PYX_ERR(0, 699, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":701
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_separator, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_separator_parameter_should_b);
      __PYX_ERR(0, 701, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":703
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_punctuation_vector, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 703, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_vector_pa);
      __PYX_ERR(0, 703, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":705
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_language, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_language_parameter_should_be);
      __PYX_ERR(0, 705, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":707
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",             # <<<<<<<<<<<<<<
 *                             "estonian", "finnish", "french","galician", "german", "greek", "hausa", "hebrew", "hindi", "hungarian", "indonesian", "irish", "italian",
 *                             "latvian", "marathi", "norwegian", "persian", "polish", "portuguese", "romanian", "russian", "slovak", "slovenian", "somalia", "spanish",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_language);
    __pyx_t_1 = __pyx_v_language;
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_afrikaans, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_arabic, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_armenian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_basque, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_bengali, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_breton, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_bulgarian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_catalan, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_croatian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_czech, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_danish, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_dutch, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_english, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_estonian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_finnish, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_french, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_galician, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_german, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_greek, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hausa, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hebrew, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hindi, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hungarian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_indonesian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_irish, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_italian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_latvian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_marathi, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_norwegian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_persian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_polish, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_portuguese, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_romanian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_russian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_slovak, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_slovenian, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_somalia, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_spanish, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_swahili, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_swedish, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_turkish, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_yoruba, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_zulu, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 707, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
    __pyx_L7_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_languages_in_case_of_s);
      __PYX_ERR(0, 707, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":719
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
  __pyx_t_1 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_stopwords, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "textTinyPy/textTinyPy.pyx":721
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 721, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "textTinyPy/textTinyPy.pyx":729
 *                 ELSE:
 * 
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))             # <<<<<<<<<<<<<<
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 */
      __pyx_t_1 = PyNumber_Add(__pyx_v_language, __pyx_kp_s_txt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_n_s_stopwords);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__6, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_resource_path = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":731
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)             # <<<<<<<<<<<<<<
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pkg_resources); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_resource_filename); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 731, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 731, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_textTinyPy);
        __Pyx_GIVEREF(__pyx_n_s_textTinyPy);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_n_s_textTinyPy);
        __Pyx_INCREF(__pyx_v_resource_path);
        __Pyx_GIVEREF(__pyx_v_resource_path);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_resource_path);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_path_stopw = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":733
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)             # <<<<<<<<<<<<<<
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_path_stopw);
      __Pyx_GIVEREF(__pyx_v_path_stopw);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path_stopw);
      __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_header, Py_None) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_dat_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":735
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw = [i[0] for i in array_stopw]
 */
      __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_dat_stopw, __pyx_n_s_as_matrix); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_columns, Py_None) < 0) __PYX_ERR(0, 735, __pyx_L1_error)
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_10};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_GIVEREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_10);
          __pyx_t_10 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_array_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":737
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 * 
 *                 list_stopw = [i[0] for i in array_stopw]             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw.append("")
 */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 737, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_array_stopw)) || PyTuple_CheckExact(__pyx_v_array_stopw)) {
        __pyx_t_1 = __pyx_v_array_stopw; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_array_stopw); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 737, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 737, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 737, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 737, __pyx_L1_error)
            #else
            __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 737, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
          }
        } else {
          __pyx_t_9 = __pyx_t_11(__pyx_t_1);
          if (unlikely(!__pyx_t_9)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 737, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_9);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 737, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_list_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":739
 *                 list_stopw = [i[0] for i in array_stopw]
 * 
 *                 list_stopw.append("")             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_list_stopw, __pyx_kp_s__2); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 739, __pyx_L1_error)

      /* "textTinyPy/textTinyPy.pyx":721
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
      goto __pyx_L51;
    }

    /* "textTinyPy/textTinyPy.pyx":743
 *             else:
 * 
 *                 list_stopw = []             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(remove_stopwords, list):
 */
    /*else*/ {
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_list_stopw = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __pyx_L51:;

    /* "textTinyPy/textTinyPy.pyx":719
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
    goto __pyx_L50;
  }

  /* "textTinyPy/textTinyPy.pyx":745
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
  __pyx_t_4 = PyList_Check(__pyx_v_remove_stopwords); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":747
 *         elif isinstance(remove_stopwords, list):
 * 
 *             list_stopw = remove_stopwords             # <<<<<<<<<<<<<<
 * 
 *             remove_stopwords = True
 */
    __Pyx_INCREF(__pyx_v_remove_stopwords);
    __pyx_v_list_stopw = __pyx_v_remove_stopwords;

    /* "textTinyPy/textTinyPy.pyx":749
 *             list_stopw = remove_stopwords
 * 
 *             remove_stopwords = True             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_remove_stopwords, Py_True);

    /* "textTinyPy/textTinyPy.pyx":745
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
    goto __pyx_L50;
  }

  /* "textTinyPy/textTinyPy.pyx":753
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 753, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 753, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_10, __pyx_t_9};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 753, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else
      #endif
      {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 753, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_10); __pyx_t_10 = NULL;
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_9);
        __pyx_t_9 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 753, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L50:;

  /* "textTinyPy/textTinyPy.pyx":755
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_min_num_char, __pyx_t_3); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L54_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_num_char, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_L54_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_num_char_parameter_shoul);
      __PYX_ERR(0, 755, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":757
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'             # <<<<<<<<<<<<<<
 * 
 *         if max_num_char == MAX_VAL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_max_num_char, __pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L56_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_v_min_num_char, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L56_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_num_char_parameter_shoul);
      __PYX_ERR(0, 757, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":759
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":761
 *         if max_num_char == MAX_VAL:
 * 
 *             max_num_char = 1000000000             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
    __Pyx_INCREF(__pyx_int_1000000000);
    __Pyx_DECREF_SET(__pyx_v_max_num_char, __pyx_int_1000000000);

    /* "textTinyPy/textTinyPy.pyx":759
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  }

  /* "textTinyPy/textTinyPy.pyx":763
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_stemmer != Py_None);
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "textTinyPy/textTinyPy.pyx":765
 *         if stemmer is not None:
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyObject_IsInstance(__pyx_v_stemmer, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 765, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_4 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_parameter_should_be);
        __PYX_ERR(0, 765, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":767
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __Pyx_INCREF(__pyx_v_stemmer);
      __pyx_t_1 = __pyx_v_stemmer;
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_porter2_stemmer, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
      if (!__pyx_t_2) {
      } else {
        __pyx_t_4 = __pyx_t_2;
        goto __pyx_L60_bool_binop_done;
      }
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
      if (!__pyx_t_2) {
      } else {
        __pyx_t_4 = __pyx_t_2;
        goto __pyx_L60_bool_binop_done;
      }
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 767, __pyx_L1_error)
      __pyx_t_4 = __pyx_t_2;
      __pyx_L60_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_4 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_stemmers_are_porter2_s);
        __PYX_ERR(0, 767, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":763
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":769
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  __pyx_t_4 = (__pyx_v_stemmer == Py_None);
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":771
 *         if stemmer is None:
 * 
 *             stemmer = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_stemmer, __pyx_n_s_NULL);

    /* "textTinyPy/textTinyPy.pyx":769
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":773
 *             stemmer = "NULL"
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_min_n_gram, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L64_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_min_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_L64_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_n_gram_parameter_should);
      __PYX_ERR(0, 773, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":775
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_max_n_gram, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L66_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L66_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should);
      __PYX_ERR(0, 775, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":777
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_v_min_n_gram, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 777, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should_2);
      __PYX_ERR(0, 777, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":779
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_n_gram_delimiter, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_gram_delimiter_parameter_s);
      __PYX_ERR(0, 779, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":781
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_skip_n_gram, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L68_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_skip_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_5;
    __pyx_L68_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_n_gram_parameter_should);
      __PYX_ERR(0, 781, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":783
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_skip_distance, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L70_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_skip_distance, __pyx_int_neg_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 783, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L70_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_distance_parameter_shou);
      __PYX_ERR(0, 783, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":785
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  __pyx_t_2 = (__pyx_v_stemmer != Py_None);
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {

    /* "textTinyPy/textTinyPy.pyx":787
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 787, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "textTinyPy/textTinyPy.pyx":789
 *             if stemmer == "ngram_sequential":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 789, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = (__pyx_t_2 != 0);
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L74_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 789, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_4 = __pyx_t_5;
        __pyx_L74_bool_binop_done:;
        if (unlikely(!__pyx_t_4)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 789, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":791
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_5 = PyFloat_Check(__pyx_v_stemmer_gamma); 
        __pyx_t_2 = (__pyx_t_5 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_4 = __pyx_t_2;
          goto __pyx_L76_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_gamma, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 791, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_4 = __pyx_t_2;
        __pyx_L76_bool_binop_done:;
        if (unlikely(!__pyx_t_4)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_gamma_parameter_shou);
          __PYX_ERR(0, 791, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":793
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyObject_IsInstance(__pyx_v_stemmer_truncate, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = (__pyx_t_2 != 0);
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L78_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_truncate, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L1_error)
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 793, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_4 = __pyx_t_5;
        __pyx_L78_bool_binop_done:;
        if (unlikely(!__pyx_t_4)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_truncate_parameter_s);
          __PYX_ERR(0, 793, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":795
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_overlap":
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyObject_IsInstance(__pyx_v_stemmer_batches, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 795, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = (__pyx_t_5 != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_4 = __pyx_t_2;
          goto __pyx_L80_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_batches, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 795, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_4 = __pyx_t_2;
        __pyx_L80_bool_binop_done:;
        if (unlikely(!__pyx_t_4)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_batches_parameter_sh);
          __PYX_ERR(0, 795, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":787
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":797
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 797, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "textTinyPy/textTinyPy.pyx":799
 *             if stemmer == "ngram_overlap":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         if vocabulary_path is not None:
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = (__pyx_t_2 != 0);
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L83_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 799, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_4 = __pyx_t_5;
        __pyx_L83_bool_binop_done:;
        if (unlikely(!__pyx_t_4)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 799, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":797
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":785
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  }

  /* "textTinyPy/textTinyPy.pyx":801
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *         if vocabulary_path is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 */
  __pyx_t_4 = (__pyx_v_vocabulary_path != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "textTinyPy/textTinyPy.pyx":803
 *         if vocabulary_path is not None:
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert os.path.exists(vocabulary_path), "the vocabulary_path parameter should be a valid path to a folder"
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_IsInstance(__pyx_v_vocabulary_path, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_5 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_vocabulary_path_parameter_sh);
        __PYX_ERR(0, 803, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":805
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 * 
 *             assert os.path.exists(vocabulary_path), "the vocabulary_path parameter should be a valid path to a folder"             # <<<<<<<<<<<<<<
 * 
 *             IF UNAME_SYSNAME == "Windows":
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_7) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_vocabulary_path); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_vocabulary_path};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_vocabulary_path};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_1);
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_INCREF(__pyx_v_vocabulary_path);
          __Pyx_GIVEREF(__pyx_v_vocabulary_path);
          PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_vocabulary_path);
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 805, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_vocabulary_path_parameter_sh_2);
        __PYX_ERR(0, 805, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":813
 *             ELSE:
 * 
 *                 assert vocabulary_path.split('/')[-1] == "", "the vocabulary_path parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if vocabulary_path is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_vocabulary_path, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_vocabulary_path_parameter_sh_3);
        __PYX_ERR(0, 813, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":801
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *         if vocabulary_path is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vocabulary_path, basestring), 'the vocabulary_path parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":815
 *                 assert vocabulary_path.split('/')[-1] == "", "the vocabulary_path parameter should end in slash"
 * 
 *         if vocabulary_path is None:             # <<<<<<<<<<<<<<
 * 
 *             vocabulary_path = ""
 */
  __pyx_t_5 = (__pyx_v_vocabulary_path == Py_None);
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "textTinyPy/textTinyPy.pyx":817
 *         if vocabulary_path is None:
 * 
 *             vocabulary_path = ""             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(save_2single_file, bool), 'the save_2single_file parameter should be of type boolean'
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_vocabulary_path, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":815
 *                 assert vocabulary_path.split('/')[-1] == "", "the vocabulary_path parameter should end in slash"
 * 
 *         if vocabulary_path is None:             # <<<<<<<<<<<<<<
 * 
 *             vocabulary_path = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":819
 *             vocabulary_path = ""
 * 
 *         assert isinstance(save_2single_file, bool), 'the save_2single_file parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         if concat_delimiter is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_save_2single_file, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 819, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_4 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_save_2single_file_parameter);
      __PYX_ERR(0, 819, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":821
 *         assert isinstance(save_2single_file, bool), 'the save_2single_file parameter should be of type boolean'
 * 
 *         if concat_delimiter is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'
 */
  __pyx_t_4 = (__pyx_v_concat_delimiter != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "textTinyPy/textTinyPy.pyx":823
 *         if concat_delimiter is not None:
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_IsInstance(__pyx_v_concat_delimiter, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 823, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_5 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_concat_delimiter_parameter_s);
        __PYX_ERR(0, 823, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":821
 *         assert isinstance(save_2single_file, bool), 'the save_2single_file parameter should be of type boolean'
 * 
 *         if concat_delimiter is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(concat_delimiter, basestring), 'the concat_delimiter parameter should be of type string'
 */
    goto __pyx_L87;
  }

  /* "textTinyPy/textTinyPy.pyx":827
 *         else:
 * 
 *             concat_delimiter = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_concat_delimiter, __pyx_n_s_NULL);
  }
  __pyx_L87:;

  /* "textTinyPy/textTinyPy.pyx":829
 *             concat_delimiter = "NULL"
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_t_4 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_5 = __pyx_t_2;
      goto __pyx_L88_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 829, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 829, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_t_2;
    __pyx_L88_bool_binop_done:;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_threads_parameter_should_be);
      __PYX_ERR(0, 829, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":831
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_5 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 831, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":834
 * 
 * 
 *         self.bgf.wrapper_batch_tokenizer_bytes(input_path_folder, output_path_folder, batches, increment_batch_no, list_stopw, language, LOCALE_UTF, read_file_delimiter,             # <<<<<<<<<<<<<<
 * 
 *                            max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 */
  __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_t_14 = __pyx_convert_string_from_py_std__in_string(__pyx_v_output_path_folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_batches); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_increment_batch_no); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  if (unlikely(!__pyx_v_list_stopw)) { __Pyx_RaiseUnboundLocalError("list_stopw"); __PYX_ERR(0, 834, __pyx_L1_error) }
  __pyx_t_16 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_list_stopw); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_language); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_t_18 = __pyx_convert_string_from_py_std__in_string(__pyx_v_LOCALE_UTF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_read_file_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":836
 *         self.bgf.wrapper_batch_tokenizer_bytes(input_path_folder, output_path_folder, batches, increment_batch_no, list_stopw, language, LOCALE_UTF, read_file_delimiter,
 * 
 *                            max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,             # <<<<<<<<<<<<<<
 * 
 *                            separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter,
 */
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_v_max_num_char); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_21 = __pyx_convert_string_from_py_std__in_string(__pyx_v_REMOVE_characters); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely((__pyx_t_22 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely((__pyx_t_24 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely((__pyx_t_25 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_27 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely((__pyx_t_27 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely((__pyx_t_28 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":838
 *                            max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 * 
 *                            separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter,             # <<<<<<<<<<<<<<
 * 
 *                            stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, save_2single_file, vocabulary_path, verbose)
 */
  __pyx_t_29 = __pyx_convert_string_from_py_std__in_string(__pyx_v_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_30 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely((__pyx_t_30 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_31 = __Pyx_PyInt_As_int(__pyx_v_min_num_char); if (unlikely((__pyx_t_31 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_32 = __pyx_convert_string_from_py_std__in_string(__pyx_v_stemmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_33 = __Pyx_PyInt_As_int(__pyx_v_min_n_gram); if (unlikely((__pyx_t_33 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_34 = __Pyx_PyInt_As_int(__pyx_v_max_n_gram); if (unlikely((__pyx_t_34 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_35 = __Pyx_PyInt_As_int(__pyx_v_skip_n_gram); if (unlikely((__pyx_t_35 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_36 = __Pyx_PyInt_As_int(__pyx_v_skip_distance); if (unlikely((__pyx_t_36 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_37 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_38 = __pyx_convert_string_from_py_std__in_string(__pyx_v_concat_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 838, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":840
 *                            separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, concat_delimiter,
 * 
 *                            stemmer_ngram, stemmer_gamma, stemmer_truncate, stemmer_batches, threads, save_2single_file, vocabulary_path, verbose)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_39 = __Pyx_PyInt_As_int(__pyx_v_stemmer_ngram); if (unlikely((__pyx_t_39 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_40 = __pyx_PyFloat_AsDouble(__pyx_v_stemmer_gamma); if (unlikely((__pyx_t_40 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_41 = __Pyx_PyInt_As_int(__pyx_v_stemmer_truncate); if (unlikely((__pyx_t_41 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_42 = __Pyx_PyInt_As_int(__pyx_v_stemmer_batches); if (unlikely((__pyx_t_42 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_43 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_43 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_44 = __Pyx_PyObject_IsTrue(__pyx_v_save_2single_file); if (unlikely((__pyx_t_44 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_45 = __pyx_convert_string_from_py_std__in_string(__pyx_v_vocabulary_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_t_46 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_46 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 840, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":834
 * 
 * 
 *         self.bgf.wrapper_batch_tokenizer_bytes(input_path_folder, output_path_folder, batches, increment_batch_no, list_stopw, language, LOCALE_UTF, read_file_delimiter,             # <<<<<<<<<<<<<<
 * 
 *                            max_num_char, REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 */
  __pyx_v_self->bgf->wrapper_batch_tokenizer_bytes(__pyx_t_13, __pyx_t_14, __pyx_t_8, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_29, __pyx_t_30, __pyx_t_31, __pyx_t_32, __pyx_t_33, __pyx_t_34, __pyx_t_35, __pyx_t_36, __pyx_t_37, __pyx_t_38, __pyx_t_39, __pyx_t_40, __pyx_t_41, __pyx_t_42, __pyx_t_43, __pyx_t_44, __pyx_t_45, __pyx_t_46);

  /* "textTinyPy/textTinyPy.pyx":636
 * 
 * 
 *     def big_text_tokenizer(self, input_path_folder = None, output_path_folder = None, batches = 2, increment_batch_no = 1, LOCALE_UTF = "", to_lower = False,             # <<<<<<<<<<<<<<
 * 
 *                            to_upper = False, language = 'english', read_file_delimiter = "\n", remove_punctuation_string = False, remove_numbers = False,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.big_text_tokenizer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resource_path);
  __Pyx_XDECREF(__pyx_v_path_stopw);
  __Pyx_XDECREF(__pyx_v_dat_stopw);
  __Pyx_XDECREF(__pyx_v_array_stopw);
  __Pyx_XDECREF(__pyx_v_list_stopw);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_remove_stopwords);
  __Pyx_XDECREF(__pyx_v_max_num_char);
  __Pyx_XDECREF(__pyx_v_stemmer);
  __Pyx_XDECREF(__pyx_v_vocabulary_path);
  __Pyx_XDECREF(__pyx_v_concat_delimiter);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":844
 * 
 * 
 *     def vocabulary_accumulator(self, input_path_folder = None, output_path_file = None, max_num_chars = 100, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_11vocabulary_accumulator(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_10vocabulary_accumulator[] = "\n        \n        the vocabulary_accumulator function takes the resulted vocabulary files of the big_text_tokenizer and returns the vocabulary sums sorted in decreasing order. \n        \n        The parameter max_num_chars limits the number of the corpus using the number of characters of each word.\n\n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_11vocabulary_accumulator(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_folder = 0;
  PyObject *__pyx_v_output_path_file = 0;
  PyObject *__pyx_v_max_num_chars = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vocabulary_accumulator (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_folder,&__pyx_n_s_output_path_file,&__pyx_n_s_max_num_chars,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_int_100);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_folder);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_path_file);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_num_chars);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "vocabulary_accumulator") < 0)) __PYX_ERR(0, 844, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_folder = values[0];
    __pyx_v_output_path_file = values[1];
    __pyx_v_max_num_chars = values[2];
    __pyx_v_verbose = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("vocabulary_accumulator", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 844, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.vocabulary_accumulator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_10vocabulary_accumulator(((struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *)__pyx_v_self), __pyx_v_input_path_folder, __pyx_v_output_path_file, __pyx_v_max_num_chars, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_14big_text_files_10vocabulary_accumulator(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files *__pyx_v_self, PyObject *__pyx_v_input_path_folder, PyObject *__pyx_v_output_path_file, PyObject *__pyx_v_max_num_chars, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_t_10;
  bool __pyx_t_11;
  __Pyx_RefNannySetupContext("vocabulary_accumulator", 0);

  /* "textTinyPy/textTinyPy.pyx":854
 *         '''
 * 
 *         assert isinstance(input_path_folder, basestring), 'the input_path_folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         IF UNAME_SYSNAME == "Windows":
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_folder, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_folder_parameter);
      __PYX_ERR(0, 854, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":862
 *         ELSE:
 * 
 *             assert input_path_folder.split('/')[-1] == "", "the input_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_folder), "the input_path_folder parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_input_path_folder, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 862, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_folder_parameter_2);
      __PYX_ERR(0, 862, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":864
 *             assert input_path_folder.split('/')[-1] == "", "the input_path_folder parameter should end in slash"
 * 
 *         assert os.path.exists(input_path_folder), "the input_path_folder parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_path_folder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_folder};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_folder};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_path_folder);
        __Pyx_GIVEREF(__pyx_v_input_path_folder);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_path_folder);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_folder_parameter_3);
      __PYX_ERR(0, 864, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":866
 *         assert os.path.exists(input_path_folder), "the input_path_folder parameter should be a valid path to a file"
 * 
 *         assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_num_chars, int) and max_num_chars > 0, 'the max_num_chars parameter should be of type integer and at least 1'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_output_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_file_parameter_s);
      __PYX_ERR(0, 866, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":868
 *         assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 * 
 *         assert isinstance(max_num_chars, int) and max_num_chars > 0, 'the max_num_chars parameter should be of type integer and at least 1'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_max_num_chars, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_num_chars, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 868, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 868, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_7;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_num_chars_parameter_shou);
      __PYX_ERR(0, 868, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":870
 *         assert isinstance(max_num_chars, int) and max_num_chars > 0, 'the max_num_chars parameter should be of type integer and at least 1'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         self.bgf.vocabulary_counts_folder(input_path_folder, output_path_file, max_num_chars, verbose)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 870, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 870, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":872
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         self.bgf.vocabulary_counts_folder(input_path_folder, output_path_file, max_num_chars, verbose)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_output_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_max_num_chars); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_11 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 872, __pyx_L1_error)
  __pyx_v_self->bgf->vocabulary_counts_folder(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);

  /* "textTinyPy/textTinyPy.pyx":844
 * 
 * 
 *     def vocabulary_accumulator(self, input_path_folder = None, output_path_file = None, max_num_chars = 100, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.big_text_files.vocabulary_accumulator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":893
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.bgf = new big_files()
 */

/* Python wrapper */
static int __pyx_pw_10textTinyPy_10textTinyPy_5utils_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10textTinyPy_10textTinyPy_5utils_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils___cinit__(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10textTinyPy_10textTinyPy_5utils___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "textTinyPy/textTinyPy.pyx":895
 *     def __cinit__(self):
 * 
 *         self.bgf = new big_files()             # <<<<<<<<<<<<<<
 * 
 *         self.tks = new TOKEN_stats()
 */
  __pyx_v_self->bgf = new big_files();

  /* "textTinyPy/textTinyPy.pyx":897
 *         self.bgf = new big_files()
 * 
 *         self.tks = new TOKEN_stats()             # <<<<<<<<<<<<<<
 * 
 *         self.btk = new BATCH_TOKEN()
 */
  __pyx_v_self->tks = new TOKEN_stats();

  /* "textTinyPy/textTinyPy.pyx":899
 *         self.tks = new TOKEN_stats()
 * 
 *         self.btk = new BATCH_TOKEN()             # <<<<<<<<<<<<<<
 * 
 *         self.utl = new utils_cpp()
 */
  __pyx_v_self->btk = new BATCH_TOKEN();

  /* "textTinyPy/textTinyPy.pyx":901
 *         self.btk = new BATCH_TOKEN()
 * 
 *         self.utl = new utils_cpp()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->utl = new utils_cpp();

  /* "textTinyPy/textTinyPy.pyx":893
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.bgf = new big_files()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":904
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.bgf
 */

/* Python wrapper */
static void __pyx_pw_10textTinyPy_10textTinyPy_5utils_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10textTinyPy_10textTinyPy_5utils_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10textTinyPy_10textTinyPy_5utils_2__dealloc__(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10textTinyPy_10textTinyPy_5utils_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "textTinyPy/textTinyPy.pyx":906
 *     def __dealloc__(self):
 * 
 *         del self.bgf             # <<<<<<<<<<<<<<
 * 
 *         del self.tks
 */
  delete __pyx_v_self->bgf;

  /* "textTinyPy/textTinyPy.pyx":908
 *         del self.bgf
 * 
 *         del self.tks             # <<<<<<<<<<<<<<
 * 
 *         del self.btk
 */
  delete __pyx_v_self->tks;

  /* "textTinyPy/textTinyPy.pyx":910
 *         del self.tks
 * 
 *         del self.btk             # <<<<<<<<<<<<<<
 * 
 *         del self.utl
 */
  delete __pyx_v_self->btk;

  /* "textTinyPy/textTinyPy.pyx":912
 *         del self.btk
 * 
 *         del self.utl             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->utl;

  /* "textTinyPy/textTinyPy.pyx":904
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.bgf
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "textTinyPy/textTinyPy.pyx":915
 * 
 * 
 *     def vocabulary_parser(self, input_path_file = None, vocabulary_path_file = None, start_query = None, end_query = None, min_lines = 1, trimmed_line = False, language = 'english', LOCALE_UTF = "",             # <<<<<<<<<<<<<<
 * 
 *                           max_num_char = MAX_VAL, REMOVE_characters = "", to_lower = False, to_upper = False, remove_punctuation_string = False, remove_punctuation_vector = False, remove_numbers = False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_5vocabulary_parser(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_4vocabulary_parser[] = "\n        \n        Returns the vocabulary counts for small or medium ( xml ) files ( for big files the vocabulary_accumulator method of the big_text_files class is appropriate )\n        \n        The text file should have a structure (such as an xml-structure), so that subsets can be extracted using the start_query and end_query parameters.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_5vocabulary_parser(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_file = 0;
  PyObject *__pyx_v_vocabulary_path_file = 0;
  PyObject *__pyx_v_start_query = 0;
  PyObject *__pyx_v_end_query = 0;
  PyObject *__pyx_v_min_lines = 0;
  PyObject *__pyx_v_trimmed_line = 0;
  PyObject *__pyx_v_language = 0;
  PyObject *__pyx_v_LOCALE_UTF = 0;
  PyObject *__pyx_v_max_num_char = 0;
  PyObject *__pyx_v_REMOVE_characters = 0;
  PyObject *__pyx_v_to_lower = 0;
  PyObject *__pyx_v_to_upper = 0;
  PyObject *__pyx_v_remove_punctuation_string = 0;
  PyObject *__pyx_v_remove_punctuation_vector = 0;
  PyObject *__pyx_v_remove_numbers = 0;
  PyObject *__pyx_v_trim_token = 0;
  PyObject *__pyx_v_split_string = 0;
  PyObject *__pyx_v_separator = 0;
  PyObject *__pyx_v_remove_stopwords = 0;
  PyObject *__pyx_v_min_num_char = 0;
  PyObject *__pyx_v_stemmer = 0;
  PyObject *__pyx_v_min_n_gram = 0;
  PyObject *__pyx_v_max_n_gram = 0;
  PyObject *__pyx_v_n_gram_delimiter = 0;
  PyObject *__pyx_v_skip_n_gram = 0;
  PyObject *__pyx_v_skip_distance = 0;
  PyObject *__pyx_v_stemmer_ngram = 0;
  PyObject *__pyx_v_stemmer_gamma = 0;
  PyObject *__pyx_v_stemmer_truncate = 0;
  PyObject *__pyx_v_stemmer_batches = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("vocabulary_parser (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_file,&__pyx_n_s_vocabulary_path_file,&__pyx_n_s_start_query,&__pyx_n_s_end_query,&__pyx_n_s_min_lines,&__pyx_n_s_trimmed_line,&__pyx_n_s_language,&__pyx_n_s_LOCALE_UTF,&__pyx_n_s_max_num_char,&__pyx_n_s_REMOVE_characters,&__pyx_n_s_to_lower,&__pyx_n_s_to_upper,&__pyx_n_s_remove_punctuation_string,&__pyx_n_s_remove_punctuation_vector,&__pyx_n_s_remove_numbers,&__pyx_n_s_trim_token,&__pyx_n_s_split_string,&__pyx_n_s_separator,&__pyx_n_s_remove_stopwords,&__pyx_n_s_min_num_char,&__pyx_n_s_stemmer,&__pyx_n_s_min_n_gram,&__pyx_n_s_max_n_gram,&__pyx_n_s_n_gram_delimiter,&__pyx_n_s_skip_n_gram,&__pyx_n_s_skip_distance,&__pyx_n_s_stemmer_ngram,&__pyx_n_s_stemmer_gamma,&__pyx_n_s_stemmer_truncate,&__pyx_n_s_stemmer_batches,&__pyx_n_s_threads,&__pyx_n_s_verbose,0};
    PyObject* values[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)__pyx_int_1);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)__pyx_n_s_english);
    values[7] = ((PyObject *)__pyx_kp_s__2);
    values[8] = __pyx_k__21;
    values[9] = ((PyObject *)__pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":917
 *     def vocabulary_parser(self, input_path_file = None, vocabulary_path_file = None, start_query = None, end_query = None, min_lines = 1, trimmed_line = False, language = 'english', LOCALE_UTF = "",
 * 
 *                           max_num_char = MAX_VAL, REMOVE_characters = "", to_lower = False, to_upper = False, remove_punctuation_string = False, remove_punctuation_vector = False, remove_numbers = False,             # <<<<<<<<<<<<<<
 * 
 *                           trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_stopwords = False, min_num_char = 1, stemmer = None, min_n_gram = 1, max_n_gram = 1,
 */
    values[10] = ((PyObject *)Py_False);
    values[11] = ((PyObject *)Py_False);
    values[12] = ((PyObject *)Py_False);
    values[13] = ((PyObject *)Py_False);
    values[14] = ((PyObject *)Py_False);

    /* "textTinyPy/textTinyPy.pyx":919
 *                           max_num_char = MAX_VAL, REMOVE_characters = "", to_lower = False, to_upper = False, remove_punctuation_string = False, remove_punctuation_vector = False, remove_numbers = False,
 * 
 *                           trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_stopwords = False, min_num_char = 1, stemmer = None, min_n_gram = 1, max_n_gram = 1,             # <<<<<<<<<<<<<<
 * 
 *                           n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, threads = 1, verbose = False):
 */
    values[15] = ((PyObject *)Py_False);
    values[16] = ((PyObject *)Py_False);
    values[17] = ((PyObject *)__pyx_kp_s__3);
    values[18] = ((PyObject *)Py_False);
    values[19] = ((PyObject *)__pyx_int_1);
    values[20] = ((PyObject *)Py_None);
    values[21] = ((PyObject *)__pyx_int_1);
    values[22] = ((PyObject *)__pyx_int_1);
    values[23] = ((PyObject *)__pyx_kp_s__5);
    values[24] = ((PyObject *)__pyx_int_1);
    values[25] = ((PyObject *)__pyx_int_0);
    values[26] = ((PyObject *)__pyx_int_4);
    values[27] = ((PyObject *)__pyx_float_0_0);
    values[28] = ((PyObject *)__pyx_int_3);
    values[29] = ((PyObject *)__pyx_int_1);
    values[30] = ((PyObject *)__pyx_int_1);

    /* "textTinyPy/textTinyPy.pyx":921
 *                           trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_stopwords = False, min_num_char = 1, stemmer = None, min_n_gram = 1, max_n_gram = 1,
 * 
 *                           n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 *         '''
 * 
 */
    values[31] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vocabulary_path_file);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_query);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_query);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_lines);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trimmed_line);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LOCALE_UTF);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_num_char);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_REMOVE_characters);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_lower);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_upper);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_string);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_vector);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_numbers);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trim_token);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_split_string);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_separator);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_stopwords);
          if (value) { values[18] = value; kw_args--; }
        }
        case 19:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_num_char);
          if (value) { values[19] = value; kw_args--; }
        }
        case 20:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer);
          if (value) { values[20] = value; kw_args--; }
        }
        case 21:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_n_gram);
          if (value) { values[21] = value; kw_args--; }
        }
        case 22:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_n_gram);
          if (value) { values[22] = value; kw_args--; }
        }
        case 23:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_gram_delimiter);
          if (value) { values[23] = value; kw_args--; }
        }
        case 24:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_n_gram);
          if (value) { values[24] = value; kw_args--; }
        }
        case 25:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_distance);
          if (value) { values[25] = value; kw_args--; }
        }
        case 26:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_ngram);
          if (value) { values[26] = value; kw_args--; }
        }
        case 27:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_gamma);
          if (value) { values[27] = value; kw_args--; }
        }
        case 28:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_truncate);
          if (value) { values[28] = value; kw_args--; }
        }
        case 29:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_batches);
          if (value) { values[29] = value; kw_args--; }
        }
        case 30:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[30] = value; kw_args--; }
        }
        case 31:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[31] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "vocabulary_parser") < 0)) __PYX_ERR(0, 915, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_file = values[0];
    __pyx_v_vocabulary_path_file = values[1];
    __pyx_v_start_query = values[2];
    __pyx_v_end_query = values[3];
    __pyx_v_min_lines = values[4];
    __pyx_v_trimmed_line = values[5];
    __pyx_v_language = values[6];
    __pyx_v_LOCALE_UTF = values[7];
    __pyx_v_max_num_char = values[8];
    __pyx_v_REMOVE_characters = values[9];
    __pyx_v_to_lower = values[10];
    __pyx_v_to_upper = values[11];
    __pyx_v_remove_punctuation_string = values[12];
    __pyx_v_remove_punctuation_vector = values[13];
    __pyx_v_remove_numbers = values[14];
    __pyx_v_trim_token = values[15];
    __pyx_v_split_string = values[16];
    __pyx_v_separator = values[17];
    __pyx_v_remove_stopwords = values[18];
    __pyx_v_min_num_char = values[19];
    __pyx_v_stemmer = values[20];
    __pyx_v_min_n_gram = values[21];
    __pyx_v_max_n_gram = values[22];
    __pyx_v_n_gram_delimiter = values[23];
    __pyx_v_skip_n_gram = values[24];
    __pyx_v_skip_distance = values[25];
    __pyx_v_stemmer_ngram = values[26];
    __pyx_v_stemmer_gamma = values[27];
    __pyx_v_stemmer_truncate = values[28];
    __pyx_v_stemmer_batches = values[29];
    __pyx_v_threads = values[30];
    __pyx_v_verbose = values[31];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("vocabulary_parser", 0, 0, 32, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 915, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.vocabulary_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_4vocabulary_parser(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_input_path_file, __pyx_v_vocabulary_path_file, __pyx_v_start_query, __pyx_v_end_query, __pyx_v_min_lines, __pyx_v_trimmed_line, __pyx_v_language, __pyx_v_LOCALE_UTF, __pyx_v_max_num_char, __pyx_v_REMOVE_characters, __pyx_v_to_lower, __pyx_v_to_upper, __pyx_v_remove_punctuation_string, __pyx_v_remove_punctuation_vector, __pyx_v_remove_numbers, __pyx_v_trim_token, __pyx_v_split_string, __pyx_v_separator, __pyx_v_remove_stopwords, __pyx_v_min_num_char, __pyx_v_stemmer, __pyx_v_min_n_gram, __pyx_v_max_n_gram, __pyx_v_n_gram_delimiter, __pyx_v_skip_n_gram, __pyx_v_skip_distance, __pyx_v_stemmer_ngram, __pyx_v_stemmer_gamma, __pyx_v_stemmer_truncate, __pyx_v_stemmer_batches, __pyx_v_threads, __pyx_v_verbose);

  /* "textTinyPy/textTinyPy.pyx":915
 * 
 * 
 *     def vocabulary_parser(self, input_path_file = None, vocabulary_path_file = None, start_query = None, end_query = None, min_lines = 1, trimmed_line = False, language = 'english', LOCALE_UTF = "",             # <<<<<<<<<<<<<<
 * 
 *                           max_num_char = MAX_VAL, REMOVE_characters = "", to_lower = False, to_upper = False, remove_punctuation_string = False, remove_punctuation_vector = False, remove_numbers = False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_4vocabulary_parser(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_vocabulary_path_file, PyObject *__pyx_v_start_query, PyObject *__pyx_v_end_query, PyObject *__pyx_v_min_lines, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_language, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose) {
  int __pyx_v_query_transform;
  int __pyx_v_tmp_fl_stopw;
  PyObject *__pyx_v_resource_path = NULL;
  PyObject *__pyx_v_path_stopw = NULL;
  PyObject *__pyx_v_dat_stopw = NULL;
  PyObject *__pyx_v_array_stopw = NULL;
  PyObject *__pyx_v_list_stopw = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  std::string __pyx_t_13;
  std::string __pyx_t_14;
  std::string __pyx_t_15;
  std::vector<std::string>  __pyx_t_16;
  std::string __pyx_t_17;
  bool __pyx_t_18;
  std::string __pyx_t_19;
  std::string __pyx_t_20;
  PY_LONG_LONG __pyx_t_21;
  std::string __pyx_t_22;
  bool __pyx_t_23;
  bool __pyx_t_24;
  bool __pyx_t_25;
  bool __pyx_t_26;
  bool __pyx_t_27;
  bool __pyx_t_28;
  bool __pyx_t_29;
  std::string __pyx_t_30;
  bool __pyx_t_31;
  int __pyx_t_32;
  std::string __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  int __pyx_t_36;
  int __pyx_t_37;
  std::string __pyx_t_38;
  int __pyx_t_39;
  double __pyx_t_40;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  bool __pyx_t_44;
  __Pyx_RefNannySetupContext("vocabulary_parser", 0);
  __Pyx_INCREF(__pyx_v_max_num_char);
  __Pyx_INCREF(__pyx_v_remove_stopwords);
  __Pyx_INCREF(__pyx_v_stemmer);

  /* "textTinyPy/textTinyPy.pyx":930
 *         '''
 * 
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh);
      __PYX_ERR(0, 930, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":932
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(vocabulary_path_file, basestring), 'the vocabulary_path_file parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_path_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_path_file);
        __Pyx_GIVEREF(__pyx_v_input_path_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_path_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh_2);
      __PYX_ERR(0, 932, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":934
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(vocabulary_path_file, basestring), 'the vocabulary_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_vocabulary_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 934, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_vocabulary_path_file_paramet);
      __PYX_ERR(0, 934, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":936
 *         assert isinstance(vocabulary_path_file, basestring), 'the vocabulary_path_file parameter should be of type string'
 * 
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_start_query, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 936, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_start_query_parameter_should);
      __PYX_ERR(0, 936, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":938
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'
 * 
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_end_query, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_end_query_parameter_should_b);
      __PYX_ERR(0, 938, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":940
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 * 
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_min_lines, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_min_lines, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 940, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 940, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_7;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_lines_parameter_should_b);
      __PYX_ERR(0, 940, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":942
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_trimmed_line, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trimmed_line_parameter_shoul);
      __PYX_ERR(0, 942, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":944
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_LOCALE_UTF, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_LOCALE_UTF_parameter_should);
      __PYX_ERR(0, 944, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":946
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_to_lower, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 946, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_lower_parameter_should_be);
      __PYX_ERR(0, 946, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":948
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_to_upper, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_upper_parameter_should_be);
      __PYX_ERR(0, 948, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":950
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_REMOVE_characters, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_REMOVE_characters_parameter);
      __PYX_ERR(0, 950, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":952
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_punctuation_string, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_string_pa);
      __PYX_ERR(0, 952, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":954
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_numbers, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_numbers_parameter_sho);
      __PYX_ERR(0, 954, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":956
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_trim_token, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trim_token_parameter_should);
      __PYX_ERR(0, 956, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":958
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_split_string, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_split_string_parameter_shoul);
      __PYX_ERR(0, 958, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":960
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_separator, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_separator_parameter_should_b);
      __PYX_ERR(0, 960, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":962
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_punctuation_vector, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_vector_pa);
      __PYX_ERR(0, 962, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":964
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_min_num_char, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_min_num_char, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_num_char_parameter_shoul);
      __PYX_ERR(0, 964, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":966
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'             # <<<<<<<<<<<<<<
 * 
 *         if max_num_char == MAX_VAL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_max_num_char, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_v_min_num_char, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_num_char_parameter_shoul);
      __PYX_ERR(0, 966, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":968
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":970
 *         if max_num_char == MAX_VAL:
 * 
 *             max_num_char = 1000000000             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
    __Pyx_INCREF(__pyx_int_1000000000);
    __Pyx_DECREF_SET(__pyx_v_max_num_char, __pyx_int_1000000000);

    /* "textTinyPy/textTinyPy.pyx":968
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  }

  /* "textTinyPy/textTinyPy.pyx":972
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_stemmer != Py_None);
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":974
 *         if stemmer is not None:
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PyObject_IsInstance(__pyx_v_stemmer, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 974, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_7 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_parameter_should_be);
        __PYX_ERR(0, 974, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":976
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __Pyx_INCREF(__pyx_v_stemmer);
      __pyx_t_3 = __pyx_v_stemmer;
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_porter2_stemmer, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 976, __pyx_L1_error)
      if (!__pyx_t_2) {
      } else {
        __pyx_t_7 = __pyx_t_2;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 976, __pyx_L1_error)
      if (!__pyx_t_2) {
      } else {
        __pyx_t_7 = __pyx_t_2;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 976, __pyx_L1_error)
      __pyx_t_7 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_7 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_stemmers_are_porter2_s);
        __PYX_ERR(0, 976, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":972
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":978
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_min_n_gram, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_t_6;
    __pyx_L14_bool_binop_done:;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_n_gram_parameter_should);
      __PYX_ERR(0, 978, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":980
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_max_n_gram, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_7 = __pyx_t_2;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_t_2;
    __pyx_L16_bool_binop_done:;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should);
      __PYX_ERR(0, 980, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":982
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_v_min_n_gram, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 982, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should_2);
      __PYX_ERR(0, 982, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":984
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_n_gram_delimiter, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_7 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_gram_delimiter_parameter_s);
      __PYX_ERR(0, 984, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":986
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_skip_n_gram, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = (__pyx_t_2 != 0);
    if (__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L18_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_skip_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_t_6;
    __pyx_L18_bool_binop_done:;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_n_gram_parameter_should);
      __PYX_ERR(0, 986, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":988
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_skip_distance, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__pyx_t_6 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_7 = __pyx_t_2;
      goto __pyx_L20_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_skip_distance, __pyx_int_neg_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 988, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_t_2;
    __pyx_L20_bool_binop_done:;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_distance_parameter_shou);
      __PYX_ERR(0, 988, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":990
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  __pyx_t_7 = (__pyx_v_stemmer != Py_None);
  __pyx_t_2 = (__pyx_t_7 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":992
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 992, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "textTinyPy/textTinyPy.pyx":994
 *             if stemmer == "ngram_sequential":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_6 = (__pyx_t_7 != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_2 = __pyx_t_6;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 994, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_6;
        __pyx_L24_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 994, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":996
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_6 = PyFloat_Check(__pyx_v_stemmer_gamma); 
        __pyx_t_7 = (__pyx_t_6 != 0);
        if (__pyx_t_7) {
        } else {
          __pyx_t_2 = __pyx_t_7;
          goto __pyx_L26_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_gamma, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 996, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_7;
        __pyx_L26_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_gamma_parameter_shou);
          __PYX_ERR(0, 996, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":998
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = PyObject_IsInstance(__pyx_v_stemmer_truncate, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_6 = (__pyx_t_7 != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_2 = __pyx_t_6;
          goto __pyx_L28_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_truncate, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 998, __pyx_L1_error)
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 998, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_6;
        __pyx_L28_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_truncate_parameter_s);
          __PYX_ERR(0, 998, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":1000
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_overlap":
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6 = PyObject_IsInstance(__pyx_v_stemmer_batches, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = (__pyx_t_6 != 0);
        if (__pyx_t_7) {
        } else {
          __pyx_t_2 = __pyx_t_7;
          goto __pyx_L30_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_batches, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_7;
        __pyx_L30_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_batches_parameter_sh);
          __PYX_ERR(0, 1000, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":992
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":1002
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1002, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "textTinyPy/textTinyPy.pyx":1004
 *             if stemmer == "ngram_overlap":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1004, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_6 = (__pyx_t_7 != 0);
        if (__pyx_t_6) {
        } else {
          __pyx_t_2 = __pyx_t_6;
          goto __pyx_L33_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1004, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_6;
        __pyx_L33_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 1004, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":1002
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":990
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1006
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __pyx_t_7;
    __pyx_L35_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_threads_parameter_should_be);
      __PYX_ERR(0, 1006, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1008
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 1008, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1010
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_language, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_language_parameter_should_be);
      __PYX_ERR(0, 1010, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1012
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",             # <<<<<<<<<<<<<<
 *                             "estonian", "finnish", "french","galician", "german", "greek", "hausa", "hebrew", "hindi", "hungarian", "indonesian", "irish", "italian",
 *                             "latvian", "marathi", "norwegian", "persian", "polish", "portuguese", "romanian", "russian", "slovak", "slovenian", "somalia", "spanish",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_language);
    __pyx_t_3 = __pyx_v_language;
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_afrikaans, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_arabic, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_armenian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_basque, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_bengali, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_breton, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_bulgarian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_catalan, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_croatian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_czech, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_danish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_dutch, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_english, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_estonian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_finnish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_french, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_galician, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_german, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_greek, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hausa, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hebrew, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hindi, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hungarian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_indonesian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_irish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_italian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_latvian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_marathi, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_norwegian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_persian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_polish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_portuguese, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_romanian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_russian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_slovak, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_slovenian, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_somalia, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_spanish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_swahili, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_swedish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_turkish, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_yoruba, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    if (!__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L37_bool_binop_done;
    }
    __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_zulu, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_7;
    __pyx_L37_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_languages_in_case_of_s);
      __PYX_ERR(0, 1012, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1023
 *                                                                                 \
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 *         query_transform = False             # <<<<<<<<<<<<<<
 * 
 *         tmp_fl_stopw = False
 */
  __pyx_v_query_transform = 0;

  /* "textTinyPy/textTinyPy.pyx":1025
 *         query_transform = False
 * 
 *         tmp_fl_stopw = False             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(remove_stopwords, bool):
 */
  __pyx_v_tmp_fl_stopw = 0;

  /* "textTinyPy/textTinyPy.pyx":1027
 *         tmp_fl_stopw = False
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             tmp_fl_stopw = True
 */
  __pyx_t_3 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_remove_stopwords, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":1029
 *         if isinstance(remove_stopwords, bool):
 * 
 *             tmp_fl_stopw = True             # <<<<<<<<<<<<<<
 * 
 *         if max_num_char < 1000000000 or REMOVE_characters != "" or to_lower or to_upper or remove_punctuation_string or remove_punctuation_vector or remove_numbers or trim_token or split_string or isinstance(remove_stopwords, list) or tmp_fl_stopw or min_num_char > 1 or stemmer != None or min_n_gram > 1 or max_n_gram > 1 or skip_n_gram > 1:
 */
    __pyx_v_tmp_fl_stopw = 1;

    /* "textTinyPy/textTinyPy.pyx":1027
 *         tmp_fl_stopw = False
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             tmp_fl_stopw = True
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1031
 *             tmp_fl_stopw = True
 * 
 *         if max_num_char < 1000000000 or REMOVE_characters != "" or to_lower or to_upper or remove_punctuation_string or remove_punctuation_vector or remove_numbers or trim_token or split_string or isinstance(remove_stopwords, list) or tmp_fl_stopw or min_num_char > 1 or stemmer != None or min_n_gram > 1 or max_n_gram > 1 or skip_n_gram > 1:             # <<<<<<<<<<<<<<
 * 
 *               query_transform = True
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_int_1000000000, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_REMOVE_characters, __pyx_kp_s__2, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  if (!__pyx_t_2) {
  } else {
    __pyx_t_7 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_2 = PyList_Check(__pyx_v_remove_stopwords); 
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_7 = __pyx_t_6;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_tmp_fl_stopw != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_7 = __pyx_t_6;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_num_char, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_6) {
  } else {
    __pyx_t_7 = __pyx_t_6;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_6) {
  } else {
    __pyx_t_7 = __pyx_t_6;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_n_gram, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_6) {
  } else {
    __pyx_t_7 = __pyx_t_6;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_6) {
  } else {
    __pyx_t_7 = __pyx_t_6;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_skip_n_gram, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_t_6;
  __pyx_L82_bool_binop_done:;
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":1033
 *         if max_num_char < 1000000000 or REMOVE_characters != "" or to_lower or to_upper or remove_punctuation_string or remove_punctuation_vector or remove_numbers or trim_token or split_string or isinstance(remove_stopwords, list) or tmp_fl_stopw or min_num_char > 1 or stemmer != None or min_n_gram > 1 or max_n_gram > 1 or skip_n_gram > 1:
 * 
 *               query_transform = True             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is None:
 */
    __pyx_v_query_transform = 1;

    /* "textTinyPy/textTinyPy.pyx":1031
 *             tmp_fl_stopw = True
 * 
 *         if max_num_char < 1000000000 or REMOVE_characters != "" or to_lower or to_upper or remove_punctuation_string or remove_punctuation_vector or remove_numbers or trim_token or split_string or isinstance(remove_stopwords, list) or tmp_fl_stopw or min_num_char > 1 or stemmer != None or min_n_gram > 1 or max_n_gram > 1 or skip_n_gram > 1:             # <<<<<<<<<<<<<<
 * 
 *               query_transform = True
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1035
 *               query_transform = True
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  __pyx_t_7 = (__pyx_v_stemmer == Py_None);
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":1037
 *         if stemmer is None:
 * 
 *             stemmer = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(remove_stopwords, bool):
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_stemmer, __pyx_n_s_NULL);

    /* "textTinyPy/textTinyPy.pyx":1035
 *               query_transform = True
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1039
 *             stemmer = "NULL"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
  __pyx_t_3 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_remove_stopwords, __pyx_t_3); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":1041
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1041, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "textTinyPy/textTinyPy.pyx":1049
 *                 ELSE:
 * 
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))             # <<<<<<<<<<<<<<
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 */
      __pyx_t_3 = PyNumber_Add(__pyx_v_language, __pyx_kp_s_txt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_n_s_stopwords);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__6, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_resource_path = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":1051
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)             # <<<<<<<<<<<<<<
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pkg_resources); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_resource_filename); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_textTinyPy);
        __Pyx_GIVEREF(__pyx_n_s_textTinyPy);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_n_s_textTinyPy);
        __Pyx_INCREF(__pyx_v_resource_path);
        __Pyx_GIVEREF(__pyx_v_resource_path);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_resource_path);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_path_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":1053
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)             # <<<<<<<<<<<<<<
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_path_stopw);
      __Pyx_GIVEREF(__pyx_v_path_stopw);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_path_stopw);
      __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_header, Py_None) < 0) __PYX_ERR(0, 1053, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_dat_stopw = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":1055
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw = [i[0] for i in array_stopw]
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_dat_stopw, __pyx_n_s_as_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_columns, Py_None) < 0) __PYX_ERR(0, 1055, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_9};
          __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_9};
          __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_9);
          __pyx_t_9 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_array_stopw = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":1057
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 * 
 *                 list_stopw = [i[0] for i in array_stopw]             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw.append("")
 */
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (likely(PyList_CheckExact(__pyx_v_array_stopw)) || PyTuple_CheckExact(__pyx_v_array_stopw)) {
        __pyx_t_3 = __pyx_v_array_stopw; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_array_stopw); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1057, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1057, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1057, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1057, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1057, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1057, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_11(__pyx_t_3);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1057, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1057, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1057, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_list_stopw = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "textTinyPy/textTinyPy.pyx":1059
 *                 list_stopw = [i[0] for i in array_stopw]
 * 
 *                 list_stopw.append("")             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_list_stopw, __pyx_kp_s__2); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 1059, __pyx_L1_error)

      /* "textTinyPy/textTinyPy.pyx":1041
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
      goto __pyx_L100;
    }

    /* "textTinyPy/textTinyPy.pyx":1063
 *             else:
 * 
 *                 list_stopw = []             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(remove_stopwords, list):
 */
    /*else*/ {
      __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_list_stopw = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __pyx_L100:;

    /* "textTinyPy/textTinyPy.pyx":1039
 *             stemmer = "NULL"
 * 
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
    goto __pyx_L99;
  }

  /* "textTinyPy/textTinyPy.pyx":1065
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
  __pyx_t_7 = PyList_Check(__pyx_v_remove_stopwords); 
  __pyx_t_6 = (__pyx_t_7 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":1067
 *         elif isinstance(remove_stopwords, list):
 * 
 *             list_stopw = remove_stopwords             # <<<<<<<<<<<<<<
 * 
 *             remove_stopwords = True
 */
    __Pyx_INCREF(__pyx_v_remove_stopwords);
    __pyx_v_list_stopw = __pyx_v_remove_stopwords;

    /* "textTinyPy/textTinyPy.pyx":1069
 *             list_stopw = remove_stopwords
 * 
 *             remove_stopwords = True             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_remove_stopwords, Py_True);

    /* "textTinyPy/textTinyPy.pyx":1065
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
    goto __pyx_L99;
  }

  /* "textTinyPy/textTinyPy.pyx":1073
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1073, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L99:;

  /* "textTinyPy/textTinyPy.pyx":1076
 * 
 * 
 *         self.bgf.vocabulary_count_parser(input_path_file, start_query, end_query, list_stopw, vocabulary_path_file, min_lines, trimmed_line, query_transform, language, LOCALE_UTF, max_num_char,             # <<<<<<<<<<<<<<
 * 
 *                                           REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 */
  __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_14 = __pyx_convert_string_from_py_std__in_string(__pyx_v_start_query); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_15 = __pyx_convert_string_from_py_std__in_string(__pyx_v_end_query); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  if (unlikely(!__pyx_v_list_stopw)) { __Pyx_RaiseUnboundLocalError("list_stopw"); __PYX_ERR(0, 1076, __pyx_L1_error) }
  __pyx_t_16 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_list_stopw); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_vocabulary_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_min_lines); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_v_trimmed_line); if (unlikely((__pyx_t_18 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_language); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_20 = __pyx_convert_string_from_py_std__in_string(__pyx_v_LOCALE_UTF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)
  __pyx_t_21 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_max_num_char); if (unlikely((__pyx_t_21 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1076, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":1078
 *         self.bgf.vocabulary_count_parser(input_path_file, start_query, end_query, list_stopw, vocabulary_path_file, min_lines, trimmed_line, query_transform, language, LOCALE_UTF, max_num_char,
 * 
 *                                           REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,             # <<<<<<<<<<<<<<
 * 
 *                                           separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram,
 */
  __pyx_t_22 = __pyx_convert_string_from_py_std__in_string(__pyx_v_REMOVE_characters); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely((__pyx_t_24 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely((__pyx_t_25 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_27 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely((__pyx_t_27 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_28 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely((__pyx_t_28 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely((__pyx_t_29 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":1080
 *                                           REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 * 
 *                                           separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram,             # <<<<<<<<<<<<<<
 * 
 *                                           stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose)
 */
  __pyx_t_30 = __pyx_convert_string_from_py_std__in_string(__pyx_v_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_31 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely((__pyx_t_31 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_v_min_num_char); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_33 = __pyx_convert_string_from_py_std__in_string(__pyx_v_stemmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_34 = __Pyx_PyInt_As_int(__pyx_v_min_n_gram); if (unlikely((__pyx_t_34 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_35 = __Pyx_PyInt_As_int(__pyx_v_max_n_gram); if (unlikely((__pyx_t_35 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_36 = __Pyx_PyInt_As_int(__pyx_v_skip_n_gram); if (unlikely((__pyx_t_36 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_37 = __Pyx_PyInt_As_int(__pyx_v_skip_distance); if (unlikely((__pyx_t_37 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_38 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_t_39 = __Pyx_PyInt_As_int(__pyx_v_stemmer_ngram); if (unlikely((__pyx_t_39 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1080, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":1082
 *                                           separator, remove_stopwords, min_num_char, stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram,
 * 
 *                                           stemmer_gamma, stemmer_truncate, stemmer_batches, threads, verbose)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_40 = __pyx_PyFloat_AsDouble(__pyx_v_stemmer_gamma); if (unlikely((__pyx_t_40 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_t_41 = __Pyx_PyInt_As_int(__pyx_v_stemmer_truncate); if (unlikely((__pyx_t_41 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_t_42 = __Pyx_PyInt_As_int(__pyx_v_stemmer_batches); if (unlikely((__pyx_t_42 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_t_43 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_43 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_t_44 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_44 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":1076
 * 
 * 
 *         self.bgf.vocabulary_count_parser(input_path_file, start_query, end_query, list_stopw, vocabulary_path_file, min_lines, trimmed_line, query_transform, language, LOCALE_UTF, max_num_char,             # <<<<<<<<<<<<<<
 * 
 *                                           REMOVE_characters, to_lower, to_upper, remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string,
 */
  __pyx_v_self->bgf->vocabulary_count_parser(__pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_8, __pyx_t_18, __pyx_v_query_transform, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_29, __pyx_t_30, __pyx_t_31, __pyx_t_32, __pyx_t_33, __pyx_t_34, __pyx_t_35, __pyx_t_36, __pyx_t_37, __pyx_t_38, __pyx_t_39, __pyx_t_40, __pyx_t_41, __pyx_t_42, __pyx_t_43, __pyx_t_44);

  /* "textTinyPy/textTinyPy.pyx":915
 * 
 * 
 *     def vocabulary_parser(self, input_path_file = None, vocabulary_path_file = None, start_query = None, end_query = None, min_lines = 1, trimmed_line = False, language = 'english', LOCALE_UTF = "",             # <<<<<<<<<<<<<<
 * 
 *                           max_num_char = MAX_VAL, REMOVE_characters = "", to_lower = False, to_upper = False, remove_punctuation_string = False, remove_punctuation_vector = False, remove_numbers = False,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.vocabulary_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resource_path);
  __Pyx_XDECREF(__pyx_v_path_stopw);
  __Pyx_XDECREF(__pyx_v_dat_stopw);
  __Pyx_XDECREF(__pyx_v_array_stopw);
  __Pyx_XDECREF(__pyx_v_list_stopw);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_max_num_char);
  __Pyx_XDECREF(__pyx_v_remove_stopwords);
  __Pyx_XDECREF(__pyx_v_stemmer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1085
 * 
 * 
 *     def utf_locale(self, language = "english"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_7utf_locale(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_6utf_locale[] = "\n        utf-locale for specific languages\n        \n        This is a limited list of language-locale. The locale depends mostly on the text input.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_7utf_locale(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_language = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("utf_locale (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_language,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_english);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "utf_locale") < 0)) __PYX_ERR(0, 1085, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_language = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("utf_locale", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1085, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.utf_locale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_6utf_locale(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_language);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_6utf_locale(CYTHON_UNUSED struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_language) {
  PyObject *__pyx_v_resource_path = NULL;
  PyObject *__pyx_v_path_loc = NULL;
  PyObject *__pyx_v_dat_loc = NULL;
  PyObject *__pyx_v_array_loc = NULL;
  PyObject *__pyx_v_dict_loc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("utf_locale", 0);

  /* "textTinyPy/textTinyPy.pyx":1094
 *         '''
 * 
 *         assert isinstance(language, basestring), "the 'language' parameter should be a character string"             # <<<<<<<<<<<<<<
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_language, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1094, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_language_parameter_should_be_2);
      __PYX_ERR(0, 1094, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1096
 *         assert isinstance(language, basestring), "the 'language' parameter should be a character string"
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",             # <<<<<<<<<<<<<<
 *                             "estonian", "finnish", "french","galician", "german", "greek", "hausa", "hebrew", "hindi", "hungarian", "indonesian", "irish", "italian",
 *                             "latvian", "marathi", "norwegian", "persian", "polish", "portuguese", "romanian", "russian", "slovak", "slovenian", "somalia", "spanish",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_language);
    __pyx_t_1 = __pyx_v_language;
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_afrikaans, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_arabic, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_armenian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_basque, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_bengali, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_breton, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_bulgarian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_catalan, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_croatian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_czech, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_danish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_dutch, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_english, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_estonian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_finnish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_french, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_galician, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_german, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_greek, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hausa, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hebrew, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hindi, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_hungarian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_indonesian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_irish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_italian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_latvian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_marathi, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_norwegian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_persian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_polish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_portuguese, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_romanian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_russian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_slovak, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_slovenian, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_somalia, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_spanish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_swahili, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_swedish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_turkish, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_yoruba, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_zulu, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1096, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_3;
    __pyx_L3_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_languages_in_case_of_s_2);
      __PYX_ERR(0, 1096, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1112
 *         ELSE:
 * 
 *             resource_path = '/'.join(('locale', 'locale_stopword_encoding.csv'))             # <<<<<<<<<<<<<<
 * 
 *         path_loc = pkg_resources.resource_filename('textTinyPy', resource_path)
 */
  __pyx_t_1 = __Pyx_PyString_Join(__pyx_kp_s__6, __pyx_tuple__23); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_resource_path = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1114
 *             resource_path = '/'.join(('locale', 'locale_stopword_encoding.csv'))
 * 
 *         path_loc = pkg_resources.resource_filename('textTinyPy', resource_path)             # <<<<<<<<<<<<<<
 * 
 *         dat_loc = pd.read_csv(path_loc, header = 0)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pkg_resources); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_resource_filename); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_s_textTinyPy);
    __Pyx_GIVEREF(__pyx_n_s_textTinyPy);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_n_s_textTinyPy);
    __Pyx_INCREF(__pyx_v_resource_path);
    __Pyx_GIVEREF(__pyx_v_resource_path);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_resource_path);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_path_loc = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1116
 *         path_loc = pkg_resources.resource_filename('textTinyPy', resource_path)
 * 
 *         dat_loc = pd.read_csv(path_loc, header = 0)             # <<<<<<<<<<<<<<
 * 
 *         array_loc = np.array(dat_loc.as_matrix(columns=None))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_path_loc);
  __Pyx_GIVEREF(__pyx_v_path_loc);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path_loc);
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_header, __pyx_int_0) < 0) __PYX_ERR(0, 1116, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_dat_loc = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "textTinyPy/textTinyPy.pyx":1118
 *         dat_loc = pd.read_csv(path_loc, header = 0)
 * 
 *         array_loc = np.array(dat_loc.as_matrix(columns=None))             # <<<<<<<<<<<<<<
 * 
 *         dict_loc = { i[0] : i[1] for i in array_loc }
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_dat_loc, __pyx_n_s_as_matrix); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_columns, Py_None) < 0) __PYX_ERR(0, 1118, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1118, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1118, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1118, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_array_loc = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "textTinyPy/textTinyPy.pyx":1120
 *         array_loc = np.array(dat_loc.as_matrix(columns=None))
 * 
 *         dict_loc = { i[0] : i[1] for i in array_loc }             # <<<<<<<<<<<<<<
 * 
 *         return dict_loc[language]
 */
  { /* enter inner scope */
    PyObject *__pyx_7genexpr__pyx_v_i = NULL;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1120, __pyx_L48_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_v_array_loc)) || PyTuple_CheckExact(__pyx_v_array_loc)) {
      __pyx_t_1 = __pyx_v_array_loc; __Pyx_INCREF(__pyx_t_1); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_array_loc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L48_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1120, __pyx_L48_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1120, __pyx_L48_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1120, __pyx_L48_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 1120, __pyx_L48_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1120, __pyx_L48_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_10(__pyx_t_1);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1120, __pyx_L48_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_7genexpr__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1120, __pyx_L48_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_7genexpr__pyx_v_i, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1120, __pyx_L48_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(PyDict_SetItem(__pyx_t_4, (PyObject*)__pyx_t_7, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1120, __pyx_L48_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
    goto __pyx_L51_exit_scope;
    __pyx_L48_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
    goto __pyx_L1_error;
    __pyx_L51_exit_scope:;
  } /* exit inner scope */
  __pyx_v_dict_loc = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "textTinyPy/textTinyPy.pyx":1122
 *         dict_loc = { i[0] : i[1] for i in array_loc }
 * 
 *         return dict_loc[language]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_dict_loc, __pyx_v_language); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1085
 * 
 * 
 *     def utf_locale(self, language = "english"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.utf_locale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resource_path);
  __Pyx_XDECREF(__pyx_v_path_loc);
  __Pyx_XDECREF(__pyx_v_dat_loc);
  __Pyx_XDECREF(__pyx_v_array_loc);
  __Pyx_XDECREF(__pyx_v_dict_loc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1126
 * 
 * 
 *     def bytes_converter(self, input_path_file = None, unit = "MB"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_9bytes_converter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_8bytes_converter[] = "\n        \n        bytes converter using a text file ( KB, MB or GB )\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_9bytes_converter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_file = 0;
  PyObject *__pyx_v_unit = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bytes_converter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_file,&__pyx_n_s_unit,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_n_s_MB);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_unit);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bytes_converter") < 0)) __PYX_ERR(0, 1126, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_file = values[0];
    __pyx_v_unit = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bytes_converter", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1126, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.bytes_converter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_8bytes_converter(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_input_path_file, __pyx_v_unit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_8bytes_converter(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_unit) {
  double __pyx_v_result_conv;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  __Pyx_RefNannySetupContext("bytes_converter", 0);

  /* "textTinyPy/textTinyPy.pyx":1136
 *         cdef double result_conv
 * 
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh);
      __PYX_ERR(0, 1136, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1138
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(unit, basestring), 'the unit parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_path_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1138, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_path_file);
        __Pyx_GIVEREF(__pyx_v_input_path_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_path_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1138, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh_2);
      __PYX_ERR(0, 1138, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1140
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(unit, basestring), 'the unit parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert unit in ["KB", "MB", "GB"], "available units are 'KB', 'MB' or 'GB'"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_unit, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_unit_parameter_should_be_of);
      __PYX_ERR(0, 1140, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1142
 *         assert isinstance(unit, basestring), 'the unit parameter should be of type string'
 * 
 *         assert unit in ["KB", "MB", "GB"], "available units are 'KB', 'MB' or 'GB'"             # <<<<<<<<<<<<<<
 * 
 *         result_conv = self.bgf.bytes_converter(input_path_file, unit)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_unit);
    __pyx_t_1 = __pyx_v_unit;
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_KB, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1142, __pyx_L1_error)
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_MB, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1142, __pyx_L1_error)
    if (!__pyx_t_6) {
    } else {
      __pyx_t_2 = __pyx_t_6;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_6 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_n_s_GB, Py_EQ)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_6;
    __pyx_L3_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_units_are_KB_MB_or_GB);
      __PYX_ERR(0, 1142, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1144
 *         assert unit in ["KB", "MB", "GB"], "available units are 'KB', 'MB' or 'GB'"
 * 
 *         result_conv = self.bgf.bytes_converter(input_path_file, unit)             # <<<<<<<<<<<<<<
 * 
 *         return result_conv
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L1_error)
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_unit); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L1_error)
  __pyx_v_result_conv = __pyx_v_self->bgf->bytes_converter(__pyx_t_7, __pyx_t_8);

  /* "textTinyPy/textTinyPy.pyx":1146
 *         result_conv = self.bgf.bytes_converter(input_path_file, unit)
 * 
 *         return result_conv             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result_conv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1126
 * 
 * 
 *     def bytes_converter(self, input_path_file = None, unit = "MB"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.bytes_converter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1150
 * 
 * 
 *     def text_file_parser(self, input_path_file = None, start_query = None, end_query = None, output_path_file = None, min_lines = 1, trimmed_line = False, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_11text_file_parser(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_10text_file_parser[] = "\n        \n        Text file parser\n        \n        The text file should have a structure (such as an xml-structure), so that subsets can be extracted using the start_query and end_query parameters.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_11text_file_parser(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_file = 0;
  PyObject *__pyx_v_start_query = 0;
  PyObject *__pyx_v_end_query = 0;
  PyObject *__pyx_v_output_path_file = 0;
  PyObject *__pyx_v_min_lines = 0;
  PyObject *__pyx_v_trimmed_line = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("text_file_parser (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_file,&__pyx_n_s_start_query,&__pyx_n_s_end_query,&__pyx_n_s_output_path_file,&__pyx_n_s_min_lines,&__pyx_n_s_trimmed_line,&__pyx_n_s_verbose,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)__pyx_int_1);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start_query);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_end_query);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_path_file);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_lines);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trimmed_line);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "text_file_parser") < 0)) __PYX_ERR(0, 1150, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_file = values[0];
    __pyx_v_start_query = values[1];
    __pyx_v_end_query = values[2];
    __pyx_v_output_path_file = values[3];
    __pyx_v_min_lines = values[4];
    __pyx_v_trimmed_line = values[5];
    __pyx_v_verbose = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("text_file_parser", 0, 0, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1150, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.text_file_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_10text_file_parser(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_input_path_file, __pyx_v_start_query, __pyx_v_end_query, __pyx_v_output_path_file, __pyx_v_min_lines, __pyx_v_trimmed_line, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_10text_file_parser(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_start_query, PyObject *__pyx_v_end_query, PyObject *__pyx_v_output_path_file, PyObject *__pyx_v_min_lines, PyObject *__pyx_v_trimmed_line, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  std::string __pyx_t_10;
  std::string __pyx_t_11;
  int __pyx_t_12;
  bool __pyx_t_13;
  bool __pyx_t_14;
  __Pyx_RefNannySetupContext("text_file_parser", 0);

  /* "textTinyPy/textTinyPy.pyx":1160
 *         '''
 * 
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh);
      __PYX_ERR(0, 1160, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1162
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_path_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_path_file);
        __Pyx_GIVEREF(__pyx_v_input_path_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_path_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh_2);
      __PYX_ERR(0, 1162, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1164
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_output_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_file_parameter_s);
      __PYX_ERR(0, 1164, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1166
 *         assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 * 
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_start_query, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_start_query_parameter_should);
      __PYX_ERR(0, 1166, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1168
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'
 * 
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_end_query, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_end_query_parameter_should_b);
      __PYX_ERR(0, 1168, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1170
 *         assert isinstance(end_query, basestring), 'the end_query parameter should be of type string'
 * 
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_min_lines, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1170, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_min_lines, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1170, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1170, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_7;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_lines_parameter_should_b);
      __PYX_ERR(0, 1170, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1172
 *         assert isinstance(min_lines, int) and min_lines > 0, 'the min_lines parameter should be of type integer and at least 1'
 * 
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_trimmed_line, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trimmed_line_parameter_shoul);
      __PYX_ERR(0, 1172, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1174
 *         assert isinstance(trimmed_line, bool), 'the trimmed_line parameter should be of type boolean'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         self.bgf.batch_parser(input_path_file, start_query, end_query, output_path_file, min_lines, trimmed_line, verbose)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 1174, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1176
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         self.bgf.batch_parser(input_path_file, start_query, end_query, output_path_file, min_lines, trimmed_line, verbose)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_start_query); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_end_query); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_output_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_v_min_lines); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_trimmed_line); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_14 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __pyx_v_self->bgf->batch_parser(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14);

  /* "textTinyPy/textTinyPy.pyx":1150
 * 
 * 
 *     def text_file_parser(self, input_path_file = None, start_query = None, end_query = None, output_path_file = None, min_lines = 1, trimmed_line = False, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.text_file_parser", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1180
 * 
 * 
 *     def dice_distance(self, word1 = None, word2 = None, n_grams = 2):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_13dice_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_12dice_distance[] = "\n        \n        dice similarity of words using n-grams \n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_13dice_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_word1 = 0;
  PyObject *__pyx_v_word2 = 0;
  PyObject *__pyx_v_n_grams = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dice_distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_word1,&__pyx_n_s_word2,&__pyx_n_s_n_grams,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_int_2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_word1);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_word2);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_grams);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dice_distance") < 0)) __PYX_ERR(0, 1180, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_word1 = values[0];
    __pyx_v_word2 = values[1];
    __pyx_v_n_grams = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dice_distance", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.dice_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_12dice_distance(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_word1, __pyx_v_word2, __pyx_v_n_grams);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_12dice_distance(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_word1, PyObject *__pyx_v_word2, PyObject *__pyx_v_n_grams) {
  double __pyx_v_result_dice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("dice_distance", 0);

  /* "textTinyPy/textTinyPy.pyx":1188
 *         '''
 * 
 *         assert isinstance(word1, basestring), 'the word1 parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(word2, basestring), 'the word2 parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_word1, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_word1_parameter_should_be_of);
      __PYX_ERR(0, 1188, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1190
 *         assert isinstance(word1, basestring), 'the word1 parameter should be of type string'
 * 
 *         assert isinstance(word2, basestring), 'the word2 parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_grams, int) and n_grams > 0, 'the n_grams parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_word2, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_word2_parameter_should_be_of);
      __PYX_ERR(0, 1190, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1192
 *         assert isinstance(word2, basestring), 'the word2 parameter should be of type string'
 * 
 *         assert isinstance(n_grams, int) and n_grams > 0, 'the n_grams parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         cdef double result_dice
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_n_grams, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_n_grams, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_grams_parameter_should_be);
      __PYX_ERR(0, 1192, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1196
 *         cdef double result_dice
 * 
 *         result_dice = self.tks.dice_similarity(word1, word2, n_grams)             # <<<<<<<<<<<<<<
 * 
 *         return result_dice
 */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_word1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1196, __pyx_L1_error)
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_word2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1196, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_n_grams); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1196, __pyx_L1_error)
  __pyx_v_result_dice = __pyx_v_self->tks->dice_similarity(__pyx_t_5, __pyx_t_6, __pyx_t_7);

  /* "textTinyPy/textTinyPy.pyx":1198
 *         result_dice = self.tks.dice_similarity(word1, word2, n_grams)
 * 
 *         return result_dice             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result_dice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1180
 * 
 * 
 *     def dice_distance(self, word1 = None, word2 = None, n_grams = 2):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.dice_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1202
 * 
 * 
 *     def levenshtein_distance(self, word1 = None, word2 = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_15levenshtein_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_14levenshtein_distance[] = "\n        \n        levenshtein distance of two words\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_15levenshtein_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_word1 = 0;
  PyObject *__pyx_v_word2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("levenshtein_distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_word1,&__pyx_n_s_word2,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_word1);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_word2);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "levenshtein_distance") < 0)) __PYX_ERR(0, 1202, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_word1 = values[0];
    __pyx_v_word2 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("levenshtein_distance", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1202, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.levenshtein_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_14levenshtein_distance(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_word1, __pyx_v_word2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_14levenshtein_distance(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_word1, PyObject *__pyx_v_word2) {
  double __pyx_v_result_lev;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::string __pyx_t_3;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("levenshtein_distance", 0);

  /* "textTinyPy/textTinyPy.pyx":1210
 *         '''
 * 
 *         assert isinstance(word1, basestring), 'the word1 parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(word2, basestring), 'the word2 parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_word1, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_word1_parameter_should_be_of);
      __PYX_ERR(0, 1210, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1212
 *         assert isinstance(word1, basestring), 'the word1 parameter should be of type string'
 * 
 *         assert isinstance(word2, basestring), 'the word2 parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         cdef double result_lev
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_word2, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_word2_parameter_should_be_of);
      __PYX_ERR(0, 1212, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1216
 *         cdef double result_lev
 * 
 *         result_lev = self.tks.levenshtein_dist(word1, word2)             # <<<<<<<<<<<<<<
 * 
 *         return result_lev
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_word1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_word2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L1_error)
  __pyx_v_result_lev = __pyx_v_self->tks->levenshtein_dist(__pyx_t_3, __pyx_t_4);

  /* "textTinyPy/textTinyPy.pyx":1218
 *         result_lev = self.tks.levenshtein_dist(word1, word2)
 * 
 *         return result_lev             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result_lev); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1202
 * 
 * 
 *     def levenshtein_distance(self, word1 = None, word2 = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.levenshtein_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1222
 * 
 * 
 *     def cosine_distance(self, sentence1 = None, sentence2 = None, split_separator = " "):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_17cosine_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_16cosine_distance[] = "\n        \n        cosine distance of two character strings (each string consists of more than 1 words)\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_17cosine_distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sentence1 = 0;
  PyObject *__pyx_v_sentence2 = 0;
  PyObject *__pyx_v_split_separator = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cosine_distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sentence1,&__pyx_n_s_sentence2,&__pyx_n_s_split_separator,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_kp_s__5);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence1);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sentence2);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_split_separator);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cosine_distance") < 0)) __PYX_ERR(0, 1222, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sentence1 = values[0];
    __pyx_v_sentence2 = values[1];
    __pyx_v_split_separator = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cosine_distance", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.cosine_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_16cosine_distance(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_sentence1, __pyx_v_sentence2, __pyx_v_split_separator);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_16cosine_distance(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_sentence1, PyObject *__pyx_v_sentence2, PyObject *__pyx_v_split_separator) {
  double __pyx_v_result_cos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  std::string __pyx_t_3;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("cosine_distance", 0);

  /* "textTinyPy/textTinyPy.pyx":1230
 *         '''
 * 
 *         assert isinstance(sentence1, basestring), 'the sentence1 parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(sentence2, basestring), 'the sentence2 parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_sentence1, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_sentence1_parameter_should_b);
      __PYX_ERR(0, 1230, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1232
 *         assert isinstance(sentence1, basestring), 'the sentence1 parameter should be of type string'
 * 
 *         assert isinstance(sentence2, basestring), 'the sentence2 parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(split_separator, basestring), 'the split_separator parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_sentence2, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1232, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_sentence2_parameter_should_b);
      __PYX_ERR(0, 1232, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1234
 *         assert isinstance(sentence2, basestring), 'the sentence2 parameter should be of type string'
 * 
 *         assert isinstance(split_separator, basestring), 'the split_separator parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         cdef double result_cos
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_split_separator, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_split_separator_parameter_sh);
      __PYX_ERR(0, 1234, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1238
 *         cdef double result_cos
 * 
 *         result_cos = self.tks.cosine_dist(sentence1, sentence2, split_separator)             # <<<<<<<<<<<<<<
 * 
 *         return result_cos
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_sentence1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1238, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_sentence2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1238, __pyx_L1_error)
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_split_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1238, __pyx_L1_error)
  __pyx_v_result_cos = __pyx_v_self->tks->cosine_dist(__pyx_t_3, __pyx_t_4, __pyx_t_5);

  /* "textTinyPy/textTinyPy.pyx":1240
 *         result_cos = self.tks.cosine_dist(sentence1, sentence2, split_separator)
 * 
 *         return result_cos             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_result_cos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1222
 * 
 * 
 *     def cosine_distance(self, sentence1 = None, sentence2 = None, split_separator = " "):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.cosine_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1244
 * 
 * 
 *     def read_characters(self, input_file = None, characters = 100, write_2file = ""):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_19read_characters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_18read_characters[] = "\n        \n        read a specific number of characters from a text file\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_19read_characters(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_file = 0;
  PyObject *__pyx_v_characters = 0;
  PyObject *__pyx_v_write_2file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_characters (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_file,&__pyx_n_s_characters,&__pyx_n_s_write_2file,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_int_100);
    values[2] = ((PyObject *)__pyx_kp_s__2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_characters);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_write_2file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_characters") < 0)) __PYX_ERR(0, 1244, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_file = values[0];
    __pyx_v_characters = values[1];
    __pyx_v_write_2file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_characters", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1244, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.read_characters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_18read_characters(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_input_file, __pyx_v_characters, __pyx_v_write_2file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_18read_characters(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_file, PyObject *__pyx_v_characters, PyObject *__pyx_v_write_2file) {
  std::string __pyx_v_result_chars;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  std::string __pyx_t_8;
  PY_LONG_LONG __pyx_t_9;
  std::string __pyx_t_10;
  __Pyx_RefNannySetupContext("read_characters", 0);

  /* "textTinyPy/textTinyPy.pyx":1252
 *         '''
 * 
 *         assert isinstance(input_file, basestring), 'the input_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_file), "the input_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_file_parameter_should);
      __PYX_ERR(0, 1252, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1254
 *         assert isinstance(input_file, basestring), 'the input_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_file), "the input_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(characters, int) and characters > 0, 'the characters parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_file);
        __Pyx_GIVEREF(__pyx_v_input_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1254, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_file_parameter_should_2);
      __PYX_ERR(0, 1254, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1256
 *         assert os.path.exists(input_file), "the input_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(characters, int) and characters > 0, 'the characters parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(write_2file, basestring), 'the write_2file parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_characters, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = (__pyx_t_6 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_2 = __pyx_t_7;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_characters, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_7;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_characters_parameter_should);
      __PYX_ERR(0, 1256, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1258
 *         assert isinstance(characters, int) and characters > 0, 'the characters parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(write_2file, basestring), 'the write_2file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         cdef string result_chars
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_write_2file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_write_2file_parameter_should);
      __PYX_ERR(0, 1258, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1262
 *         cdef string result_chars
 * 
 *         result_chars = self.btk.read_CHARS(input_file, characters, write_2file)             # <<<<<<<<<<<<<<
 * 
 *         return result_chars
 */
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1262, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_characters); if (unlikely((__pyx_t_9 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1262, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_write_2file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1262, __pyx_L1_error)
  __pyx_v_result_chars = __pyx_v_self->btk->read_CHARS(__pyx_t_8, __pyx_t_9, __pyx_t_10);

  /* "textTinyPy/textTinyPy.pyx":1264
 *         result_chars = self.btk.read_CHARS(input_file, characters, write_2file)
 * 
 *         return result_chars             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_result_chars); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1244
 * 
 * 
 *     def read_characters(self, input_file = None, characters = 100, write_2file = ""):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.read_characters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1268
 * 
 * 
 *     def read_rows(self, input_file = None, read_delimiter = "\n", rows = 100, write_2file = ""):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_21read_rows(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_20read_rows[] = "\n        \n        read a specific number of rows from a text file\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_21read_rows(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_file = 0;
  PyObject *__pyx_v_read_delimiter = 0;
  PyObject *__pyx_v_rows = 0;
  PyObject *__pyx_v_write_2file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_rows (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_file,&__pyx_n_s_read_delimiter,&__pyx_n_s_rows,&__pyx_n_s_write_2file,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_kp_s_);
    values[2] = ((PyObject *)__pyx_int_100);
    values[3] = ((PyObject *)__pyx_kp_s__2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_read_delimiter);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_write_2file);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "read_rows") < 0)) __PYX_ERR(0, 1268, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_file = values[0];
    __pyx_v_read_delimiter = values[1];
    __pyx_v_rows = values[2];
    __pyx_v_write_2file = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read_rows", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.read_rows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_20read_rows(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_input_file, __pyx_v_read_delimiter, __pyx_v_rows, __pyx_v_write_2file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_20read_rows(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_file, PyObject *__pyx_v_read_delimiter, PyObject *__pyx_v_rows, PyObject *__pyx_v_write_2file) {
  std::vector<std::string>  __pyx_v_result_rows;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  std::string __pyx_t_9;
  std::string __pyx_t_10;
  std::string __pyx_t_11;
  PY_LONG_LONG __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("read_rows", 0);

  /* "textTinyPy/textTinyPy.pyx":1276
 *         '''
 * 
 *         assert isinstance(input_file, basestring), 'the input_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_file), "the input_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1276, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_file_parameter_should);
      __PYX_ERR(0, 1276, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1278
 *         assert isinstance(input_file, basestring), 'the input_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_file), "the input_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(read_delimiter, basestring), 'the read_delimiter parameter should be of type integer'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1278, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_file);
        __Pyx_GIVEREF(__pyx_v_input_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1278, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_file_parameter_should_2);
      __PYX_ERR(0, 1278, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1280
 *         assert os.path.exists(input_file), "the input_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(read_delimiter, basestring), 'the read_delimiter parameter should be of type integer'             # <<<<<<<<<<<<<<
 * 
 *         assert len(read_delimiter) == 1, 'the read_delimiter should be a single character string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_read_delimiter, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_read_delimiter_parameter_sho);
      __PYX_ERR(0, 1280, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1282
 *         assert isinstance(read_delimiter, basestring), 'the read_delimiter parameter should be of type integer'
 * 
 *         assert len(read_delimiter) == 1, 'the read_delimiter should be a single character string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(rows, int) and rows > 0, 'the rows parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_6 = PyObject_Length(__pyx_v_read_delimiter); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    if (unlikely(!((__pyx_t_6 == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_read_delimiter_should_be_a_s);
      __PYX_ERR(0, 1282, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1284
 *         assert len(read_delimiter) == 1, 'the read_delimiter should be a single character string'
 * 
 *         assert isinstance(rows, int) and rows > 0, 'the rows parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(write_2file, basestring), 'the write_2file parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_rows, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_rows, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __pyx_t_8;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_rows_parameter_should_be_of);
      __PYX_ERR(0, 1284, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1286
 *         assert isinstance(rows, int) and rows > 0, 'the rows parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(write_2file, basestring), 'the write_2file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[string] result_rows
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_write_2file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_write_2file_parameter_should);
      __PYX_ERR(0, 1286, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1290
 *         cdef vector[string] result_rows
 * 
 *         result_rows = self.btk.read_ROWS(input_file, write_2file, read_delimiter, rows)             # <<<<<<<<<<<<<<
 * 
 *         return np.array(result_rows)
 */
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_write_2file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L1_error)
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_read_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_rows); if (unlikely((__pyx_t_12 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L1_error)
  __pyx_v_result_rows = __pyx_v_self->btk->read_ROWS(__pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

  /* "textTinyPy/textTinyPy.pyx":1292
 *         result_rows = self.btk.read_ROWS(input_file, write_2file, read_delimiter, rows)
 * 
 *         return np.array(result_rows)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1268
 * 
 * 
 *     def read_rows(self, input_file = None, read_delimiter = "\n", rows = 100, write_2file = ""):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.read_rows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1296
 * 
 * 
 *     def xml_parser_subroot_elements(self, input_path_file = None, xml_path = None, output_path_file = None, empty_key = ""):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_23xml_parser_subroot_elements(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_22xml_parser_subroot_elements[] = "\n        \n        xml file tree traversal for subroot's attributes, elements and sub-elements using the boost library\n        \n        [ the structure should be similar to the mediawiki ]\n        \n        \n        for the logic behind root-child-subchildren xml pre-processing SEE: http://www.w3schools.com/xml/xml_tree.asp\n        \n        \n        example to get a \"subchild's element\"\n        -------------------------------------\n        \n        res = xml_parser_subroot_elements(input_path_file = \"FILE.xml\", xml_path = \"/mediawiki/page/revision.contributor.id\", output_path_file = None, empty_key = \"\")\n        \n        xml_path equals -->  \"/root/child/subchild.element.sub-element\"\n        \n        \n        example to get a \"subchild's attribute\" [ by using the \".<xmlattr>.\" in the query ]\n        -----------------------------------------------------------------------------------\n        \n        attribute in an .xml file:     <redirect title=\"Computer accessibility\"/>        \n        \n        res = xml_parser_subroot_elements(input_path_file = \"FILE.xml\", xml_path = \"/mediawiki/page/redirect.<xmlattr>.title\", output_path_file = \"\", empty_key = \"\")\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_23xml_parser_subroot_elements(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_file = 0;
  PyObject *__pyx_v_xml_path = 0;
  PyObject *__pyx_v_output_path_file = 0;
  PyObject *__pyx_v_empty_key = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xml_parser_subroot_elements (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_file,&__pyx_n_s_xml_path,&__pyx_n_s_output_path_file,&__pyx_n_s_empty_key,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_kp_s__2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xml_path);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_path_file);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_empty_key);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xml_parser_subroot_elements") < 0)) __PYX_ERR(0, 1296, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_file = values[0];
    __pyx_v_xml_path = values[1];
    __pyx_v_output_path_file = values[2];
    __pyx_v_empty_key = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xml_parser_subroot_elements", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1296, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.xml_parser_subroot_elements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_22xml_parser_subroot_elements(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_input_path_file, __pyx_v_xml_path, __pyx_v_output_path_file, __pyx_v_empty_key);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_22xml_parser_subroot_elements(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_xml_path, PyObject *__pyx_v_output_path_file, PyObject *__pyx_v_empty_key) {
  std::vector<std::string>  __pyx_v_result_xml;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  std::string __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("xml_parser_subroot_elements", 0);
  __Pyx_INCREF(__pyx_v_output_path_file);

  /* "textTinyPy/textTinyPy.pyx":1325
 *         '''
 * 
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh);
      __PYX_ERR(0, 1325, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1327
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(xml_path, basestring), 'the xml_path parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_path_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_path_file);
        __Pyx_GIVEREF(__pyx_v_input_path_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_path_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh_2);
      __PYX_ERR(0, 1327, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1329
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(xml_path, basestring), 'the xml_path parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         if output_path_file is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_xml_path, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1329, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_xml_path_parameter_should_be);
      __PYX_ERR(0, 1329, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1331
 *         assert isinstance(xml_path, basestring), 'the xml_path parameter should be of type string'
 * 
 *         if output_path_file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_output_path_file != Py_None);
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":1333
 *         if output_path_file is not None:
 * 
 *             assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyObject_IsInstance(__pyx_v_output_path_file, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1333, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_6 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_file_parameter_s);
        __PYX_ERR(0, 1333, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1331
 *         assert isinstance(xml_path, basestring), 'the xml_path parameter should be of type string'
 * 
 *         if output_path_file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 */
    goto __pyx_L3;
  }

  /* "textTinyPy/textTinyPy.pyx":1337
 *         else:
 * 
 *             output_path_file = ""             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(empty_key, basestring), 'the empty_key parameter should be of type string'
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_output_path_file, __pyx_kp_s__2);
  }
  __pyx_L3:;

  /* "textTinyPy/textTinyPy.pyx":1339
 *             output_path_file = ""
 * 
 *         assert isinstance(empty_key, basestring), 'the empty_key parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[string] result_xml
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_IsInstance(__pyx_v_empty_key, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_6 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_empty_key_parameter_should_b);
      __PYX_ERR(0, 1339, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1343
 *         cdef vector[string] result_xml
 * 
 *         result_xml = self.utl.xml_subchildren_attrs_elems(input_path_file, xml_path, output_path_file, empty_key)             # <<<<<<<<<<<<<<
 * 
 *         return np.array(result_xml)
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1343, __pyx_L1_error)
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_xml_path); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1343, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_output_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1343, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_empty_key); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1343, __pyx_L1_error)
  __pyx_v_result_xml = __pyx_v_self->utl->xml_subchildren_attrs_elems(__pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_t_10);

  /* "textTinyPy/textTinyPy.pyx":1345
 *         result_xml = self.utl.xml_subchildren_attrs_elems(input_path_file, xml_path, output_path_file, empty_key)
 * 
 *         return np.array(result_xml)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_xml); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1345, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1345, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1345, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1345, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1296
 * 
 * 
 *     def xml_parser_subroot_elements(self, input_path_file = None, xml_path = None, output_path_file = None, empty_key = ""):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.xml_parser_subroot_elements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output_path_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1349
 * 
 * 
 *     def xml_parser_root_elements(self, input_path_file = None, xml_root = None, output_path_file = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_25xml_parser_root_elements(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_5utils_24xml_parser_root_elements[] = "\n        \n        xml file tree traversal for a root's attributes using the boost library [ the main sturcture should be repeated, SEE test-example-file ]\n        \n        \n        example to get a \"child's attributes\" [ here I only use the root-element of the xml file as parameter ]\n        -------------------------------------------------------------------------------------------------------\n        \n        res = xml_parser_child(input_path_file = \"FILE.xml\", xml_root = \"MultiMessage\", output_path_file = \"\")       \n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_5utils_25xml_parser_root_elements(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_input_path_file = 0;
  PyObject *__pyx_v_xml_root = 0;
  PyObject *__pyx_v_output_path_file = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xml_parser_root_elements (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_input_path_file,&__pyx_n_s_xml_root,&__pyx_n_s_output_path_file,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_input_path_file);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xml_root);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_output_path_file);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "xml_parser_root_elements") < 0)) __PYX_ERR(0, 1349, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_input_path_file = values[0];
    __pyx_v_xml_root = values[1];
    __pyx_v_output_path_file = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("xml_parser_root_elements", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1349, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.xml_parser_root_elements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_5utils_24xml_parser_root_elements(((struct __pyx_obj_10textTinyPy_10textTinyPy_utils *)__pyx_v_self), __pyx_v_input_path_file, __pyx_v_xml_root, __pyx_v_output_path_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_5utils_24xml_parser_root_elements(struct __pyx_obj_10textTinyPy_10textTinyPy_utils *__pyx_v_self, PyObject *__pyx_v_input_path_file, PyObject *__pyx_v_xml_root, PyObject *__pyx_v_output_path_file) {
  struct xml_struct __pyx_v_result_xml;
  PyObject *__pyx_v_pd_2dict = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::string __pyx_t_7;
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  __Pyx_RefNannySetupContext("xml_parser_root_elements", 0);
  __Pyx_INCREF(__pyx_v_output_path_file);

  /* "textTinyPy/textTinyPy.pyx":1363
 *         '''
 * 
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_input_path_file, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1363, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh);
      __PYX_ERR(0, 1363, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1365
 *         assert isinstance(input_path_file, basestring), 'the input_path_file parameter should be of type string'
 * 
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(xml_root, basestring), 'the xml_root parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_input_path_file); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_v_input_path_file};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_input_path_file);
        __Pyx_GIVEREF(__pyx_v_input_path_file);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_input_path_file);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_input_path_file_parameter_sh_2);
      __PYX_ERR(0, 1365, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1367
 *         assert os.path.exists(input_path_file), "the input_path_file parameter should be a valid path to a file"
 * 
 *         assert isinstance(xml_root, basestring), 'the xml_root parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         if output_path_file is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_xml_root, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1367, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_xml_root_parameter_should_be);
      __PYX_ERR(0, 1367, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1369
 *         assert isinstance(xml_root, basestring), 'the xml_root parameter should be of type string'
 * 
 *         if output_path_file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_output_path_file != Py_None);
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (__pyx_t_6) {

    /* "textTinyPy/textTinyPy.pyx":1371
 *         if output_path_file is not None:
 * 
 *             assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyObject_IsInstance(__pyx_v_output_path_file, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 1371, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!(__pyx_t_6 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_output_path_file_parameter_s);
        __PYX_ERR(0, 1371, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1369
 *         assert isinstance(xml_root, basestring), 'the xml_root parameter should be of type string'
 * 
 *         if output_path_file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(output_path_file, basestring), 'the output_path_file parameter should be of type string'
 */
    goto __pyx_L3;
  }

  /* "textTinyPy/textTinyPy.pyx":1375
 *         else:
 * 
 *             output_path_file = ""             # <<<<<<<<<<<<<<
 * 
 *         self.utl.xml_child_attributes(input_path_file, xml_root, output_path_file)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_output_path_file, __pyx_kp_s__2);
  }
  __pyx_L3:;

  /* "textTinyPy/textTinyPy.pyx":1377
 *             output_path_file = ""
 * 
 *         self.utl.xml_child_attributes(input_path_file, xml_root, output_path_file)             # <<<<<<<<<<<<<<
 * 
 *         result_xml = self.utl.output_xml_data()
 */
  __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_input_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1377, __pyx_L1_error)
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_xml_root); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1377, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_output_path_file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1377, __pyx_L1_error)
  __pyx_v_self->utl->xml_child_attributes(__pyx_t_7, __pyx_t_8, __pyx_t_9);

  /* "textTinyPy/textTinyPy.pyx":1379
 *         self.utl.xml_child_attributes(input_path_file, xml_root, output_path_file)
 * 
 *         result_xml = self.utl.output_xml_data()             # <<<<<<<<<<<<<<
 * 
 *         pd_2dict = {}
 */
  __pyx_v_result_xml = __pyx_v_self->utl->output_xml_data();

  /* "textTinyPy/textTinyPy.pyx":1381
 *         result_xml = self.utl.output_xml_data()
 * 
 *         pd_2dict = {}             # <<<<<<<<<<<<<<
 * 
 *         pd_2dict['child_keys'] = result_xml.KEYS
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pd_2dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1383
 *         pd_2dict = {}
 * 
 *         pd_2dict['child_keys'] = result_xml.KEYS             # <<<<<<<<<<<<<<
 * 
 *         pd_2dict['child_values'] = result_xml.VALUES
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_xml.KEYS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_pd_2dict, __pyx_n_s_child_keys, __pyx_t_1) < 0)) __PYX_ERR(0, 1383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1385
 *         pd_2dict['child_keys'] = result_xml.KEYS
 * 
 *         pd_2dict['child_values'] = result_xml.VALUES             # <<<<<<<<<<<<<<
 * 
 *         df = pd.DataFrame.from_dict(pd_2dict, orient = 'columns')
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_xml.VALUES); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_pd_2dict, __pyx_n_s_child_values, __pyx_t_1) < 0)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1387
 *         pd_2dict['child_values'] = result_xml.VALUES
 * 
 *         df = pd.DataFrame.from_dict(pd_2dict, orient = 'columns')             # <<<<<<<<<<<<<<
 * 
 *         df = df[['child_keys', 'child_values']]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_from_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_pd_2dict);
  __Pyx_GIVEREF(__pyx_v_pd_2dict);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pd_2dict);
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_orient, __pyx_n_s_columns) < 0) __PYX_ERR(0, 1387, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_df = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "textTinyPy/textTinyPy.pyx":1389
 *         df = pd.DataFrame.from_dict(pd_2dict, orient = 'columns')
 * 
 *         df = df[['child_keys', 'child_values']]             # <<<<<<<<<<<<<<
 * 
 *         return df
 */
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_child_keys);
  __Pyx_GIVEREF(__pyx_n_s_child_keys);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_child_keys);
  __Pyx_INCREF(__pyx_n_s_child_values);
  __Pyx_GIVEREF(__pyx_n_s_child_values);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_child_values);
  __pyx_t_5 = PyObject_GetItem(__pyx_v_df, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_df, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "textTinyPy/textTinyPy.pyx":1391
 *         df = df[['child_keys', 'child_values']]
 * 
 *         return df             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_df);
  __pyx_r = __pyx_v_df;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1349
 * 
 * 
 *     def xml_parser_root_elements(self, input_path_file = None, xml_root = None, output_path_file = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.utils.xml_parser_root_elements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pd_2dict);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_output_path_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1412
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.tks = new TOKEN_stats()
 */

/* Python wrapper */
static int __pyx_pw_10textTinyPy_10textTinyPy_11token_stats_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10textTinyPy_10textTinyPy_11token_stats_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats___cinit__(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10textTinyPy_10textTinyPy_11token_stats___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "textTinyPy/textTinyPy.pyx":1414
 *     def __cinit__(self):
 * 
 *         self.tks = new TOKEN_stats()             # <<<<<<<<<<<<<<
 * 
 *         self.result_counts = {}
 */
  __pyx_v_self->tks = new TOKEN_stats();

  /* "textTinyPy/textTinyPy.pyx":1416
 *         self.tks = new TOKEN_stats()
 * 
 *         self.result_counts = {}             # <<<<<<<<<<<<<<
 * 
 *         self.result_collocations = {}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->result_counts);
  __Pyx_DECREF(__pyx_v_self->result_counts);
  __pyx_v_self->result_counts = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1418
 *         self.result_counts = {}
 * 
 *         self.result_collocations = {}             # <<<<<<<<<<<<<<
 * 
 *         self.result_look_up_tbl = {}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->result_collocations);
  __Pyx_DECREF(__pyx_v_self->result_collocations);
  __pyx_v_self->result_collocations = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1420
 *         self.result_collocations = {}
 * 
 *         self.result_look_up_tbl = {}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->result_look_up_tbl);
  __Pyx_DECREF(__pyx_v_self->result_look_up_tbl);
  __pyx_v_self->result_look_up_tbl = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1412
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.tks = new TOKEN_stats()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1423
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.tks
 */

/* Python wrapper */
static void __pyx_pw_10textTinyPy_10textTinyPy_11token_stats_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10textTinyPy_10textTinyPy_11token_stats_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_2__dealloc__(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "textTinyPy/textTinyPy.pyx":1425
 *     def __dealloc__(self):
 * 
 *         del self.tks             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->tks;

  /* "textTinyPy/textTinyPy.pyx":1423
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.tks
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "textTinyPy/textTinyPy.pyx":1429
 * 
 * 
 *     def path_2vector(self, path_2folder = None, path_2file = None, file_delimiter = "\n"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_5path_2vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_4path_2vector[] = "\n        \n        the path_2vector function returns the words of a folder or file to a list ( assuming that each line consists of a single word ). Usage: read a vocabulary from a text file\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_5path_2vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path_2folder = 0;
  PyObject *__pyx_v_path_2file = 0;
  PyObject *__pyx_v_file_delimiter = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("path_2vector (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path_2folder,&__pyx_n_s_path_2file,&__pyx_n_s_file_delimiter,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2folder);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2file);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_delimiter);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "path_2vector") < 0)) __PYX_ERR(0, 1429, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path_2folder = values[0];
    __pyx_v_path_2file = values[1];
    __pyx_v_file_delimiter = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("path_2vector", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1429, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.path_2vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_4path_2vector(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_path_2folder, __pyx_v_path_2file, __pyx_v_file_delimiter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_4path_2vector(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter) {
  std::vector<std::string>  __pyx_v_result_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  std::string __pyx_t_10;
  std::vector<std::string>  __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("path_2vector", 0);
  __Pyx_INCREF(__pyx_v_path_2folder);
  __Pyx_INCREF(__pyx_v_path_2file);

  /* "textTinyPy/textTinyPy.pyx":1437
 *         '''
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  __pyx_t_1 = (__pyx_v_path_2folder != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1439
 *         if path_2folder is not None:
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             IF UNAME_SYSNAME == "Windows":
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_path_2folder, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1439, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul);
        __PYX_ERR(0, 1439, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1447
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_2folder, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1447, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul_2);
        __PYX_ERR(0, 1447, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1437
 *         '''
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1449
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_path_2file != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1451
 *         if path_2file is not None:
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_IsInstance(__pyx_v_path_2file, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1451, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should);
        __PYX_ERR(0, 1451, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1453
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_path_2file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1453, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_INCREF(__pyx_v_path_2file);
          __Pyx_GIVEREF(__pyx_v_path_2file);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_path_2file);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1453, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should_2);
        __PYX_ERR(0, 1453, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1449
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1455
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_file_delimiter, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_parameter_sho);
      __PYX_ERR(0, 1455, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1457
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'             # <<<<<<<<<<<<<<
 * 
 *         if path_2folder is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_7 = PyObject_Length(__pyx_v_file_delimiter); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1457, __pyx_L1_error)
    if (unlikely(!((__pyx_t_7 == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_should_be_a_s);
      __PYX_ERR(0, 1457, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1459
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  __pyx_t_1 = (__pyx_v_path_2folder == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1461
 *         if path_2folder is None:
 * 
 *             path_2folder = ""             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is None:
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2folder, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1459
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1463
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  __pyx_t_2 = (__pyx_v_path_2file == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1465
 *         if path_2file is None:
 * 
 *             path_2file = ""             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[string] result_vec
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2file, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1463
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1469
 *         cdef vector[string] result_vec
 * 
 *         result_vec = self.tks.path_2vector(path_2folder, path_2file, file_delimiter)             # <<<<<<<<<<<<<<
 * 
 *         return np.array(result_vec)
 */
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1469, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1469, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1469, __pyx_L1_error)
  try {
    __pyx_t_11 = __pyx_v_self->tks->path_2vector(__pyx_t_8, __pyx_t_9, __pyx_t_10);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1469, __pyx_L1_error)
  }
  __pyx_v_result_vec = __pyx_t_11;

  /* "textTinyPy/textTinyPy.pyx":1471
 *         result_vec = self.tks.path_2vector(path_2folder, path_2file, file_delimiter)
 * 
 *         return np.array(result_vec)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_vec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1429
 * 
 * 
 *     def path_2vector(self, path_2folder = None, path_2file = None, file_delimiter = "\n"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.path_2vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_path_2folder);
  __Pyx_XDECREF(__pyx_v_path_2file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1476
 * 
 * 
 *     def freq_distribution(self, x_vector = None, path_2folder = None, path_2file = None, file_delimiter = "\n", keep = None):             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_7freq_distribution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_6freq_distribution[] = "\n        \n        The freq_distribution function returns a named-unsorted vector frequency_distribution for EITHER a folder, a file OR a character string list. \n       \n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_7freq_distribution(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x_vector = 0;
  PyObject *__pyx_v_path_2folder = 0;
  PyObject *__pyx_v_path_2file = 0;
  PyObject *__pyx_v_file_delimiter = 0;
  PyObject *__pyx_v_keep = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("freq_distribution (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x_vector,&__pyx_n_s_path_2folder,&__pyx_n_s_path_2file,&__pyx_n_s_file_delimiter,&__pyx_n_s_keep,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_kp_s_);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x_vector);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2folder);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2file);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_delimiter);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "freq_distribution") < 0)) __PYX_ERR(0, 1476, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x_vector = values[0];
    __pyx_v_path_2folder = values[1];
    __pyx_v_path_2file = values[2];
    __pyx_v_file_delimiter = values[3];
    __pyx_v_keep = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("freq_distribution", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1476, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.freq_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_6freq_distribution(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_x_vector, __pyx_v_path_2folder, __pyx_v_path_2file, __pyx_v_file_delimiter, __pyx_v_keep);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_6freq_distribution(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_x_vector, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter, PyObject *__pyx_v_keep) {
  std::unordered_map<std::string,int>  __pyx_v_result_map;
  PyObject *__pyx_v_result_pd = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  std::vector<std::string>  __pyx_t_8;
  std::string __pyx_t_9;
  std::string __pyx_t_10;
  std::string __pyx_t_11;
  std::unordered_map<std::string,int>  __pyx_t_12;
  __Pyx_RefNannySetupContext("freq_distribution", 0);
  __Pyx_INCREF(__pyx_v_x_vector);
  __Pyx_INCREF(__pyx_v_path_2folder);
  __Pyx_INCREF(__pyx_v_path_2file);

  /* "textTinyPy/textTinyPy.pyx":1486
 *         '''
 * 
 *         if x_vector is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 */
  __pyx_t_1 = (__pyx_v_x_vector != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1488
 *         if x_vector is not None:
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'             # <<<<<<<<<<<<<<
 * 
 *         if path_2folder is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = PyList_Check(__pyx_v_x_vector); 
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_x_vector_parameter_should_be);
        __PYX_ERR(0, 1488, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1486
 *         '''
 * 
 *         if x_vector is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1490
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_path_2folder != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1492
 *         if path_2folder is not None:
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             IF UNAME_SYSNAME == "Windows":
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1492, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_IsInstance(__pyx_v_path_2folder, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1492, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul);
        __PYX_ERR(0, 1492, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1500
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_2folder, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1500, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul_2);
        __PYX_ERR(0, 1500, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1490
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1502
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  __pyx_t_1 = (__pyx_v_path_2file != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1504
 *         if path_2file is not None:
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_path_2file, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1504, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should);
        __PYX_ERR(0, 1504, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1506
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_path_2file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_INCREF(__pyx_v_path_2file);
          __Pyx_GIVEREF(__pyx_v_path_2file);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_path_2file);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1506, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should_2);
        __PYX_ERR(0, 1506, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1502
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1508
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_file_delimiter, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_parameter_sho);
      __PYX_ERR(0, 1508, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1510
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'             # <<<<<<<<<<<<<<
 * 
 *         if x_vector is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_7 = PyObject_Length(__pyx_v_file_delimiter); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1510, __pyx_L1_error)
    if (unlikely(!((__pyx_t_7 == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_should_be_a_s);
      __PYX_ERR(0, 1510, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1512
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 * 
 *         if x_vector is None:             # <<<<<<<<<<<<<<
 * 
 *             x_vector = []
 */
  __pyx_t_2 = (__pyx_v_x_vector == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1514
 *         if x_vector is None:
 * 
 *             x_vector = []             # <<<<<<<<<<<<<<
 * 
 *         if path_2folder is None:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_x_vector, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":1512
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 * 
 *         if x_vector is None:             # <<<<<<<<<<<<<<
 * 
 *             x_vector = []
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1516
 *             x_vector = []
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  __pyx_t_1 = (__pyx_v_path_2folder == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1518
 *         if path_2folder is None:
 * 
 *             path_2folder = ""             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is None:
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2folder, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1516
 *             x_vector = []
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1520
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  __pyx_t_2 = (__pyx_v_path_2file == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1522
 *         if path_2file is None:
 * 
 *             path_2file = ""             # <<<<<<<<<<<<<<
 * 
 *         cdef unordered_map[string, int] result_map
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2file, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1520
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1526
 *         cdef unordered_map[string, int] result_map
 * 
 *         result_map = self.tks.frequency_distribution(x_vector, path_2folder, path_2file, file_delimiter)             # <<<<<<<<<<<<<<
 * 
 *         result_pd = pd.DataFrame.from_dict(result_map, orient='index')
 */
  __pyx_t_8 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_x_vector); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1526, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1526, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1526, __pyx_L1_error)
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1526, __pyx_L1_error)
  try {
    __pyx_t_12 = __pyx_v_self->tks->frequency_distribution(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1526, __pyx_L1_error)
  }
  __pyx_v_result_map = __pyx_t_12;

  /* "textTinyPy/textTinyPy.pyx":1528
 *         result_map = self.tks.frequency_distribution(x_vector, path_2folder, path_2file, file_delimiter)
 * 
 *         result_pd = pd.DataFrame.from_dict(result_map, orient='index')             # <<<<<<<<<<<<<<
 * 
 *         result_pd.columns = ['freq']
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_from_dict); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____int(__pyx_v_result_map); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_orient, __pyx_n_s_index) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_result_pd = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "textTinyPy/textTinyPy.pyx":1530
 *         result_pd = pd.DataFrame.from_dict(result_map, orient='index')
 * 
 *         result_pd.columns = ['freq']             # <<<<<<<<<<<<<<
 * 
 *         result_pd = result_pd.sort(['freq'], ascending=[False])
 */
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_freq);
  __Pyx_GIVEREF(__pyx_n_s_freq);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_freq);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_result_pd, __pyx_n_s_columns, __pyx_t_5) < 0) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "textTinyPy/textTinyPy.pyx":1532
 *         result_pd.columns = ['freq']
 * 
 *         result_pd = result_pd.sort(['freq'], ascending=[False])             # <<<<<<<<<<<<<<
 * 
 *         if keep is not None:
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_result_pd, __pyx_n_s_sort); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_s_freq);
  __Pyx_GIVEREF(__pyx_n_s_freq);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_freq);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyList_SET_ITEM(__pyx_t_3, 0, Py_False);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_ascending, __pyx_t_3) < 0) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF_SET(__pyx_v_result_pd, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "textTinyPy/textTinyPy.pyx":1534
 *         result_pd = result_pd.sort(['freq'], ascending=[False])
 * 
 *         if keep is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(keep, int), 'the keep parameter should be of type int'
 */
  __pyx_t_1 = (__pyx_v_keep != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1536
 *         if keep is not None:
 * 
 *             assert isinstance(keep, int), 'the keep parameter should be of type int'             # <<<<<<<<<<<<<<
 * 
 *             result_pd = result_pd[0:keep]
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_keep, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1536, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_keep_parameter_should_be_of);
        __PYX_ERR(0, 1536, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1538
 *             assert isinstance(keep, int), 'the keep parameter should be of type int'
 * 
 *             result_pd = result_pd[0:keep]             # <<<<<<<<<<<<<<
 * 
 *         return result_pd
 */
    __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_result_pd, 0, 0, NULL, &__pyx_v_keep, NULL, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_result_pd, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":1534
 *         result_pd = result_pd.sort(['freq'], ascending=[False])
 * 
 *         if keep is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(keep, int), 'the keep parameter should be of type int'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1540
 *             result_pd = result_pd[0:keep]
 * 
 *         return result_pd             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result_pd);
  __pyx_r = __pyx_v_result_pd;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1476
 * 
 * 
 *     def freq_distribution(self, x_vector = None, path_2folder = None, path_2file = None, file_delimiter = "\n", keep = None):             # <<<<<<<<<<<<<<
 * 
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.freq_distribution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result_pd);
  __Pyx_XDECREF(__pyx_v_x_vector);
  __Pyx_XDECREF(__pyx_v_path_2folder);
  __Pyx_XDECREF(__pyx_v_path_2file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1544
 * 
 * 
 *     def count_character(self, x_vector = None, path_2folder = None, path_2file = None, file_delimiter = "\n"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_9count_character(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_8count_character[] = "\n        \n        The count_character function returns the number of characters for each word of the corpus for EITHER a folder, a file OR a character string list.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_9count_character(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x_vector = 0;
  PyObject *__pyx_v_path_2folder = 0;
  PyObject *__pyx_v_path_2file = 0;
  PyObject *__pyx_v_file_delimiter = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_character (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x_vector,&__pyx_n_s_path_2folder,&__pyx_n_s_path_2file,&__pyx_n_s_file_delimiter,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x_vector);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2folder);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2file);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_delimiter);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "count_character") < 0)) __PYX_ERR(0, 1544, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x_vector = values[0];
    __pyx_v_path_2folder = values[1];
    __pyx_v_path_2file = values[2];
    __pyx_v_file_delimiter = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_character", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1544, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.count_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_8count_character(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_x_vector, __pyx_v_path_2folder, __pyx_v_path_2file, __pyx_v_file_delimiter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_8count_character(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_x_vector, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter) {
  std::unordered_map<int,std::vector<std::string> >  __pyx_v_result_counts_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  std::vector<std::string>  __pyx_t_8;
  std::string __pyx_t_9;
  std::string __pyx_t_10;
  std::string __pyx_t_11;
  std::unordered_map<int,std::vector<std::string> >  __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("count_character", 0);
  __Pyx_INCREF(__pyx_v_x_vector);
  __Pyx_INCREF(__pyx_v_path_2folder);
  __Pyx_INCREF(__pyx_v_path_2file);

  /* "textTinyPy/textTinyPy.pyx":1552
 *         '''
 * 
 *         if x_vector is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 */
  __pyx_t_1 = (__pyx_v_x_vector != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1554
 *         if x_vector is not None:
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'             # <<<<<<<<<<<<<<
 * 
 *         if path_2folder is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = PyList_Check(__pyx_v_x_vector); 
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_x_vector_parameter_should_be);
        __PYX_ERR(0, 1554, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1552
 *         '''
 * 
 *         if x_vector is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1556
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_path_2folder != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1558
 *         if path_2folder is not None:
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             IF UNAME_SYSNAME == "Windows":
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_IsInstance(__pyx_v_path_2folder, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1558, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul);
        __PYX_ERR(0, 1558, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1566
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_2folder, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1566, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul_2);
        __PYX_ERR(0, 1566, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1556
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1568
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  __pyx_t_1 = (__pyx_v_path_2file != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1570
 *         if path_2file is not None:
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1570, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_path_2file, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1570, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should);
        __PYX_ERR(0, 1570, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1572
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_path_2file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1572, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1572, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1572, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1572, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_INCREF(__pyx_v_path_2file);
          __Pyx_GIVEREF(__pyx_v_path_2file);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_path_2file);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1572, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1572, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should_2);
        __PYX_ERR(0, 1572, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1568
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1574
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_file_delimiter, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_parameter_sho);
      __PYX_ERR(0, 1574, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1576
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'             # <<<<<<<<<<<<<<
 * 
 *         if x_vector is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_7 = PyObject_Length(__pyx_v_file_delimiter); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1576, __pyx_L1_error)
    if (unlikely(!((__pyx_t_7 == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_should_be_a_s);
      __PYX_ERR(0, 1576, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1578
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 * 
 *         if x_vector is None:             # <<<<<<<<<<<<<<
 * 
 *             x_vector = []
 */
  __pyx_t_2 = (__pyx_v_x_vector == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1580
 *         if x_vector is None:
 * 
 *             x_vector = []             # <<<<<<<<<<<<<<
 * 
 *         if path_2folder is None:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_x_vector, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":1578
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 * 
 *         if x_vector is None:             # <<<<<<<<<<<<<<
 * 
 *             x_vector = []
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1582
 *             x_vector = []
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  __pyx_t_1 = (__pyx_v_path_2folder == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1584
 *         if path_2folder is None:
 * 
 *             path_2folder = ""             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is None:
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2folder, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1582
 *             x_vector = []
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1586
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  __pyx_t_2 = (__pyx_v_path_2file == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1588
 *         if path_2file is None:
 * 
 *             path_2file = ""             # <<<<<<<<<<<<<<
 * 
 *         cdef unordered_map[int, vector[string]] result_counts_tmp
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2file, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1586
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1592
 *         cdef unordered_map[int, vector[string]] result_counts_tmp
 * 
 *         result_counts_tmp = self.tks.count_characters(x_vector, path_2folder, path_2file, file_delimiter)             # <<<<<<<<<<<<<<
 * 
 *         self.result_counts = result_counts_tmp
 */
  __pyx_t_8 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_x_vector); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1592, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1592, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1592, __pyx_L1_error)
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1592, __pyx_L1_error)
  try {
    __pyx_t_12 = __pyx_v_self->tks->count_characters(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1592, __pyx_L1_error)
  }
  __pyx_v_result_counts_tmp = __pyx_t_12;

  /* "textTinyPy/textTinyPy.pyx":1594
 *         result_counts_tmp = self.tks.count_characters(x_vector, path_2folder, path_2file, file_delimiter)
 * 
 *         self.result_counts = result_counts_tmp             # <<<<<<<<<<<<<<
 * 
 *         return np.array(list(result_counts_tmp))                         # extract keys() in both python 2 and 3
 */
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_v_result_counts_tmp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->result_counts);
  __Pyx_DECREF(__pyx_v_self->result_counts);
  __pyx_v_self->result_counts = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "textTinyPy/textTinyPy.pyx":1596
 *         self.result_counts = result_counts_tmp
 * 
 *         return np.array(list(result_counts_tmp))                         # extract keys() in both python 2 and 3             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_v_result_counts_tmp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1596, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1596, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1596, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1544
 * 
 * 
 *     def count_character(self, x_vector = None, path_2folder = None, path_2file = None, file_delimiter = "\n"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.count_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x_vector);
  __Pyx_XDECREF(__pyx_v_path_2folder);
  __Pyx_XDECREF(__pyx_v_path_2file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1600
 * 
 * 
 *     def print_count_character(self, number = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_11print_count_character(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_10print_count_character[] = "\n\n        This function should be called after the 'count_character' method is run. Given the numeric parameter 'number' this function \n        \n        prints all the words with number of characters equal to 'number'        \n            \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_11print_count_character(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_number = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_count_character (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_number,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_number);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_count_character") < 0)) __PYX_ERR(0, 1600, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_number = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_count_character", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1600, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.print_count_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_10print_count_character(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_number);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_10print_count_character(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_number) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("print_count_character", 0);

  /* "textTinyPy/textTinyPy.pyx":1610
 *         '''
 * 
 *         assert isinstance(number, int), 'the number parameter should be of type int'             # <<<<<<<<<<<<<<
 * 
 *         assert number in list(self.result_counts), "the specified 'number' is not included in the count_character dictionary. Return the 'count_character()' function to see the list of the available numbers"                   # extract keys() in both python 2 and 3 using list()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_number, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1610, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_number_parameter_should_be_o);
      __PYX_ERR(0, 1610, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1612
 *         assert isinstance(number, int), 'the number parameter should be of type int'
 * 
 *         assert number in list(self.result_counts), "the specified 'number' is not included in the count_character dictionary. Return the 'count_character()' function to see the list of the available numbers"                   # extract keys() in both python 2 and 3 using list()             # <<<<<<<<<<<<<<
 * 
 *         return np.array(self.result_counts[number])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PySequence_List(__pyx_v_self->result_counts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_number, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1612, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_specified_number_is_not_incl);
      __PYX_ERR(0, 1612, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1614
 *         assert number in list(self.result_counts), "the specified 'number' is not included in the count_character dictionary. Return the 'count_character()' function to see the list of the available numbers"                   # extract keys() in both python 2 and 3 using list()
 * 
 *         return np.array(self.result_counts[number])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetItem(__pyx_v_self->result_counts, __pyx_v_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1614, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1614, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1614, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1600
 * 
 * 
 *     def print_count_character(self, number = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.print_count_character", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1618
 * 
 * 
 *     def collocation_words(self, x_vector = None, path_2folder = None, path_2file = None, file_delimiter = "\n", n_gram_delimiter = "_"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_13collocation_words(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_12collocation_words[] = "\n        \n        The collocation_words function saves a co-occurence frequency table for n-grams for EITHER a folder, a file OR a character string list. \n        \n        A collocation is defined as a sequence of two or more consecutive words, that has characteristics of a syntactic and semantic unit, and whose \n        \n        exact and unambiguous meaning or connotation cannot be derived directly from the meaning or connotation of its components ( http://nlp.stanford.edu/fsnlp/promo/colloc.pdf, page 172 ). \n        \n        The input to the function should be text n-grams separated by a delimiter (for instance 3- or 4-ngrams ).\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_13collocation_words(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x_vector = 0;
  PyObject *__pyx_v_path_2folder = 0;
  PyObject *__pyx_v_path_2file = 0;
  PyObject *__pyx_v_file_delimiter = 0;
  PyObject *__pyx_v_n_gram_delimiter = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collocation_words (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x_vector,&__pyx_n_s_path_2folder,&__pyx_n_s_path_2file,&__pyx_n_s_file_delimiter,&__pyx_n_s_n_gram_delimiter,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)__pyx_kp_s_);
    values[4] = ((PyObject *)__pyx_n_s__27);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x_vector);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2folder);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2file);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file_delimiter);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_gram_delimiter);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "collocation_words") < 0)) __PYX_ERR(0, 1618, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_x_vector = values[0];
    __pyx_v_path_2folder = values[1];
    __pyx_v_path_2file = values[2];
    __pyx_v_file_delimiter = values[3];
    __pyx_v_n_gram_delimiter = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("collocation_words", 0, 0, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1618, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.collocation_words", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_12collocation_words(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_x_vector, __pyx_v_path_2folder, __pyx_v_path_2file, __pyx_v_file_delimiter, __pyx_v_n_gram_delimiter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_12collocation_words(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_x_vector, PyObject *__pyx_v_path_2folder, PyObject *__pyx_v_path_2file, PyObject *__pyx_v_file_delimiter, PyObject *__pyx_v_n_gram_delimiter) {
  std::unordered_map<std::string,std::unordered_map<std::string,int> >  __pyx_v_result_coll;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  std::vector<std::string>  __pyx_t_8;
  std::string __pyx_t_9;
  std::string __pyx_t_10;
  std::string __pyx_t_11;
  std::string __pyx_t_12;
  std::unordered_map<std::string,std::unordered_map<std::string,int> >  __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("collocation_words", 0);
  __Pyx_INCREF(__pyx_v_x_vector);
  __Pyx_INCREF(__pyx_v_path_2folder);
  __Pyx_INCREF(__pyx_v_path_2file);

  /* "textTinyPy/textTinyPy.pyx":1632
 *         '''
 * 
 *         if x_vector is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 */
  __pyx_t_1 = (__pyx_v_x_vector != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1634
 *         if x_vector is not None:
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'             # <<<<<<<<<<<<<<
 * 
 *         if path_2folder is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = PyList_Check(__pyx_v_x_vector); 
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_x_vector_parameter_should_be);
        __PYX_ERR(0, 1634, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1632
 *         '''
 * 
 *         if x_vector is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1636
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_path_2folder != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1638
 *         if path_2folder is not None:
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             IF UNAME_SYSNAME == "Windows":
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1638, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_IsInstance(__pyx_v_path_2folder, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1638, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul);
        __PYX_ERR(0, 1638, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1646
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_2folder, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_kp_s__2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1646, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2folder_parameter_shoul_2);
        __PYX_ERR(0, 1646, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1636
 *             assert isinstance(x_vector, list), 'the x_vector parameter should be of type list'
 * 
 *         if path_2folder is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2folder, basestring), 'the path_2folder parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1648
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  __pyx_t_1 = (__pyx_v_path_2file != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1650
 *         if path_2file is not None:
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_path_2file, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1650, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should);
        __PYX_ERR(0, 1650, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1652
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 * 
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_path_2file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1652, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1652, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2file};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1652, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1652, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_INCREF(__pyx_v_path_2file);
          __Pyx_GIVEREF(__pyx_v_path_2file);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_path_2file);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1652, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1652, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2file_parameter_should_2);
        __PYX_ERR(0, 1652, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1648
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"
 * 
 *         if path_2file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2file, basestring), 'the path_2file parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1654
 *             assert os.path.exists(path_2file), "the path_2file parameter should be a valid path to a file"
 * 
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_file_delimiter, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_parameter_sho);
      __PYX_ERR(0, 1654, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1656
 *         assert isinstance(file_delimiter, basestring), 'the file_delimiter parameter should be of type string'
 * 
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_7 = PyObject_Length(__pyx_v_file_delimiter); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1656, __pyx_L1_error)
    if (unlikely(!((__pyx_t_7 == 1) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_file_delimiter_should_be_a_s);
      __PYX_ERR(0, 1656, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1658
 *         assert len(file_delimiter) == 1, 'the file_delimiter should be a single character string'
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         if x_vector is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_n_gram_delimiter, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1658, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_gram_delimiter_parameter_s);
      __PYX_ERR(0, 1658, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1660
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 * 
 *         if x_vector is None:             # <<<<<<<<<<<<<<
 * 
 *             x_vector = []
 */
  __pyx_t_2 = (__pyx_v_x_vector == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1662
 *         if x_vector is None:
 * 
 *             x_vector = []             # <<<<<<<<<<<<<<
 * 
 *         if path_2folder is None:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1662, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_x_vector, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":1660
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 * 
 *         if x_vector is None:             # <<<<<<<<<<<<<<
 * 
 *             x_vector = []
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1664
 *             x_vector = []
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  __pyx_t_1 = (__pyx_v_path_2folder == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1666
 *         if path_2folder is None:
 * 
 *             path_2folder = ""             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is None:
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2folder, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1664
 *             x_vector = []
 * 
 *         if path_2folder is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2folder = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1668
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  __pyx_t_2 = (__pyx_v_path_2file == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1670
 *         if path_2file is None:
 * 
 *             path_2file = ""             # <<<<<<<<<<<<<<
 * 
 *         cdef unordered_map[string, unordered_map[string, int]] result_coll
 */
    __Pyx_INCREF(__pyx_kp_s__2);
    __Pyx_DECREF_SET(__pyx_v_path_2file, __pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1668
 *             path_2folder = ""
 * 
 *         if path_2file is None:             # <<<<<<<<<<<<<<
 * 
 *             path_2file = ""
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1674
 *         cdef unordered_map[string, unordered_map[string, int]] result_coll
 * 
 *         result_coll = self.tks.collocations_ngrams(x_vector, path_2folder, path_2file, file_delimiter, n_gram_delimiter)             # <<<<<<<<<<<<<<
 * 
 *         self.result_collocations = result_coll
 */
  __pyx_t_8 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_x_vector); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1674, __pyx_L1_error)
  __pyx_t_9 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2folder); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1674, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_path_2file); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1674, __pyx_L1_error)
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_file_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1674, __pyx_L1_error)
  __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1674, __pyx_L1_error)
  try {
    __pyx_t_13 = __pyx_v_self->tks->collocations_ngrams(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1674, __pyx_L1_error)
  }
  __pyx_v_result_coll = __pyx_t_13;

  /* "textTinyPy/textTinyPy.pyx":1676
 *         result_coll = self.tks.collocations_ngrams(x_vector, path_2folder, path_2file, file_delimiter, n_gram_delimiter)
 * 
 *         self.result_collocations = result_coll             # <<<<<<<<<<<<<<
 * 
 *         return np.sort(list(result_coll))                       # extract keys() in both python 2 and 3
 */
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___(__pyx_v_result_coll); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->result_collocations);
  __Pyx_DECREF(__pyx_v_self->result_collocations);
  __pyx_v_self->result_collocations = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "textTinyPy/textTinyPy.pyx":1678
 *         self.result_collocations = result_coll
 * 
 *         return np.sort(list(result_coll))                       # extract keys() in both python 2 and 3             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sort); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___(__pyx_v_result_coll); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else
    #endif
    {
      __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1618
 * 
 * 
 *     def collocation_words(self, x_vector = None, path_2folder = None, path_2file = None, file_delimiter = "\n", n_gram_delimiter = "_"):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.collocation_words", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x_vector);
  __Pyx_XDECREF(__pyx_v_path_2folder);
  __Pyx_XDECREF(__pyx_v_path_2file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1682
 * 
 * 
 *     def print_collocations(self, word = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_15print_collocations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_14print_collocations[] = "\n        \n        it prints the collocations for a specific word        \n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_15print_collocations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_word = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_collocations (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_word,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_word);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_collocations") < 0)) __PYX_ERR(0, 1682, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_word = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_collocations", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1682, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.print_collocations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_14print_collocations(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_word);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_14print_collocations(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_word) {
  PyObject *__pyx_v_tmp_vals = NULL;
  PyObject *__pyx_v_tmp_sum = NULL;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("print_collocations", 0);

  /* "textTinyPy/textTinyPy.pyx":1691
 * 
 * 
 *         assert isinstance(word, basestring), 'the word parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert word in list(self.result_collocations), "the specified 'word' is not included in the collocations dictionary. Return the 'collocation_words()' function to see the list of the available words"           # extract keys() in both python 2 and 3 using list()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_word, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_word_parameter_should_be_of);
      __PYX_ERR(0, 1691, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1693
 *         assert isinstance(word, basestring), 'the word parameter should be of type string'
 * 
 *         assert word in list(self.result_collocations), "the specified 'word' is not included in the collocations dictionary. Return the 'collocation_words()' function to see the list of the available words"           # extract keys() in both python 2 and 3 using list()             # <<<<<<<<<<<<<<
 * 
 *         tmp_vals = self.result_collocations[word]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PySequence_List(__pyx_v_self->result_collocations); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_word, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1693, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_specified_word_is_not_includ);
      __PYX_ERR(0, 1693, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1695
 *         assert word in list(self.result_collocations), "the specified 'word' is not included in the collocations dictionary. Return the 'collocation_words()' function to see the list of the available words"           # extract keys() in both python 2 and 3 using list()
 * 
 *         tmp_vals = self.result_collocations[word]             # <<<<<<<<<<<<<<
 * 
 *         tmp_sum = np.sum(listvalues(tmp_vals))
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->result_collocations, __pyx_v_word); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp_vals = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1697
 *         tmp_vals = self.result_collocations[word]
 * 
 *         tmp_sum = np.sum(listvalues(tmp_vals))             # <<<<<<<<<<<<<<
 * 
 *         for (k,v) in iteritems(tmp_vals):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_listvalues); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_6) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_tmp_vals); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_tmp_vals};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_tmp_vals};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_tmp_vals);
      __Pyx_GIVEREF(__pyx_v_tmp_vals);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_tmp_vals);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_tmp_sum = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1699
 *         tmp_sum = np.sum(listvalues(tmp_vals))
 * 
 *         for (k,v) in iteritems(tmp_vals):             # <<<<<<<<<<<<<<
 * 
 *             tmp_vals[k] = float(np.round(v / float(tmp_sum), decimals = 3))                        # first round then use float to get the correct rounding
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_iteritems); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_tmp_vals); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_tmp_vals};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_v_tmp_vals};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_tmp_vals);
      __Pyx_GIVEREF(__pyx_v_tmp_vals);
      PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_tmp_vals);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1699, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 1699, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1699, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1699, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      #if !CYTHON_COMPILING_IN_PYPY
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1699, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_7 = __pyx_t_10(__pyx_t_5); if (unlikely(!__pyx_t_7)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_5), 2) < 0) __PYX_ERR(0, 1699, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1699, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_k, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "textTinyPy/textTinyPy.pyx":1701
 *         for (k,v) in iteritems(tmp_vals):
 * 
 *             tmp_vals[k] = float(np.round(v / float(tmp_sum), decimals = 3))                        # first round then use float to get the correct rounding             # <<<<<<<<<<<<<<
 * 
 *         return tmp_vals
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_round); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_v_tmp_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_v, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_decimals, __pyx_int_3) < 0) __PYX_ERR(0, 1701, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_tmp_vals, __pyx_v_k, __pyx_t_3) < 0)) __PYX_ERR(0, 1701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":1699
 *         tmp_sum = np.sum(listvalues(tmp_vals))
 * 
 *         for (k,v) in iteritems(tmp_vals):             # <<<<<<<<<<<<<<
 * 
 *             tmp_vals[k] = float(np.round(v / float(tmp_sum), decimals = 3))                        # first round then use float to get the correct rounding
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "textTinyPy/textTinyPy.pyx":1703
 *             tmp_vals[k] = float(np.round(v / float(tmp_sum), decimals = 3))                        # first round then use float to get the correct rounding
 * 
 *         return tmp_vals             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tmp_vals);
  __pyx_r = __pyx_v_tmp_vals;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1682
 * 
 * 
 *     def print_collocations(self, word = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.print_collocations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp_vals);
  __Pyx_XDECREF(__pyx_v_tmp_sum);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1707
 * 
 * 
 *     def string_dissimilarity_matrix(self, words_vector = None, dice_n_gram = 2, method = 'dice', split_separator = " ", dice_thresh = 1.0, upper = True, diagonal = True, threads = 1):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_17string_dissimilarity_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_16string_dissimilarity_matrix[] = "\n        \n        The string_dissimilarity_matrix function returns a string-dissimilarity-matrix using either the dice, levenshtein or cosine distance. The input can be a character \n        \n        string list only. In case that the method is dice then the dice-coefficient (similarity) is calculated between two strings for a specific number of character n-grams ( dice_n_gram ).\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_17string_dissimilarity_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_words_vector = 0;
  PyObject *__pyx_v_dice_n_gram = 0;
  PyObject *__pyx_v_method = 0;
  PyObject *__pyx_v_split_separator = 0;
  PyObject *__pyx_v_dice_thresh = 0;
  PyObject *__pyx_v_upper = 0;
  PyObject *__pyx_v_diagonal = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_dissimilarity_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_words_vector,&__pyx_n_s_dice_n_gram,&__pyx_n_s_method,&__pyx_n_s_split_separator,&__pyx_n_s_dice_thresh,&__pyx_n_s_upper,&__pyx_n_s_diagonal,&__pyx_n_s_threads,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_int_2);
    values[2] = ((PyObject *)__pyx_n_s_dice);
    values[3] = ((PyObject *)__pyx_kp_s__5);
    values[4] = ((PyObject *)__pyx_float_1_0);
    values[5] = ((PyObject *)Py_True);
    values[6] = ((PyObject *)Py_True);
    values[7] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_words_vector);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dice_n_gram);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_method);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_split_separator);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dice_thresh);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upper);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_diagonal);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "string_dissimilarity_matrix") < 0)) __PYX_ERR(0, 1707, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_words_vector = values[0];
    __pyx_v_dice_n_gram = values[1];
    __pyx_v_method = values[2];
    __pyx_v_split_separator = values[3];
    __pyx_v_dice_thresh = values[4];
    __pyx_v_upper = values[5];
    __pyx_v_diagonal = values[6];
    __pyx_v_threads = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_dissimilarity_matrix", 0, 0, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1707, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.string_dissimilarity_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_16string_dissimilarity_matrix(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_words_vector, __pyx_v_dice_n_gram, __pyx_v_method, __pyx_v_split_separator, __pyx_v_dice_thresh, __pyx_v_upper, __pyx_v_diagonal, __pyx_v_threads);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_16string_dissimilarity_matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_words_vector, PyObject *__pyx_v_dice_n_gram, PyObject *__pyx_v_method, PyObject *__pyx_v_split_separator, PyObject *__pyx_v_dice_thresh, PyObject *__pyx_v_upper, PyObject *__pyx_v_diagonal, PyObject *__pyx_v_threads) {
  std::vector<std::vector<double> >  __pyx_v_dissim_mat;
  PyObject *__pyx_v_sorted_vec = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  std::vector<std::string>  __pyx_t_8;
  int __pyx_t_9;
  std::string __pyx_t_10;
  std::string __pyx_t_11;
  double __pyx_t_12;
  bool __pyx_t_13;
  bool __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("string_dissimilarity_matrix", 0);

  /* "textTinyPy/textTinyPy.pyx":1717
 *         '''
 * 
 *         assert isinstance(words_vector, list), 'the words_vector parameter should be of type list'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(dice_n_gram, int) and dice_n_gram > 0, 'the dice_n_gram parameter should be of type int and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyList_Check(__pyx_v_words_vector); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_words_vector_parameter_shoul);
      __PYX_ERR(0, 1717, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1719
 *         assert isinstance(words_vector, list), 'the words_vector parameter should be of type list'
 * 
 *         assert isinstance(dice_n_gram, int) and dice_n_gram > 0, 'the dice_n_gram parameter should be of type int and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert method in ["dice", "levenshtein", "cosine"], "available methods are 'dice', 'levenshtein' or 'cosine'"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_dice_n_gram, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1719, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_dice_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1719, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_dice_n_gram_parameter_should);
      __PYX_ERR(0, 1719, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1721
 *         assert isinstance(dice_n_gram, int) and dice_n_gram > 0, 'the dice_n_gram parameter should be of type int and greater than 0'
 * 
 *         assert method in ["dice", "levenshtein", "cosine"], "available methods are 'dice', 'levenshtein' or 'cosine'"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(split_separator, basestring), 'the split_separator parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_method);
    __pyx_t_2 = __pyx_v_method;
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_dice, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1721, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_levenshtein, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1721, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_2, __pyx_n_s_cosine, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1721, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_4;
    __pyx_L5_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_methods_are_dice_leven);
      __PYX_ERR(0, 1721, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1723
 *         assert method in ["dice", "levenshtein", "cosine"], "available methods are 'dice', 'levenshtein' or 'cosine'"
 * 
 *         assert isinstance(split_separator, basestring), 'the split_separator parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(dice_thresh, float) and (dice_thresh <= 1.0 and dice_thresh > 0.0), 'the dice_thresh parameter should be of type float'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_split_separator, __pyx_t_2); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_split_separator_parameter_sh);
      __PYX_ERR(0, 1723, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1725
 *         assert isinstance(split_separator, basestring), 'the split_separator parameter should be of type string'
 * 
 *         assert isinstance(dice_thresh, float) and (dice_thresh <= 1.0 and dice_thresh > 0.0), 'the dice_thresh parameter should be of type float'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(upper, bool), 'the upper parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = PyFloat_Check(__pyx_v_dice_thresh); 
    __pyx_t_3 = (__pyx_t_4 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_dice_thresh, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_dice_thresh, __pyx_float_0_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1725, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_3;
    __pyx_L8_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_dice_thresh_parameter_should);
      __PYX_ERR(0, 1725, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1727
 *         assert isinstance(dice_thresh, float) and (dice_thresh <= 1.0 and dice_thresh > 0.0), 'the dice_thresh parameter should be of type float'
 * 
 *         assert isinstance(upper, bool), 'the upper parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(diagonal, bool), 'the diagonal parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_upper, __pyx_t_2); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1727, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_upper_parameter_should_be_of);
      __PYX_ERR(0, 1727, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1729
 *         assert isinstance(upper, bool), 'the upper parameter should be of type boolean'
 * 
 *         assert isinstance(diagonal, bool), 'the diagonal parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type int and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_diagonal, __pyx_t_2); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1729, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_diagonal_parameter_should_be);
      __PYX_ERR(0, 1729, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1731
 *         assert isinstance(diagonal, bool), 'the diagonal parameter should be of type boolean'
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type int and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[vector[double]] dissim_mat
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L11_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_threads_parameter_should_be_2);
      __PYX_ERR(0, 1731, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1735
 *         cdef vector[vector[double]] dissim_mat
 * 
 *         sorted_vec = list(np.sort(words_vector))             # <<<<<<<<<<<<<<
 * 
 *         dissim_mat = self.tks.dissimilarity_mat(sorted_vec, dice_n_gram, method, split_separator, dice_thresh, upper, diagonal, threads)
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sort); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_words_vector); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_words_vector};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_words_vector};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_words_vector);
      __Pyx_GIVEREF(__pyx_v_words_vector);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_words_vector);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PySequence_List(__pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_sorted_vec = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "textTinyPy/textTinyPy.pyx":1737
 *         sorted_vec = list(np.sort(words_vector))
 * 
 *         dissim_mat = self.tks.dissimilarity_mat(sorted_vec, dice_n_gram, method, split_separator, dice_thresh, upper, diagonal, threads)             # <<<<<<<<<<<<<<
 * 
 *         df = pd.DataFrame(dissim_mat, index = sorted_vec, columns = sorted_vec)
 */
  __pyx_t_8 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_sorted_vec); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_dice_n_gram); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_v_method); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_t_11 = __pyx_convert_string_from_py_std__in_string(__pyx_v_split_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_v_dice_thresh); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_upper); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_diagonal); if (unlikely((__pyx_t_14 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_v_dissim_mat = __pyx_v_self->tks->dissimilarity_mat(__pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15);

  /* "textTinyPy/textTinyPy.pyx":1739
 *         dissim_mat = self.tks.dissimilarity_mat(sorted_vec, dice_n_gram, method, split_separator, dice_thresh, upper, diagonal, threads)
 * 
 *         df = pd.DataFrame(dissim_mat, index = sorted_vec, columns = sorted_vec)             # <<<<<<<<<<<<<<
 * 
 *         return df
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(__pyx_v_dissim_mat); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_index, __pyx_v_sorted_vec) < 0) __PYX_ERR(0, 1739, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_columns, __pyx_v_sorted_vec) < 0) __PYX_ERR(0, 1739, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_df = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "textTinyPy/textTinyPy.pyx":1741
 *         df = pd.DataFrame(dissim_mat, index = sorted_vec, columns = sorted_vec)
 * 
 *         return df             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_df);
  __pyx_r = __pyx_v_df;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1707
 * 
 * 
 *     def string_dissimilarity_matrix(self, words_vector = None, dice_n_gram = 2, method = 'dice', split_separator = " ", dice_thresh = 1.0, upper = True, diagonal = True, threads = 1):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.string_dissimilarity_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sorted_vec);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1745
 * 
 * 
 *     def look_up_table(self, words_vector = None, n_grams = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_19look_up_table(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_18look_up_table[] = "\n        \n        The look_up_table returns a look-up-list where the list-names are the n-grams and the list-vectors are the words associated with those n-grams. \n        \n        The input can be a character string list only.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_19look_up_table(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_words_vector = 0;
  PyObject *__pyx_v_n_grams = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("look_up_table (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_words_vector,&__pyx_n_s_n_grams,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_words_vector);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_grams);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "look_up_table") < 0)) __PYX_ERR(0, 1745, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_words_vector = values[0];
    __pyx_v_n_grams = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("look_up_table", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1745, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.look_up_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_18look_up_table(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_words_vector, __pyx_v_n_grams);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_18look_up_table(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_words_vector, PyObject *__pyx_v_n_grams) {
  std::unordered_map<std::string,std::vector<std::string> >  __pyx_v_look_up_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  std::vector<std::string>  __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("look_up_table", 0);

  /* "textTinyPy/textTinyPy.pyx":1755
 *         '''
 * 
 *         assert isinstance(words_vector, list), 'the words_vector parameter should be of type list'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_grams, int) and n_grams > 0, 'the n_grams parameter should be of type int and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyList_Check(__pyx_v_words_vector); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_words_vector_parameter_shoul);
      __PYX_ERR(0, 1755, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1757
 *         assert isinstance(words_vector, list), 'the words_vector parameter should be of type list'
 * 
 *         assert isinstance(n_grams, int) and n_grams > 0, 'the n_grams parameter should be of type int and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         cdef unordered_map[string, vector[string]] look_up_tmp
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_n_grams, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__pyx_t_3 != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_1 = __pyx_t_4;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_n_grams, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1757, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_4;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_grams_parameter_should_be_2);
      __PYX_ERR(0, 1757, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1761
 *         cdef unordered_map[string, vector[string]] look_up_tmp
 * 
 *         look_up_tmp = self.tks.look_up_tbl(words_vector, n_grams)             # <<<<<<<<<<<<<<
 * 
 *         self.result_look_up_tbl = look_up_tmp
 */
  __pyx_t_5 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_words_vector); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1761, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_n_grams); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1761, __pyx_L1_error)
  __pyx_v_look_up_tmp = __pyx_v_self->tks->look_up_tbl(__pyx_t_5, __pyx_t_6);

  /* "textTinyPy/textTinyPy.pyx":1763
 *         look_up_tmp = self.tks.look_up_tbl(words_vector, n_grams)
 * 
 *         self.result_look_up_tbl = look_up_tmp             # <<<<<<<<<<<<<<
 * 
 *         return np.sort(list(look_up_tmp))                    # extract keys() in both python 2 and 3
 */
  __pyx_t_2 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_v_look_up_tmp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->result_look_up_tbl);
  __Pyx_DECREF(__pyx_v_self->result_look_up_tbl);
  __pyx_v_self->result_look_up_tbl = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":1765
 *         self.result_look_up_tbl = look_up_tmp
 * 
 *         return np.sort(list(look_up_tmp))                    # extract keys() in both python 2 and 3             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sort); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_v_look_up_tmp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_9 = PySequence_List(__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1765, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1765, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
      PyObject *__pyx_temp[2] = {__pyx_t_7, __pyx_t_9};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1765, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    } else
    #endif
    {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1745
 * 
 * 
 *     def look_up_table(self, words_vector = None, n_grams = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.look_up_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1769
 * 
 * 
 *     def print_words_lookup_tbl(self, n_gram = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_21print_words_lookup_tbl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_20print_words_lookup_tbl[] = "\n        \n        returns words associated to n-grams in the look-up-table\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_21print_words_lookup_tbl(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_n_gram = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_words_lookup_tbl (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n_gram,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_gram);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_words_lookup_tbl") < 0)) __PYX_ERR(0, 1769, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_n_gram = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_words_lookup_tbl", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1769, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.print_words_lookup_tbl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11token_stats_20print_words_lookup_tbl(((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)__pyx_v_self), __pyx_v_n_gram);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11token_stats_20print_words_lookup_tbl(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *__pyx_v_self, PyObject *__pyx_v_n_gram) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("print_words_lookup_tbl", 0);

  /* "textTinyPy/textTinyPy.pyx":1777
 *         '''
 * 
 *         assert isinstance(n_gram, basestring), 'the n_gram parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert n_gram in list(self.result_look_up_tbl), "the specified 'n_gram' is not included in the look_up_table dictionary. Return the 'look_up_table()' function to see the list of the available n_grams"          # extract keys() in both python 2 and 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_n_gram, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1777, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_gram_parameter_should_be_o);
      __PYX_ERR(0, 1777, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1779
 *         assert isinstance(n_gram, basestring), 'the n_gram parameter should be of type string'
 * 
 *         assert n_gram in list(self.result_look_up_tbl), "the specified 'n_gram' is not included in the look_up_table dictionary. Return the 'look_up_table()' function to see the list of the available n_grams"          # extract keys() in both python 2 and 3             # <<<<<<<<<<<<<<
 * 
 *         return np.array(self.result_look_up_tbl[n_gram])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PySequence_List(__pyx_v_self->result_look_up_tbl); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_n_gram, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1779, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_specified_n_gram_is_not_incl);
      __PYX_ERR(0, 1779, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1781
 *         assert n_gram in list(self.result_look_up_tbl), "the specified 'n_gram' is not included in the look_up_table dictionary. Return the 'look_up_table()' function to see the list of the available n_grams"          # extract keys() in both python 2 and 3
 * 
 *         return np.array(self.result_look_up_tbl[n_gram])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetItem(__pyx_v_self->result_look_up_tbl, __pyx_v_n_gram); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1781, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":1769
 * 
 * 
 *     def print_words_lookup_tbl(self, n_gram = None):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.token_stats.print_words_lookup_tbl", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1813
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.dtm = new term_matrix()
 */

/* Python wrapper */
static int __pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix___cinit__(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix___cinit__(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "textTinyPy/textTinyPy.pyx":1815
 *     def __cinit__(self):
 * 
 *         self.dtm = new term_matrix()             # <<<<<<<<<<<<<<
 * 
 *         self.FLAG_output_long = False
 */
  __pyx_v_self->dtm = new term_matrix();

  /* "textTinyPy/textTinyPy.pyx":1817
 *         self.dtm = new term_matrix()
 * 
 *         self.FLAG_output_long = False             # <<<<<<<<<<<<<<
 * 
 *         self.FLAG_doc_term_mat = False
 */
  __pyx_v_self->FLAG_output_long = 0;

  /* "textTinyPy/textTinyPy.pyx":1819
 *         self.FLAG_output_long = False
 * 
 *         self.FLAG_doc_term_mat = False             # <<<<<<<<<<<<<<
 * 
 *         self.tf_idf_flag = False
 */
  __pyx_v_self->FLAG_doc_term_mat = 0;

  /* "textTinyPy/textTinyPy.pyx":1821
 *         self.FLAG_doc_term_mat = False
 * 
 *         self.tf_idf_flag = False             # <<<<<<<<<<<<<<
 * 
 *         self.dtm_or_tdm = False
 */
  __pyx_v_self->tf_idf_flag = 0;

  /* "textTinyPy/textTinyPy.pyx":1823
 *         self.tf_idf_flag = False
 * 
 *         self.dtm_or_tdm = False             # <<<<<<<<<<<<<<
 * 
 *         self.sp_mat = None
 */
  __pyx_v_self->dtm_or_tdm = 0;

  /* "textTinyPy/textTinyPy.pyx":1825
 *         self.dtm_or_tdm = False
 * 
 *         self.sp_mat = None             # <<<<<<<<<<<<<<
 * 
 *         self.result_struct_matrix = {}
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->sp_mat);
  __Pyx_DECREF(__pyx_v_self->sp_mat);
  __pyx_v_self->sp_mat = Py_None;

  /* "textTinyPy/textTinyPy.pyx":1827
 *         self.sp_mat = None
 * 
 *         self.result_struct_matrix = {}             # <<<<<<<<<<<<<<
 * 
 *         self.adjust_sparsity_matrix = {}
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->result_struct_matrix);
  __Pyx_DECREF(__pyx_v_self->result_struct_matrix);
  __pyx_v_self->result_struct_matrix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1829
 *         self.result_struct_matrix = {}
 * 
 *         self.adjust_sparsity_matrix = {}             # <<<<<<<<<<<<<<
 * 
 *         self.dims = []
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->adjust_sparsity_matrix);
  __Pyx_DECREF(__pyx_v_self->adjust_sparsity_matrix);
  __pyx_v_self->adjust_sparsity_matrix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1831
 *         self.adjust_sparsity_matrix = {}
 * 
 *         self.dims = []             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->dims);
  __Pyx_DECREF(__pyx_v_self->dims);
  __pyx_v_self->dims = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":1813
 * 
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 * 
 *         self.dtm = new term_matrix()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":1834
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.dtm
 */

/* Python wrapper */
static void __pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_2__dealloc__(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_2__dealloc__(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "textTinyPy/textTinyPy.pyx":1836
 *     def __dealloc__(self):
 * 
 *         del self.dtm             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->dtm;

  /* "textTinyPy/textTinyPy.pyx":1834
 * 
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 * 
 *         del self.dtm
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "textTinyPy/textTinyPy.pyx":1840
 * 
 * 
 *     def Term_Matrix(self, vector_documents = None, path_2documents_file = None, sort_terms = False, LOCALE_UTF = "", to_lower = False, to_upper = False,             # <<<<<<<<<<<<<<
 * 
 *                     language = "english", REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_5Term_Matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_4Term_Matrix[] = "\n        \n        The Term_Matrix function takes either a character vector of strings or a text file and after tokenization and transformation saves the terms, row-indices, column-indices and counts\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_5Term_Matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vector_documents = 0;
  PyObject *__pyx_v_path_2documents_file = 0;
  PyObject *__pyx_v_sort_terms = 0;
  PyObject *__pyx_v_LOCALE_UTF = 0;
  PyObject *__pyx_v_to_lower = 0;
  PyObject *__pyx_v_to_upper = 0;
  PyObject *__pyx_v_language = 0;
  PyObject *__pyx_v_REMOVE_characters = 0;
  PyObject *__pyx_v_remove_punctuation_string = 0;
  PyObject *__pyx_v_remove_numbers = 0;
  PyObject *__pyx_v_trim_token = 0;
  PyObject *__pyx_v_split_string = 0;
  PyObject *__pyx_v_separator = 0;
  PyObject *__pyx_v_remove_punctuation_vector = 0;
  PyObject *__pyx_v_remove_stopwords = 0;
  PyObject *__pyx_v_min_num_char = 0;
  PyObject *__pyx_v_max_num_char = 0;
  PyObject *__pyx_v_stemmer = 0;
  PyObject *__pyx_v_min_n_gram = 0;
  PyObject *__pyx_v_max_n_gram = 0;
  PyObject *__pyx_v_skip_n_gram = 0;
  PyObject *__pyx_v_skip_distance = 0;
  PyObject *__pyx_v_n_gram_delimiter = 0;
  PyObject *__pyx_v_stemmer_ngram = 0;
  PyObject *__pyx_v_stemmer_gamma = 0;
  PyObject *__pyx_v_stemmer_truncate = 0;
  PyObject *__pyx_v_stemmer_batches = 0;
  PyObject *__pyx_v_print_every_rows = 0;
  PyObject *__pyx_v_normalize = 0;
  PyObject *__pyx_v_tf_idf = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Term_Matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vector_documents,&__pyx_n_s_path_2documents_file,&__pyx_n_s_sort_terms,&__pyx_n_s_LOCALE_UTF,&__pyx_n_s_to_lower,&__pyx_n_s_to_upper,&__pyx_n_s_language,&__pyx_n_s_REMOVE_characters,&__pyx_n_s_remove_punctuation_string,&__pyx_n_s_remove_numbers,&__pyx_n_s_trim_token,&__pyx_n_s_split_string,&__pyx_n_s_separator,&__pyx_n_s_remove_punctuation_vector,&__pyx_n_s_remove_stopwords,&__pyx_n_s_min_num_char,&__pyx_n_s_max_num_char,&__pyx_n_s_stemmer,&__pyx_n_s_min_n_gram,&__pyx_n_s_max_n_gram,&__pyx_n_s_skip_n_gram,&__pyx_n_s_skip_distance,&__pyx_n_s_n_gram_delimiter,&__pyx_n_s_stemmer_ngram,&__pyx_n_s_stemmer_gamma,&__pyx_n_s_stemmer_truncate,&__pyx_n_s_stemmer_batches,&__pyx_n_s_print_every_rows,&__pyx_n_s_normalize,&__pyx_n_s_tf_idf,&__pyx_n_s_threads,&__pyx_n_s_verbose,0};
    PyObject* values[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_False);
    values[3] = ((PyObject *)__pyx_kp_s__2);
    values[4] = ((PyObject *)Py_False);
    values[5] = ((PyObject *)Py_False);
    values[6] = ((PyObject *)__pyx_n_s_english);
    values[7] = ((PyObject *)__pyx_kp_s__2);

    /* "textTinyPy/textTinyPy.pyx":1842
 *     def Term_Matrix(self, vector_documents = None, path_2documents_file = None, sort_terms = False, LOCALE_UTF = "", to_lower = False, to_upper = False,
 * 
 *                     language = "english", REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False,             # <<<<<<<<<<<<<<
 * 
 *                     split_string = True, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,  min_num_char = 1,
 */
    values[8] = ((PyObject *)Py_False);
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_False);

    /* "textTinyPy/textTinyPy.pyx":1844
 *                     language = "english", REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False,
 * 
 *                     split_string = True, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,  min_num_char = 1,             # <<<<<<<<<<<<<<
 * 
 *                     max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ",
 */
    values[11] = ((PyObject *)Py_True);
    values[12] = ((PyObject *)__pyx_kp_s__3);
    values[13] = ((PyObject *)Py_False);
    values[14] = ((PyObject *)Py_False);
    values[15] = ((PyObject *)__pyx_int_1);
    values[16] = __pyx_k__29;

    /* "textTinyPy/textTinyPy.pyx":1846
 *                     split_string = True, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,  min_num_char = 1,
 * 
 *                     max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ",             # <<<<<<<<<<<<<<
 * 
 *                     stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, print_every_rows = 1000, normalize = None, tf_idf = False,
 */
    values[17] = ((PyObject *)Py_None);
    values[18] = ((PyObject *)__pyx_int_1);
    values[19] = ((PyObject *)__pyx_int_1);
    values[20] = ((PyObject *)__pyx_int_1);
    values[21] = ((PyObject *)__pyx_int_0);
    values[22] = ((PyObject *)__pyx_kp_s__5);
    values[23] = ((PyObject *)__pyx_int_4);
    values[24] = ((PyObject *)__pyx_float_0_0);
    values[25] = ((PyObject *)__pyx_int_3);
    values[26] = ((PyObject *)__pyx_int_1);
    values[27] = ((PyObject *)__pyx_int_1000);

    /* "textTinyPy/textTinyPy.pyx":1848
 *                     max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ",
 * 
 *                     stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, print_every_rows = 1000, normalize = None, tf_idf = False,             # <<<<<<<<<<<<<<
 * 
 *                     threads = 1, verbose = False):
 */
    values[28] = ((PyObject *)Py_None);
    values[29] = ((PyObject *)Py_False);
    values[30] = ((PyObject *)__pyx_int_1);

    /* "textTinyPy/textTinyPy.pyx":1850
 *                     stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, print_every_rows = 1000, normalize = None, tf_idf = False,
 * 
 *                     threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */
    values[31] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_vector_documents);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_2documents_file);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sort_terms);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_LOCALE_UTF);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_lower);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_upper);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_language);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_REMOVE_characters);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_string);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_numbers);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_trim_token);
          if (value) { values[10] = value; kw_args--; }
        }
        case 11:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_split_string);
          if (value) { values[11] = value; kw_args--; }
        }
        case 12:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_separator);
          if (value) { values[12] = value; kw_args--; }
        }
        case 13:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_punctuation_vector);
          if (value) { values[13] = value; kw_args--; }
        }
        case 14:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_remove_stopwords);
          if (value) { values[14] = value; kw_args--; }
        }
        case 15:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_num_char);
          if (value) { values[15] = value; kw_args--; }
        }
        case 16:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_num_char);
          if (value) { values[16] = value; kw_args--; }
        }
        case 17:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer);
          if (value) { values[17] = value; kw_args--; }
        }
        case 18:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_n_gram);
          if (value) { values[18] = value; kw_args--; }
        }
        case 19:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_n_gram);
          if (value) { values[19] = value; kw_args--; }
        }
        case 20:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_n_gram);
          if (value) { values[20] = value; kw_args--; }
        }
        case 21:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_skip_distance);
          if (value) { values[21] = value; kw_args--; }
        }
        case 22:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_gram_delimiter);
          if (value) { values[22] = value; kw_args--; }
        }
        case 23:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_ngram);
          if (value) { values[23] = value; kw_args--; }
        }
        case 24:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_gamma);
          if (value) { values[24] = value; kw_args--; }
        }
        case 25:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_truncate);
          if (value) { values[25] = value; kw_args--; }
        }
        case 26:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stemmer_batches);
          if (value) { values[26] = value; kw_args--; }
        }
        case 27:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_print_every_rows);
          if (value) { values[27] = value; kw_args--; }
        }
        case 28:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_normalize);
          if (value) { values[28] = value; kw_args--; }
        }
        case 29:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tf_idf);
          if (value) { values[29] = value; kw_args--; }
        }
        case 30:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[30] = value; kw_args--; }
        }
        case 31:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[31] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Term_Matrix") < 0)) __PYX_ERR(0, 1840, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 32: values[31] = PyTuple_GET_ITEM(__pyx_args, 31);
        case 31: values[30] = PyTuple_GET_ITEM(__pyx_args, 30);
        case 30: values[29] = PyTuple_GET_ITEM(__pyx_args, 29);
        case 29: values[28] = PyTuple_GET_ITEM(__pyx_args, 28);
        case 28: values[27] = PyTuple_GET_ITEM(__pyx_args, 27);
        case 27: values[26] = PyTuple_GET_ITEM(__pyx_args, 26);
        case 26: values[25] = PyTuple_GET_ITEM(__pyx_args, 25);
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vector_documents = values[0];
    __pyx_v_path_2documents_file = values[1];
    __pyx_v_sort_terms = values[2];
    __pyx_v_LOCALE_UTF = values[3];
    __pyx_v_to_lower = values[4];
    __pyx_v_to_upper = values[5];
    __pyx_v_language = values[6];
    __pyx_v_REMOVE_characters = values[7];
    __pyx_v_remove_punctuation_string = values[8];
    __pyx_v_remove_numbers = values[9];
    __pyx_v_trim_token = values[10];
    __pyx_v_split_string = values[11];
    __pyx_v_separator = values[12];
    __pyx_v_remove_punctuation_vector = values[13];
    __pyx_v_remove_stopwords = values[14];
    __pyx_v_min_num_char = values[15];
    __pyx_v_max_num_char = values[16];
    __pyx_v_stemmer = values[17];
    __pyx_v_min_n_gram = values[18];
    __pyx_v_max_n_gram = values[19];
    __pyx_v_skip_n_gram = values[20];
    __pyx_v_skip_distance = values[21];
    __pyx_v_n_gram_delimiter = values[22];
    __pyx_v_stemmer_ngram = values[23];
    __pyx_v_stemmer_gamma = values[24];
    __pyx_v_stemmer_truncate = values[25];
    __pyx_v_stemmer_batches = values[26];
    __pyx_v_print_every_rows = values[27];
    __pyx_v_normalize = values[28];
    __pyx_v_tf_idf = values[29];
    __pyx_v_threads = values[30];
    __pyx_v_verbose = values[31];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Term_Matrix", 0, 0, 32, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1840, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.Term_Matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_4Term_Matrix(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self), __pyx_v_vector_documents, __pyx_v_path_2documents_file, __pyx_v_sort_terms, __pyx_v_LOCALE_UTF, __pyx_v_to_lower, __pyx_v_to_upper, __pyx_v_language, __pyx_v_REMOVE_characters, __pyx_v_remove_punctuation_string, __pyx_v_remove_numbers, __pyx_v_trim_token, __pyx_v_split_string, __pyx_v_separator, __pyx_v_remove_punctuation_vector, __pyx_v_remove_stopwords, __pyx_v_min_num_char, __pyx_v_max_num_char, __pyx_v_stemmer, __pyx_v_min_n_gram, __pyx_v_max_n_gram, __pyx_v_skip_n_gram, __pyx_v_skip_distance, __pyx_v_n_gram_delimiter, __pyx_v_stemmer_ngram, __pyx_v_stemmer_gamma, __pyx_v_stemmer_truncate, __pyx_v_stemmer_batches, __pyx_v_print_every_rows, __pyx_v_normalize, __pyx_v_tf_idf, __pyx_v_threads, __pyx_v_verbose);

  /* "textTinyPy/textTinyPy.pyx":1840
 * 
 * 
 *     def Term_Matrix(self, vector_documents = None, path_2documents_file = None, sort_terms = False, LOCALE_UTF = "", to_lower = False, to_upper = False,             # <<<<<<<<<<<<<<
 * 
 *                     language = "english", REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_4Term_Matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_vector_documents, PyObject *__pyx_v_path_2documents_file, PyObject *__pyx_v_sort_terms, PyObject *__pyx_v_LOCALE_UTF, PyObject *__pyx_v_to_lower, PyObject *__pyx_v_to_upper, PyObject *__pyx_v_language, PyObject *__pyx_v_REMOVE_characters, PyObject *__pyx_v_remove_punctuation_string, PyObject *__pyx_v_remove_numbers, PyObject *__pyx_v_trim_token, PyObject *__pyx_v_split_string, PyObject *__pyx_v_separator, PyObject *__pyx_v_remove_punctuation_vector, PyObject *__pyx_v_remove_stopwords, PyObject *__pyx_v_min_num_char, PyObject *__pyx_v_max_num_char, PyObject *__pyx_v_stemmer, PyObject *__pyx_v_min_n_gram, PyObject *__pyx_v_max_n_gram, PyObject *__pyx_v_skip_n_gram, PyObject *__pyx_v_skip_distance, PyObject *__pyx_v_n_gram_delimiter, PyObject *__pyx_v_stemmer_ngram, PyObject *__pyx_v_stemmer_gamma, PyObject *__pyx_v_stemmer_truncate, PyObject *__pyx_v_stemmer_batches, PyObject *__pyx_v_print_every_rows, PyObject *__pyx_v_normalize, PyObject *__pyx_v_tf_idf, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_resource_path = NULL;
  PyObject *__pyx_v_path_stopw = NULL;
  PyObject *__pyx_v_dat_stopw = NULL;
  PyObject *__pyx_v_array_stopw = NULL;
  PyObject *__pyx_v_list_stopw = NULL;
  PyObject *__pyx_v_tmp_flag = NULL;
  PyObject *__pyx_v_tmp_VEC = NULL;
  PyObject *__pyx_v_tmp_FILE = NULL;
  struct struct_term_matrix __pyx_v_result_struct_long;
  struct struct_term_matrix_double __pyx_v_result_struct_double;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  bool __pyx_t_13;
  std::vector<std::string>  __pyx_t_14;
  std::vector<std::string>  __pyx_t_15;
  std::string __pyx_t_16;
  std::string __pyx_t_17;
  PY_LONG_LONG __pyx_t_18;
  std::string __pyx_t_19;
  std::string __pyx_t_20;
  bool __pyx_t_21;
  bool __pyx_t_22;
  bool __pyx_t_23;
  bool __pyx_t_24;
  bool __pyx_t_25;
  bool __pyx_t_26;
  bool __pyx_t_27;
  std::string __pyx_t_28;
  bool __pyx_t_29;
  std::string __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  std::string __pyx_t_35;
  int __pyx_t_36;
  double __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  int __pyx_t_40;
  bool __pyx_t_41;
  PY_LONG_LONG __pyx_t_42;
  std::string __pyx_t_43;
  bool __pyx_t_44;
  __Pyx_RefNannySetupContext("Term_Matrix", 0);
  __Pyx_INCREF(__pyx_v_remove_stopwords);
  __Pyx_INCREF(__pyx_v_max_num_char);
  __Pyx_INCREF(__pyx_v_stemmer);
  __Pyx_INCREF(__pyx_v_normalize);

  /* "textTinyPy/textTinyPy.pyx":1858
 *         '''
 * 
 *         if vector_documents is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vector_documents, list), 'the vector_documents parameter should be of type list'
 */
  __pyx_t_1 = (__pyx_v_vector_documents != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1860
 *         if vector_documents is not None:
 * 
 *             assert isinstance(vector_documents, list), 'the vector_documents parameter should be of type list'             # <<<<<<<<<<<<<<
 * 
 *         if path_2documents_file is not None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = PyList_Check(__pyx_v_vector_documents); 
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_vector_documents_parameter_s);
        __PYX_ERR(0, 1860, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1858
 *         '''
 * 
 *         if vector_documents is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(vector_documents, list), 'the vector_documents parameter should be of type list'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1862
 *             assert isinstance(vector_documents, list), 'the vector_documents parameter should be of type list'
 * 
 *         if path_2documents_file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2documents_file, basestring), 'the path_2documents_file parameter should be of type string'
 */
  __pyx_t_2 = (__pyx_v_path_2documents_file != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1864
 *         if path_2documents_file is not None:
 * 
 *             assert isinstance(path_2documents_file, basestring), 'the path_2documents_file parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert os.path.exists(path_2documents_file), "the path_2documents_file parameter should be a valid path to a file"
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_IsInstance(__pyx_v_path_2documents_file, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1864, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_1 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2documents_file_paramet);
        __PYX_ERR(0, 1864, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1866
 *             assert isinstance(path_2documents_file, basestring), 'the path_2documents_file parameter should be of type string'
 * 
 *             assert os.path.exists(path_2documents_file), "the path_2documents_file parameter should be a valid path to a file"             # <<<<<<<<<<<<<<
 * 
 *         if (vector_documents is None) and (path_2documents_file is None):
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_path_2documents_file); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2documents_file};
          __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_v_path_2documents_file};
          __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1866, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_INCREF(__pyx_v_path_2documents_file);
          __Pyx_GIVEREF(__pyx_v_path_2documents_file);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_path_2documents_file);
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1866, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_path_2documents_file_paramet_2);
        __PYX_ERR(0, 1866, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1862
 *             assert isinstance(vector_documents, list), 'the vector_documents parameter should be of type list'
 * 
 *         if path_2documents_file is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(path_2documents_file, basestring), 'the path_2documents_file parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1868
 *             assert os.path.exists(path_2documents_file), "the path_2documents_file parameter should be a valid path to a file"
 * 
 *         if (vector_documents is None) and (path_2documents_file is None):             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be None but not both"))
 */
  __pyx_t_2 = (__pyx_v_vector_documents == Py_None);
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_7 = (__pyx_v_path_2documents_file == Py_None);
  __pyx_t_2 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1870
 *         if (vector_documents is None) and (path_2documents_file is None):
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be None but not both"))             # <<<<<<<<<<<<<<
 * 
 *         if (vector_documents is not None) and (path_2documents_file is not None):
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1870, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":1868
 *             assert os.path.exists(path_2documents_file), "the path_2documents_file parameter should be a valid path to a file"
 * 
 *         if (vector_documents is None) and (path_2documents_file is None):             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be None but not both"))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1872
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be None but not both"))
 * 
 *         if (vector_documents is not None) and (path_2documents_file is not None):             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be NOT None but not both"))
 */
  __pyx_t_2 = (__pyx_v_vector_documents != Py_None);
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_7 = (__pyx_v_path_2documents_file != Py_None);
  __pyx_t_2 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1874
 *         if (vector_documents is not None) and (path_2documents_file is not None):
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be NOT None but not both"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(sort_terms, bool), 'the sort_terms parameter should be of type boolean'
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1874, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1874, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1874, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1874, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":1872
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be None but not both"))
 * 
 *         if (vector_documents is not None) and (path_2documents_file is not None):             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be NOT None but not both"))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1876
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be NOT None but not both"))
 * 
 *         assert isinstance(sort_terms, bool), 'the sort_terms parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_sort_terms, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_sort_terms_parameter_should);
      __PYX_ERR(0, 1876, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1878
 *         assert isinstance(sort_terms, bool), 'the sort_terms parameter should be of type boolean'
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_LOCALE_UTF, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1878, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_LOCALE_UTF_parameter_should);
      __PYX_ERR(0, 1878, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1880
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 * 
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_to_lower, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1880, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_lower_parameter_should_be);
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1882
 *         assert isinstance(to_lower, bool), 'the to_lower parameter should be of type boolean'
 * 
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_to_upper, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1882, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_upper_parameter_should_be);
      __PYX_ERR(0, 1882, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1884
 *         assert isinstance(to_upper, bool), 'the to_upper parameter should be of type boolean'
 * 
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_REMOVE_characters, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1884, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_REMOVE_characters_parameter);
      __PYX_ERR(0, 1884, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1886
 *         assert isinstance(REMOVE_characters, basestring), 'the REMOVE_characters parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_punctuation_string, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_string_pa);
      __PYX_ERR(0, 1886, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1888
 *         assert isinstance(remove_punctuation_string, bool), 'the remove_punctuation_string parameter should be of type boolean'
 * 
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_numbers, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_numbers_parameter_sho);
      __PYX_ERR(0, 1888, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1890
 *         assert isinstance(remove_numbers, bool), 'the remove_numbers parameter should be of type boolean'
 * 
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_trim_token, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1890, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_trim_token_parameter_should);
      __PYX_ERR(0, 1890, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1892
 *         assert isinstance(trim_token, bool), 'the trim_token parameter should be of type boolean'
 * 
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_split_string, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1892, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_split_string_parameter_shoul);
      __PYX_ERR(0, 1892, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1894
 *         assert isinstance(split_string, bool), 'the split_string parameter should be of type boolean'
 * 
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_separator, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1894, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_separator_parameter_should_b);
      __PYX_ERR(0, 1894, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1896
 *         assert isinstance(separator, basestring), 'the separator parameter should be of type string'
 * 
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_punctuation_vector, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1896, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_remove_punctuation_vector_pa);
      __PYX_ERR(0, 1896, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1898
 *         assert isinstance(remove_punctuation_vector, bool), 'the remove_punctuation_vector parameter should be of type boolean'
 * 
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_language, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_language_parameter_should_be);
      __PYX_ERR(0, 1898, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1900
 *         assert isinstance(language, basestring), 'the language parameter should be of type string'
 * 
 *         assert language in ["afrikaans", "arabic", "armenian", "basque", "bengali", "breton", "bulgarian", "catalan", "croatian", "czech", "danish", "dutch", "english",             # <<<<<<<<<<<<<<
 *                             "estonian", "finnish", "french","galician", "german", "greek", "hausa", "hebrew", "hindi", "hungarian", "indonesian", "irish", "italian",
 *                             "latvian", "marathi", "norwegian", "persian", "polish", "portuguese", "romanian", "russian", "slovak", "slovenian", "somalia", "spanish",
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __Pyx_INCREF(__pyx_v_language);
    __pyx_t_3 = __pyx_v_language;
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_afrikaans, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_arabic, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_armenian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_basque, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_bengali, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_breton, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_bulgarian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_catalan, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_croatian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_czech, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_danish, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_dutch, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_english, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_estonian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_finnish, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_french, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_galician, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_german, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_greek, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hausa, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hebrew, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hindi, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_hungarian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_indonesian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_irish, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_italian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_latvian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_marathi, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_norwegian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_persian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_polish, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_portuguese, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_romanian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_russian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_slovak, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_slovenian, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_somalia, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_spanish, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_swahili, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_swedish, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_turkish, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_yoruba, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_zulu, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1900, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_languages_in_case_of_s);
      __PYX_ERR(0, 1900, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1911
 *                                                                                 \
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
  __pyx_t_3 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_remove_stopwords, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1913
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1913, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "textTinyPy/textTinyPy.pyx":1921
 *                 ELSE:
 * 
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))             # <<<<<<<<<<<<<<
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 */
      __pyx_t_3 = PyNumber_Add(__pyx_v_language, __pyx_kp_s_txt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_n_s_stopwords);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_stopwords);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyString_Join(__pyx_kp_s__6, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_resource_path = ((PyObject*)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":1923
 *                     resource_path = '/'.join(('stopwords', language + '.txt'))
 * 
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)             # <<<<<<<<<<<<<<
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_pkg_resources); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_resource_filename); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1923, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_s_textTinyPy, __pyx_v_resource_path};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_4) {
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
        }
        __Pyx_INCREF(__pyx_n_s_textTinyPy);
        __Pyx_GIVEREF(__pyx_n_s_textTinyPy);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_9, __pyx_n_s_textTinyPy);
        __Pyx_INCREF(__pyx_v_resource_path);
        __Pyx_GIVEREF(__pyx_v_resource_path);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_9, __pyx_v_resource_path);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1923, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_path_stopw = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "textTinyPy/textTinyPy.pyx":1925
 *                 path_stopw = pkg_resources.resource_filename('textTinyPy', resource_path)
 * 
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)             # <<<<<<<<<<<<<<
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_read_csv); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_path_stopw);
      __Pyx_GIVEREF(__pyx_v_path_stopw);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_path_stopw);
      __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_header, Py_None) < 0) __PYX_ERR(0, 1925, __pyx_L1_error)
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_dat_stopw = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "textTinyPy/textTinyPy.pyx":1927
 *                 dat_stopw = pd.read_csv(path_stopw, header = None)
 * 
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw = [i[0] for i in array_stopw]
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_dat_stopw, __pyx_n_s_as_matrix); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_columns, Py_None) < 0) __PYX_ERR(0, 1927, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1927, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1927, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1927, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_array_stopw = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "textTinyPy/textTinyPy.pyx":1929
 *                 array_stopw = np.array(dat_stopw.as_matrix(columns=None))
 * 
 *                 list_stopw = [i[0] for i in array_stopw]             # <<<<<<<<<<<<<<
 * 
 *                 list_stopw.append("")
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1929, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (likely(PyList_CheckExact(__pyx_v_array_stopw)) || PyTuple_CheckExact(__pyx_v_array_stopw)) {
        __pyx_t_3 = __pyx_v_array_stopw; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_array_stopw); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1929, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1929, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1929, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 1929, __pyx_L1_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1929, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_11(__pyx_t_3);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1929, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_i, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1929, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1929, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_list_stopw = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "textTinyPy/textTinyPy.pyx":1931
 *                 list_stopw = [i[0] for i in array_stopw]
 * 
 *                 list_stopw.append("")             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_list_stopw, __pyx_kp_s__2); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 1931, __pyx_L1_error)

      /* "textTinyPy/textTinyPy.pyx":1913
 *         if isinstance(remove_stopwords, bool):
 * 
 *             if remove_stopwords:             # <<<<<<<<<<<<<<
 * 
 *                 IF UNAME_SYSNAME == "Windows":
 */
      goto __pyx_L55;
    }

    /* "textTinyPy/textTinyPy.pyx":1935
 *             else:
 * 
 *                 list_stopw = []             # <<<<<<<<<<<<<<
 * 
 *         elif isinstance(remove_stopwords, list):
 */
    /*else*/ {
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1935, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_list_stopw = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __pyx_L55:;

    /* "textTinyPy/textTinyPy.pyx":1911
 *                                                                                 \
 *                                                                                 A user defined character list of stop words can be used as input, if the target language is not included"
 *         if isinstance(remove_stopwords, bool):             # <<<<<<<<<<<<<<
 * 
 *             if remove_stopwords:
 */
    goto __pyx_L54;
  }

  /* "textTinyPy/textTinyPy.pyx":1937
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
  __pyx_t_2 = PyList_Check(__pyx_v_remove_stopwords); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1939
 *         elif isinstance(remove_stopwords, list):
 * 
 *             list_stopw = remove_stopwords             # <<<<<<<<<<<<<<
 * 
 *             remove_stopwords = True
 */
    __Pyx_INCREF(__pyx_v_remove_stopwords);
    __pyx_v_list_stopw = __pyx_v_remove_stopwords;

    /* "textTinyPy/textTinyPy.pyx":1941
 *             list_stopw = remove_stopwords
 * 
 *             remove_stopwords = True             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_INCREF(Py_True);
    __Pyx_DECREF_SET(__pyx_v_remove_stopwords, Py_True);

    /* "textTinyPy/textTinyPy.pyx":1937
 *                 list_stopw = []
 * 
 *         elif isinstance(remove_stopwords, list):             # <<<<<<<<<<<<<<
 * 
 *             list_stopw = remove_stopwords
 */
    goto __pyx_L54;
  }

  /* "textTinyPy/textTinyPy.pyx":1945
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1945, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1945, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1945, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1945, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1945, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_L54:;

  /* "textTinyPy/textTinyPy.pyx":1947
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_min_num_char, __pyx_t_4); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1947, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L58_bool_binop_done;
    }
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_min_num_char, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1947, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1947, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L58_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_num_char_parameter_shoul);
      __PYX_ERR(0, 1947, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1949
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'             # <<<<<<<<<<<<<<
 * 
 *         if max_num_char == MAX_VAL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_max_num_char, __pyx_t_4); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L60_bool_binop_done;
    }
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_v_min_num_char, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L60_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_num_char_parameter_shoul);
      __PYX_ERR(0, 1949, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1951
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_num_char, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1953
 *         if max_num_char == MAX_VAL:
 * 
 *             max_num_char = 1000000000             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
    __Pyx_INCREF(__pyx_int_1000000000);
    __Pyx_DECREF_SET(__pyx_v_max_num_char, __pyx_int_1000000000);

    /* "textTinyPy/textTinyPy.pyx":1951
 *         assert isinstance(max_num_char, int) and max_num_char > min_num_char, 'the max_num_char parameter should be of type integer and greater than the min_num_char'
 * 
 *         if max_num_char == MAX_VAL:             # <<<<<<<<<<<<<<
 * 
 *             max_num_char = 1000000000
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1955
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  __pyx_t_1 = (__pyx_v_stemmer != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1957
 *         if stemmer is not None:
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1957, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyObject_IsInstance(__pyx_v_stemmer, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1957, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_parameter_should_be);
        __PYX_ERR(0, 1957, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1959
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 * 
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __Pyx_INCREF(__pyx_v_stemmer);
      __pyx_t_3 = __pyx_v_stemmer;
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_porter2_stemmer, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1959, __pyx_L1_error)
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L64_bool_binop_done;
      }
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1959, __pyx_L1_error)
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L64_bool_binop_done;
      }
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1959, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_1;
      __pyx_L64_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_stemmers_are_porter2_s);
        __PYX_ERR(0, 1959, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":1955
 *             max_num_char = 1000000000
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(stemmer, basestring), 'the stemmer parameter should be of type string'
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1961
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  __pyx_t_2 = (__pyx_v_stemmer == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":1963
 *         if stemmer is None:
 * 
 *             stemmer = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_stemmer, __pyx_n_s_NULL);

    /* "textTinyPy/textTinyPy.pyx":1961
 *             assert stemmer in ["porter2_stemmer", "ngram_sequential", "ngram_overlap"], 'available stemmers are : porter2_stemmer, ngram_sequential or ngram_overlap'
 * 
 *         if stemmer is None:             # <<<<<<<<<<<<<<
 * 
 *             stemmer = "NULL"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1965
 *             stemmer = "NULL"
 * 
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_min_n_gram, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L68_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L68_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_min_n_gram_parameter_should);
      __PYX_ERR(0, 1965, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1967
 *         assert isinstance(min_n_gram, int) and min_n_gram > 0, 'the min_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_max_n_gram, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L70_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L70_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should);
      __PYX_ERR(0, 1967, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1969
 *         assert isinstance(max_n_gram, int) and max_n_gram > 0, 'the max_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_n_gram, __pyx_v_min_n_gram, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_max_n_gram_parameter_should_2);
      __PYX_ERR(0, 1969, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1971
 *         assert max_n_gram >= min_n_gram, 'the max_n_gram parameter should be greater than the min_n_gram'
 * 
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_basestring); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_n_gram_delimiter, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1971, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_n_gram_delimiter_parameter_s);
      __PYX_ERR(0, 1971, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1973
 *         assert isinstance(n_gram_delimiter, basestring), 'the n_gram_delimiter parameter should be of type string'
 * 
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_skip_n_gram, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1973, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L72_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_skip_n_gram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1973, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1973, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L72_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_n_gram_parameter_should);
      __PYX_ERR(0, 1973, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1975
 *         assert isinstance(skip_n_gram, int) and skip_n_gram > 0, 'the skip_n_gram parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'             # <<<<<<<<<<<<<<
 * 
 *         if stemmer is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_skip_distance, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__pyx_t_7 != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L74_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_skip_distance, __pyx_int_neg_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1975, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L74_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_skip_distance_parameter_shou);
      __PYX_ERR(0, 1975, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1977
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  __pyx_t_1 = (__pyx_v_stemmer != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":1979
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_sequential, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1979, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "textTinyPy/textTinyPy.pyx":1981
 *             if stemmer == "ngram_sequential":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = (__pyx_t_1 != 0);
        if (__pyx_t_7) {
        } else {
          __pyx_t_2 = __pyx_t_7;
          goto __pyx_L78_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1981, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_7;
        __pyx_L78_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 1981, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":1983
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_7 = PyFloat_Check(__pyx_v_stemmer_gamma); 
        __pyx_t_1 = (__pyx_t_7 != 0);
        if (__pyx_t_1) {
        } else {
          __pyx_t_2 = __pyx_t_1;
          goto __pyx_L80_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_gamma, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1983, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_1;
        __pyx_L80_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_gamma_parameter_shou);
          __PYX_ERR(0, 1983, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":1985
 *                 assert isinstance(stemmer_gamma, float) and stemmer_gamma >= 0.0, 'the stemmer_gamma parameter should be of type float and greater or equal to 0.0'
 * 
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_stemmer_truncate, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = (__pyx_t_1 != 0);
        if (__pyx_t_7) {
        } else {
          __pyx_t_2 = __pyx_t_7;
          goto __pyx_L82_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_truncate, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1985, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_7;
        __pyx_L82_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_truncate_parameter_s);
          __PYX_ERR(0, 1985, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":1987
 *                 assert isinstance(stemmer_truncate, int) and stemmer_truncate > 0, 'the stemmer_truncate parameter should be of type integer and greater than 0'
 * 
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_overlap":
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1987, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = PyObject_IsInstance(__pyx_v_stemmer_batches, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1987, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_1 = (__pyx_t_7 != 0);
        if (__pyx_t_1) {
        } else {
          __pyx_t_2 = __pyx_t_1;
          goto __pyx_L84_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_batches, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1987, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1987, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_1;
        __pyx_L84_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_batches_parameter_sh);
          __PYX_ERR(0, 1987, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":1979
 *         if stemmer is not None:
 * 
 *             if stemmer == "ngram_sequential":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":1989
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_stemmer, __pyx_n_s_ngram_overlap, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1989, __pyx_L1_error)
    if (__pyx_t_2) {

      /* "textTinyPy/textTinyPy.pyx":1991
 *             if stemmer == "ngram_overlap":
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 * 
 */
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(!Py_OptimizeFlag)) {
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyObject_IsInstance(__pyx_v_stemmer_ngram, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = (__pyx_t_1 != 0);
        if (__pyx_t_7) {
        } else {
          __pyx_t_2 = __pyx_t_7;
          goto __pyx_L87_bool_binop_done;
        }
        __pyx_t_3 = PyObject_RichCompare(__pyx_v_stemmer_ngram, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1991, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_2 = __pyx_t_7;
        __pyx_L87_bool_binop_done:;
        if (unlikely(!__pyx_t_2)) {
          PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_stemmer_ngram_parameter_shou);
          __PYX_ERR(0, 1991, __pyx_L1_error)
        }
      }
      #endif

      /* "textTinyPy/textTinyPy.pyx":1989
 *                 assert isinstance(stemmer_batches, int) and stemmer_batches > 0, 'the stemmer_batches parameter should be of type integer and greater than 0'
 * 
 *             if stemmer == "ngram_overlap":             # <<<<<<<<<<<<<<
 * 
 *                 assert isinstance(stemmer_ngram, int) and stemmer_ngram > 0, 'the stemmer_ngram parameter should be of type integer and greater than 0'
 */
    }

    /* "textTinyPy/textTinyPy.pyx":1977
 *         assert isinstance(skip_distance, int) and skip_distance > -1, 'the skip_distance parameter should be of type integer and greater or equal to 0'
 * 
 *         if stemmer is not None:             # <<<<<<<<<<<<<<
 * 
 *             if stemmer == "ngram_sequential":
 */
  }

  /* "textTinyPy/textTinyPy.pyx":1994
 * 
 * 
 *         assert isinstance(print_every_rows, int) and print_every_rows > 0, 'the print_every_rows parameter should be of type integer'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(tf_idf, bool), 'the tf_idf parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_print_every_rows, __pyx_t_3); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = (__pyx_t_7 != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L89_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_print_every_rows, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L89_bool_binop_done:;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_print_every_rows_parameter_s);
      __PYX_ERR(0, 1994, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1996
 *         assert isinstance(print_every_rows, int) and print_every_rows > 0, 'the print_every_rows parameter should be of type integer'
 * 
 *         assert isinstance(tf_idf, bool), 'the tf_idf parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         if tf_idf:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_tf_idf, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 1996, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_tf_idf_parameter_should_be_o);
      __PYX_ERR(0, 1996, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":1998
 *         assert isinstance(tf_idf, bool), 'the tf_idf parameter should be of type boolean'
 * 
 *         if tf_idf:             # <<<<<<<<<<<<<<
 * 
 *             self.tf_idf_flag = True
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_tf_idf); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1998, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":2000
 *         if tf_idf:
 * 
 *             self.tf_idf_flag = True             # <<<<<<<<<<<<<<
 * 
 *         tmp_flag = (normalize is None) and (not tf_idf)         # before the modification of the 'normalize' parameter
 */
    __pyx_v_self->tf_idf_flag = 1;

    /* "textTinyPy/textTinyPy.pyx":1998
 *         assert isinstance(tf_idf, bool), 'the tf_idf parameter should be of type boolean'
 * 
 *         if tf_idf:             # <<<<<<<<<<<<<<
 * 
 *             self.tf_idf_flag = True
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2002
 *             self.tf_idf_flag = True
 * 
 *         tmp_flag = (normalize is None) and (not tf_idf)         # before the modification of the 'normalize' parameter             # <<<<<<<<<<<<<<
 * 
 *         if normalize is not None:
 */
  __pyx_t_2 = (__pyx_v_normalize == Py_None);
  if (__pyx_t_2) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2002, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L92_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_tf_idf); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2002, __pyx_L1_error)
  __pyx_t_1 = (!__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L92_bool_binop_done:;
  __pyx_v_tmp_flag = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "textTinyPy/textTinyPy.pyx":2004
 *         tmp_flag = (normalize is None) and (not tf_idf)         # before the modification of the 'normalize' parameter
 * 
 *         if normalize is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert normalize in ["l1", "l2"], "available normalization methods are 'l1' or 'l2'"
 */
  __pyx_t_1 = (__pyx_v_normalize != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "textTinyPy/textTinyPy.pyx":2006
 *         if normalize is not None:
 * 
 *             assert normalize in ["l1", "l2"], "available normalization methods are 'l1' or 'l2'"             # <<<<<<<<<<<<<<
 * 
 *         if normalize is None:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __Pyx_INCREF(__pyx_v_normalize);
      __pyx_t_3 = __pyx_v_normalize;
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_l1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
      if (!__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L95_bool_binop_done;
      }
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_t_3, __pyx_n_s_l2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2006, __pyx_L1_error)
      __pyx_t_2 = __pyx_t_1;
      __pyx_L95_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!(__pyx_t_2 != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_available_normalization_methods);
        __PYX_ERR(0, 2006, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":2004
 *         tmp_flag = (normalize is None) and (not tf_idf)         # before the modification of the 'normalize' parameter
 * 
 *         if normalize is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert normalize in ["l1", "l2"], "available normalization methods are 'l1' or 'l2'"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2008
 *             assert normalize in ["l1", "l2"], "available normalization methods are 'l1' or 'l2'"
 * 
 *         if normalize is None:             # <<<<<<<<<<<<<<
 * 
 *             normalize = "NULL"
 */
  __pyx_t_2 = (__pyx_v_normalize == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2010
 *         if normalize is None:
 * 
 *             normalize = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __Pyx_DECREF_SET(__pyx_v_normalize, __pyx_n_s_NULL);

    /* "textTinyPy/textTinyPy.pyx":2008
 *             assert normalize in ["l1", "l2"], "available normalization methods are 'l1' or 'l2'"
 * 
 *         if normalize is None:             # <<<<<<<<<<<<<<
 * 
 *             normalize = "NULL"
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2012
 *             normalize = "NULL"
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_3); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = (__pyx_t_2 != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_1 = __pyx_t_7;
      goto __pyx_L98_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_7;
    __pyx_L98_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_threads_parameter_should_be);
      __PYX_ERR(0, 2012, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2014
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         if vector_documents is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_3); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 2014, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 2014, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2016
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         if vector_documents is None:             # <<<<<<<<<<<<<<
 * 
 *             tmp_VEC = []
 */
  __pyx_t_1 = (__pyx_v_vector_documents == Py_None);
  __pyx_t_7 = (__pyx_t_1 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":2018
 *         if vector_documents is None:
 * 
 *             tmp_VEC = []             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_tmp_VEC = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2016
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         if vector_documents is None:             # <<<<<<<<<<<<<<
 * 
 *             tmp_VEC = []
 */
    goto __pyx_L100;
  }

  /* "textTinyPy/textTinyPy.pyx":2022
 *         else:
 * 
 *             tmp_VEC = vector_documents             # <<<<<<<<<<<<<<
 * 
 *         if path_2documents_file is None:
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_vector_documents);
    __pyx_v_tmp_VEC = __pyx_v_vector_documents;
  }
  __pyx_L100:;

  /* "textTinyPy/textTinyPy.pyx":2024
 *             tmp_VEC = vector_documents
 * 
 *         if path_2documents_file is None:             # <<<<<<<<<<<<<<
 * 
 *             tmp_FILE = "NULL"
 */
  __pyx_t_7 = (__pyx_v_path_2documents_file == Py_None);
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2026
 *         if path_2documents_file is None:
 * 
 *             tmp_FILE = "NULL"             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_INCREF(__pyx_n_s_NULL);
    __pyx_v_tmp_FILE = __pyx_n_s_NULL;

    /* "textTinyPy/textTinyPy.pyx":2024
 *             tmp_VEC = vector_documents
 * 
 *         if path_2documents_file is None:             # <<<<<<<<<<<<<<
 * 
 *             tmp_FILE = "NULL"
 */
    goto __pyx_L101;
  }

  /* "textTinyPy/textTinyPy.pyx":2030
 *         else:
 * 
 *             tmp_FILE = path_2documents_file             # <<<<<<<<<<<<<<
 * 
 *         self.FLAG_output_long = tmp_flag                                 # _cinit_ objects can not be modified if they are inside of if..else.. statements
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_path_2documents_file);
    __pyx_v_tmp_FILE = __pyx_v_path_2documents_file;
  }
  __pyx_L101:;

  /* "textTinyPy/textTinyPy.pyx":2032
 *             tmp_FILE = path_2documents_file
 * 
 *         self.FLAG_output_long = tmp_flag                                 # _cinit_ objects can not be modified if they are inside of if..else.. statements             # <<<<<<<<<<<<<<
 * 
 *         self.dtm.document_term_matrix(tmp_VEC, list_stopw, language, LOCALE_UTF, max_num_char, tmp_FILE, sort_terms, REMOVE_characters, to_lower, to_upper,
 */
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_tmp_flag); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2032, __pyx_L1_error)
  __pyx_v_self->FLAG_output_long = __pyx_t_13;

  /* "textTinyPy/textTinyPy.pyx":2034
 *         self.FLAG_output_long = tmp_flag                                 # _cinit_ objects can not be modified if they are inside of if..else.. statements
 * 
 *         self.dtm.document_term_matrix(tmp_VEC, list_stopw, language, LOCALE_UTF, max_num_char, tmp_FILE, sort_terms, REMOVE_characters, to_lower, to_upper,             # <<<<<<<<<<<<<<
 * 
 *                                       remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char,
 */
  __pyx_t_14 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_tmp_VEC); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  if (unlikely(!__pyx_v_list_stopw)) { __Pyx_RaiseUnboundLocalError("list_stopw"); __PYX_ERR(0, 2034, __pyx_L1_error) }
  __pyx_t_15 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_list_stopw); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_16 = __pyx_convert_string_from_py_std__in_string(__pyx_v_language); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_17 = __pyx_convert_string_from_py_std__in_string(__pyx_v_LOCALE_UTF); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_18 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_max_num_char); if (unlikely((__pyx_t_18 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_19 = __pyx_convert_string_from_py_std__in_string(__pyx_v_tmp_FILE); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_sort_terms); if (unlikely((__pyx_t_13 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_20 = __pyx_convert_string_from_py_std__in_string(__pyx_v_REMOVE_characters); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_to_lower); if (unlikely((__pyx_t_21 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_22 = __Pyx_PyObject_IsTrue(__pyx_v_to_upper); if (unlikely((__pyx_t_22 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2034, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":2036
 *         self.dtm.document_term_matrix(tmp_VEC, list_stopw, language, LOCALE_UTF, max_num_char, tmp_FILE, sort_terms, REMOVE_characters, to_lower, to_upper,
 * 
 *                                       remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char,             # <<<<<<<<<<<<<<
 * 
 *                                       stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate,
 */
  __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_string); if (unlikely((__pyx_t_23 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_t_24 = __Pyx_PyObject_IsTrue(__pyx_v_remove_punctuation_vector); if (unlikely((__pyx_t_24 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_t_25 = __Pyx_PyObject_IsTrue(__pyx_v_remove_numbers); if (unlikely((__pyx_t_25 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_trim_token); if (unlikely((__pyx_t_26 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_t_27 = __Pyx_PyObject_IsTrue(__pyx_v_split_string); if (unlikely((__pyx_t_27 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_t_28 = __pyx_convert_string_from_py_std__in_string(__pyx_v_separator); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_t_29 = __Pyx_PyObject_IsTrue(__pyx_v_remove_stopwords); if (unlikely((__pyx_t_29 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_min_num_char); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2036, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":2038
 *                                       remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char,
 * 
 *                                       stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate,             # <<<<<<<<<<<<<<
 * 
 *                                       stemmer_batches, threads, verbose, print_every_rows, normalize, tf_idf)
 */
  __pyx_t_30 = __pyx_convert_string_from_py_std__in_string(__pyx_v_stemmer); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_31 = __Pyx_PyInt_As_int(__pyx_v_min_n_gram); if (unlikely((__pyx_t_31 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_32 = __Pyx_PyInt_As_int(__pyx_v_max_n_gram); if (unlikely((__pyx_t_32 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_33 = __Pyx_PyInt_As_int(__pyx_v_skip_n_gram); if (unlikely((__pyx_t_33 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_34 = __Pyx_PyInt_As_int(__pyx_v_skip_distance); if (unlikely((__pyx_t_34 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_35 = __pyx_convert_string_from_py_std__in_string(__pyx_v_n_gram_delimiter); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_36 = __Pyx_PyInt_As_int(__pyx_v_stemmer_ngram); if (unlikely((__pyx_t_36 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_37 = __pyx_PyFloat_AsDouble(__pyx_v_stemmer_gamma); if (unlikely((__pyx_t_37 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)
  __pyx_t_38 = __Pyx_PyInt_As_int(__pyx_v_stemmer_truncate); if (unlikely((__pyx_t_38 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":2040
 *                                       stemmer, min_n_gram, max_n_gram, skip_n_gram, skip_distance, n_gram_delimiter, stemmer_ngram, stemmer_gamma, stemmer_truncate,
 * 
 *                                       stemmer_batches, threads, verbose, print_every_rows, normalize, tf_idf)             # <<<<<<<<<<<<<<
 * 
 *         if self.FLAG_output_long:
 */
  __pyx_t_39 = __Pyx_PyInt_As_int(__pyx_v_stemmer_batches); if (unlikely((__pyx_t_39 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2040, __pyx_L1_error)
  __pyx_t_40 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_40 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2040, __pyx_L1_error)
  __pyx_t_41 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_41 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2040, __pyx_L1_error)
  __pyx_t_42 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_print_every_rows); if (unlikely((__pyx_t_42 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2040, __pyx_L1_error)
  __pyx_t_43 = __pyx_convert_string_from_py_std__in_string(__pyx_v_normalize); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2040, __pyx_L1_error)
  __pyx_t_44 = __Pyx_PyObject_IsTrue(__pyx_v_tf_idf); if (unlikely((__pyx_t_44 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2040, __pyx_L1_error)

  /* "textTinyPy/textTinyPy.pyx":2034
 *         self.FLAG_output_long = tmp_flag                                 # _cinit_ objects can not be modified if they are inside of if..else.. statements
 * 
 *         self.dtm.document_term_matrix(tmp_VEC, list_stopw, language, LOCALE_UTF, max_num_char, tmp_FILE, sort_terms, REMOVE_characters, to_lower, to_upper,             # <<<<<<<<<<<<<<
 * 
 *                                       remove_punctuation_string, remove_punctuation_vector, remove_numbers, trim_token, split_string, separator, remove_stopwords, min_num_char,
 */
  __pyx_v_self->dtm->document_term_matrix(__pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_13, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_29, __pyx_t_9, __pyx_t_30, __pyx_t_31, __pyx_t_32, __pyx_t_33, __pyx_t_34, __pyx_t_35, __pyx_t_36, __pyx_t_37, __pyx_t_38, __pyx_t_39, __pyx_t_40, __pyx_t_41, __pyx_t_42, __pyx_t_43, __pyx_t_44);

  /* "textTinyPy/textTinyPy.pyx":2042
 *                                       stemmer_batches, threads, verbose, print_every_rows, normalize, tf_idf)
 * 
 *         if self.FLAG_output_long:             # <<<<<<<<<<<<<<
 * 
 *             result_struct_long = self.dtm.output_data()
 */
  __pyx_t_1 = (__pyx_v_self->FLAG_output_long != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2044
 *         if self.FLAG_output_long:
 * 
 *             result_struct_long = self.dtm.output_data()             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['terms'] = result_struct_long.terms_out
 */
    __pyx_v_result_struct_long = __pyx_v_self->dtm->output_data();

    /* "textTinyPy/textTinyPy.pyx":2046
 *             result_struct_long = self.dtm.output_data()
 * 
 *             self.result_struct_matrix['terms'] = result_struct_long.terms_out             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['rows'] = result_struct_long.row_idx_
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_struct_long.terms_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_terms, __pyx_t_3) < 0)) __PYX_ERR(0, 2046, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2048
 *             self.result_struct_matrix['terms'] = result_struct_long.terms_out
 * 
 *             self.result_struct_matrix['rows'] = result_struct_long.row_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['columns'] = result_struct_long.col_idx_
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_result_struct_long.row_idx_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_rows, __pyx_t_3) < 0)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2050
 *             self.result_struct_matrix['rows'] = result_struct_long.row_idx_
 * 
 *             self.result_struct_matrix['columns'] = result_struct_long.col_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['counts'] = result_struct_long.docs_cnt_
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_result_struct_long.col_idx_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2050, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_columns, __pyx_t_3) < 0)) __PYX_ERR(0, 2050, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2052
 *             self.result_struct_matrix['columns'] = result_struct_long.col_idx_
 * 
 *             self.result_struct_matrix['counts'] = result_struct_long.docs_cnt_             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_result_struct_long.docs_cnt_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2052, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_counts, __pyx_t_3) < 0)) __PYX_ERR(0, 2052, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2042
 *                                       stemmer_batches, threads, verbose, print_every_rows, normalize, tf_idf)
 * 
 *         if self.FLAG_output_long:             # <<<<<<<<<<<<<<
 * 
 *             result_struct_long = self.dtm.output_data()
 */
    goto __pyx_L102;
  }

  /* "textTinyPy/textTinyPy.pyx":2056
 *         else:
 * 
 *             result_struct_double = self.dtm.output_data_double()             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['terms'] = result_struct_double.terms_out
 */
  /*else*/ {
    __pyx_v_result_struct_double = __pyx_v_self->dtm->output_data_double();

    /* "textTinyPy/textTinyPy.pyx":2058
 *             result_struct_double = self.dtm.output_data_double()
 * 
 *             self.result_struct_matrix['terms'] = result_struct_double.terms_out             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['rows'] = result_struct_double.row_idx_
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_struct_double.terms_out); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_terms, __pyx_t_3) < 0)) __PYX_ERR(0, 2058, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2060
 *             self.result_struct_matrix['terms'] = result_struct_double.terms_out
 * 
 *             self.result_struct_matrix['rows'] = result_struct_double.row_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['columns'] = result_struct_double.col_idx_
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_result_struct_double.row_idx_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_rows, __pyx_t_3) < 0)) __PYX_ERR(0, 2060, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2062
 *             self.result_struct_matrix['rows'] = result_struct_double.row_idx_
 * 
 *             self.result_struct_matrix['columns'] = result_struct_double.col_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.result_struct_matrix['counts'] = result_struct_double.docs_cnt_
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_result_struct_double.col_idx_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_columns, __pyx_t_3) < 0)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "textTinyPy/textTinyPy.pyx":2064
 *             self.result_struct_matrix['columns'] = result_struct_double.col_idx_
 * 
 *             self.result_struct_matrix['counts'] = result_struct_double.docs_cnt_             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_convert_vector_to_py_double(__pyx_v_result_struct_double.docs_cnt_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyObject_SetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_counts, __pyx_t_3) < 0)) __PYX_ERR(0, 2064, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L102:;

  /* "textTinyPy/textTinyPy.pyx":2067
 * 
 * 
 *         self.dims.append(np.max(self.result_struct_matrix['rows']) + 1)             # <<<<<<<<<<<<<<
 * 
 *         self.dims.append(np.max(self.result_struct_matrix['columns']) + 1)
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_max); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[2] = {__pyx_t_8, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_self->dims, __pyx_t_5); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 2067, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "textTinyPy/textTinyPy.pyx":2069
 *         self.dims.append(np.max(self.result_struct_matrix['rows']) + 1)
 * 
 *         self.dims.append(np.max(self.result_struct_matrix['columns']) + 1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_max); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_columns); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_3};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_12 = __Pyx_PyObject_Append(__pyx_v_self->dims, __pyx_t_6); if (unlikely(__pyx_t_12 == -1)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "textTinyPy/textTinyPy.pyx":1840
 * 
 * 
 *     def Term_Matrix(self, vector_documents = None, path_2documents_file = None, sort_terms = False, LOCALE_UTF = "", to_lower = False, to_upper = False,             # <<<<<<<<<<<<<<
 * 
 *                     language = "english", REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.Term_Matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resource_path);
  __Pyx_XDECREF(__pyx_v_path_stopw);
  __Pyx_XDECREF(__pyx_v_dat_stopw);
  __Pyx_XDECREF(__pyx_v_array_stopw);
  __Pyx_XDECREF(__pyx_v_list_stopw);
  __Pyx_XDECREF(__pyx_v_tmp_flag);
  __Pyx_XDECREF(__pyx_v_tmp_VEC);
  __Pyx_XDECREF(__pyx_v_tmp_FILE);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_remove_stopwords);
  __Pyx_XDECREF(__pyx_v_max_num_char);
  __Pyx_XDECREF(__pyx_v_stemmer);
  __Pyx_XDECREF(__pyx_v_normalize);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":2074
 * 
 * 
 *     def document_term_matrix(self, to_array = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_7document_term_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_6document_term_matrix[] = "\n        \n        The document_term_matrix function returns a document-term-matrix\n        \n        [ If shape[0] > shape[1], use csc_matrix format. Otherwise, use csr_matrix -- in document-term-matrix the rows (documents) are fewer than the columns (terms) ]\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_7document_term_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_to_array = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_term_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_to_array,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_array);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "document_term_matrix") < 0)) __PYX_ERR(0, 2074, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_to_array = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("document_term_matrix", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2074, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.document_term_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_6document_term_matrix(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self), __pyx_v_to_array);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_6document_term_matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_to_array) {
  std::vector<PY_LONG_LONG>  __pyx_v_zer_val_sparse_idx;
  PyObject *__pyx_v_upd_terms = NULL;
  PY_LONG_LONG __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  std::vector<PY_LONG_LONG> ::iterator __pyx_t_8;
  PY_LONG_LONG __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("document_term_matrix", 0);

  /* "textTinyPy/textTinyPy.pyx":2084
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_self->result_struct_matrix, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2084, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2084, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2086
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2086, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2086, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2086, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2086, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2086, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2084
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2088
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         self.FLAG_doc_term_mat = True
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_to_array, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 2088, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!(__pyx_t_3 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_array_parameter_should_be);
      __PYX_ERR(0, 2088, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2090
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 * 
 *         self.FLAG_doc_term_mat = True             # <<<<<<<<<<<<<<
 * 
 *         self.dtm_or_tdm = True
 */
  __pyx_v_self->FLAG_doc_term_mat = 1;

  /* "textTinyPy/textTinyPy.pyx":2092
 *         self.FLAG_doc_term_mat = True
 * 
 *         self.dtm_or_tdm = True             # <<<<<<<<<<<<<<
 * 
 *         if self.tf_idf_flag:
 */
  __pyx_v_self->dtm_or_tdm = 1;

  /* "textTinyPy/textTinyPy.pyx":2094
 *         self.dtm_or_tdm = True
 * 
 *         if self.tf_idf_flag:             # <<<<<<<<<<<<<<
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 */
  __pyx_t_3 = (__pyx_v_self->tf_idf_flag != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2096
 *         if self.tf_idf_flag:
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()             # <<<<<<<<<<<<<<
 * 
 *             if len(zer_val_sparse_idx) > 0:
 */
    __pyx_v_zer_val_sparse_idx = __pyx_v_self->dtm->update_sparse_matrix();

    /* "textTinyPy/textTinyPy.pyx":2098
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 * 
 *             if len(zer_val_sparse_idx) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_zer_val_sparse_idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 2098, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = ((__pyx_t_7 > 0) != 0);
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":2100
 *             if len(zer_val_sparse_idx) > 0:
 * 
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]             # <<<<<<<<<<<<<<
 * 
 *                 print("warning: the following terms sum to zero : ", upd_terms)
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __pyx_v_zer_val_sparse_idx.begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_v_zer_val_sparse_idx.end())) break;
        __pyx_t_9 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_i = __pyx_t_9;
        __pyx_t_1 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, PY_LONG_LONG, 1, __Pyx_PyInt_From_PY_LONG_LONG, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 2100, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_upd_terms = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "textTinyPy/textTinyPy.pyx":2102
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]
 * 
 *                 print("warning: the following terms sum to zero : ", upd_terms)             # <<<<<<<<<<<<<<
 * 
 *         self.sp_mat = csr_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['rows'], self.result_struct_matrix['columns'])), shape=(self.dims[0], self.dims[1]))
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_warning_the_following_terms_sum);
      __Pyx_GIVEREF(__pyx_kp_s_warning_the_following_terms_sum);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_warning_the_following_terms_sum);
      __Pyx_INCREF(__pyx_v_upd_terms);
      __Pyx_GIVEREF(__pyx_v_upd_terms);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_upd_terms);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "textTinyPy/textTinyPy.pyx":2098
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 * 
 *             if len(zer_val_sparse_idx) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]
 */
    }

    /* "textTinyPy/textTinyPy.pyx":2094
 *         self.dtm_or_tdm = True
 * 
 *         if self.tf_idf_flag:             # <<<<<<<<<<<<<<
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2104
 *                 print("warning: the following terms sum to zero : ", upd_terms)
 * 
 *         self.sp_mat = csr_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['rows'], self.result_struct_matrix['columns'])), shape=(self.dims[0], self.dims[1]))             # <<<<<<<<<<<<<<
 * 
 *         if to_array:
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_counts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_rows); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_columns); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->dims, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->dims, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_shape, __pyx_t_10) < 0) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->sp_mat);
  __Pyx_DECREF(__pyx_v_self->sp_mat);
  __pyx_v_self->sp_mat = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "textTinyPy/textTinyPy.pyx":2106
 *         self.sp_mat = csr_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['rows'], self.result_struct_matrix['columns'])), shape=(self.dims[0], self.dims[1]))
 * 
 *         if to_array:             # <<<<<<<<<<<<<<
 * 
 *             return self.sp_mat.toarray()
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_to_array); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2106, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2108
 *         if to_array:
 * 
 *             return self.sp_mat.toarray()             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sp_mat, __pyx_n_s_toarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2108, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2108, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;

    /* "textTinyPy/textTinyPy.pyx":2106
 *         self.sp_mat = csr_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['rows'], self.result_struct_matrix['columns'])), shape=(self.dims[0], self.dims[1]))
 * 
 *         if to_array:             # <<<<<<<<<<<<<<
 * 
 *             return self.sp_mat.toarray()
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2112
 *         else:
 * 
 *             return self.sp_mat             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->sp_mat);
    __pyx_r = __pyx_v_self->sp_mat;
    goto __pyx_L0;
  }

  /* "textTinyPy/textTinyPy.pyx":2074
 * 
 * 
 *     def document_term_matrix(self, to_array = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.document_term_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_upd_terms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":2116
 * 
 * 
 *     def term_document_matrix(self, to_array = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_9term_document_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_8term_document_matrix[] = "\n        \n        The term_document_matrix function returns a term-document-matrix\n        \n        [ If shape[0] > shape[1], use csc_matrix format. Otherwise, use csr_matrix -- in the term-document-matrix the rows (terms) are more than the columns (documents)]\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_9term_document_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_to_array = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("term_document_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_to_array,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_array);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "term_document_matrix") < 0)) __PYX_ERR(0, 2116, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_to_array = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("term_document_matrix", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2116, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.term_document_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_8term_document_matrix(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self), __pyx_v_to_array);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_8term_document_matrix(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_to_array) {
  std::vector<PY_LONG_LONG>  __pyx_v_zer_val_sparse_idx;
  PyObject *__pyx_v_upd_terms = NULL;
  PY_LONG_LONG __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  std::vector<PY_LONG_LONG> ::iterator __pyx_t_8;
  PY_LONG_LONG __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("term_document_matrix", 0);

  /* "textTinyPy/textTinyPy.pyx":2126
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_self->result_struct_matrix, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2128
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2128, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2128, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2128, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2128, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2126
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2130
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         self.FLAG_doc_term_mat = False
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyObject_IsInstance(__pyx_v_to_array, __pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 2130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!(__pyx_t_3 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_array_parameter_should_be);
      __PYX_ERR(0, 2130, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2132
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 * 
 *         self.FLAG_doc_term_mat = False             # <<<<<<<<<<<<<<
 * 
 *         self.dtm_or_tdm = True
 */
  __pyx_v_self->FLAG_doc_term_mat = 0;

  /* "textTinyPy/textTinyPy.pyx":2134
 *         self.FLAG_doc_term_mat = False
 * 
 *         self.dtm_or_tdm = True             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[long long] zer_val_sparse_idx
 */
  __pyx_v_self->dtm_or_tdm = 1;

  /* "textTinyPy/textTinyPy.pyx":2138
 *         cdef vector[long long] zer_val_sparse_idx
 * 
 *         if self.tf_idf_flag:             # <<<<<<<<<<<<<<
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 */
  __pyx_t_3 = (__pyx_v_self->tf_idf_flag != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2140
 *         if self.tf_idf_flag:
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()             # <<<<<<<<<<<<<<
 * 
 *             if len(zer_val_sparse_idx) > 0:
 */
    __pyx_v_zer_val_sparse_idx = __pyx_v_self->dtm->update_sparse_matrix();

    /* "textTinyPy/textTinyPy.pyx":2142
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 * 
 *             if len(zer_val_sparse_idx) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_zer_val_sparse_idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 2142, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = ((__pyx_t_7 > 0) != 0);
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":2144
 *             if len(zer_val_sparse_idx) > 0:
 * 
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]             # <<<<<<<<<<<<<<
 * 
 *                 print("warning: the following terms sum to zero : ", upd_terms)
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2144, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __pyx_v_zer_val_sparse_idx.begin();
      for (;;) {
        if (!(__pyx_t_8 != __pyx_v_zer_val_sparse_idx.end())) break;
        __pyx_t_9 = *__pyx_t_8;
        ++__pyx_t_8;
        __pyx_v_i = __pyx_t_9;
        __pyx_t_1 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_1, __pyx_v_i, PY_LONG_LONG, 1, __Pyx_PyInt_From_PY_LONG_LONG, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2144, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 2144, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_upd_terms = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "textTinyPy/textTinyPy.pyx":2146
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]
 * 
 *                 print("warning: the following terms sum to zero : ", upd_terms)             # <<<<<<<<<<<<<<
 * 
 *         self.sp_mat = csc_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['columns'], self.result_struct_matrix['rows'])), shape=(self.dims[1], self.dims[0]))
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_warning_the_following_terms_sum);
      __Pyx_GIVEREF(__pyx_kp_s_warning_the_following_terms_sum);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_warning_the_following_terms_sum);
      __Pyx_INCREF(__pyx_v_upd_terms);
      __Pyx_GIVEREF(__pyx_v_upd_terms);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_upd_terms);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "textTinyPy/textTinyPy.pyx":2142
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 * 
 *             if len(zer_val_sparse_idx) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 upd_terms = [self.result_struct_matrix['terms'][i] for i in zer_val_sparse_idx]
 */
    }

    /* "textTinyPy/textTinyPy.pyx":2138
 *         cdef vector[long long] zer_val_sparse_idx
 * 
 *         if self.tf_idf_flag:             # <<<<<<<<<<<<<<
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2148
 *                 print("warning: the following terms sum to zero : ", upd_terms)
 * 
 *         self.sp_mat = csc_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['columns'], self.result_struct_matrix['rows'])), shape=(self.dims[1], self.dims[0]))             # <<<<<<<<<<<<<<
 * 
 *         if to_array:
 */
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_csc_matrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_counts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_columns); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_rows); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->dims, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_self->dims, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_shape, __pyx_t_10) < 0) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->sp_mat);
  __Pyx_DECREF(__pyx_v_self->sp_mat);
  __pyx_v_self->sp_mat = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "textTinyPy/textTinyPy.pyx":2150
 *         self.sp_mat = csc_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['columns'], self.result_struct_matrix['rows'])), shape=(self.dims[1], self.dims[0]))
 * 
 *         if to_array:             # <<<<<<<<<<<<<<
 * 
 *             return self.sp_mat.toarray()
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_to_array); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2150, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2152
 *         if to_array:
 * 
 *             return self.sp_mat.toarray()             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->sp_mat, __pyx_n_s_toarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2152, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_10 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2152, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_10;
    __pyx_t_10 = 0;
    goto __pyx_L0;

    /* "textTinyPy/textTinyPy.pyx":2150
 *         self.sp_mat = csc_matrix((self.result_struct_matrix['counts'], (self.result_struct_matrix['columns'], self.result_struct_matrix['rows'])), shape=(self.dims[1], self.dims[0]))
 * 
 *         if to_array:             # <<<<<<<<<<<<<<
 * 
 *             return self.sp_mat.toarray()
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2156
 *         else:
 * 
 *             return self.sp_mat             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->sp_mat);
    __pyx_r = __pyx_v_self->sp_mat;
    goto __pyx_L0;
  }

  /* "textTinyPy/textTinyPy.pyx":2116
 * 
 * 
 *     def term_document_matrix(self, to_array = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.term_document_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_upd_terms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":2161
 * 
 * 
 *     def corpus_terms(self):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_11corpus_terms(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_10corpus_terms[] = "\n        \n        The corpus_terms function returns the terms of the corpus. There are two different cases: In case that either the 'document_term_matrix' or the 'term_document_matrix' were called \n        \n        previously then it returns all the terms of the corpus. On the other hand if the 'Term_Matrix_Adjust' function was called before the 'corpus_terms' function then the resulted reduced \n        \n        terms of the 'Term_Matrix_Adjust' function will be displayed       \n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_11corpus_terms(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("corpus_terms (wrapper)", 0);
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_10corpus_terms(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_10corpus_terms(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("corpus_terms", 0);

  /* "textTinyPy/textTinyPy.pyx":2173
 *         '''
 * 
 *         if self.adjust_sparsity_matrix != {}:             # <<<<<<<<<<<<<<
 * 
 *             return np.array(self.adjust_sparsity_matrix['sparsity_terms'])
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_self->adjust_sparsity_matrix, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2175
 *         if self.adjust_sparsity_matrix != {}:
 * 
 *             return np.array(self.adjust_sparsity_matrix['sparsity_terms'])             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2175, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2175, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2175, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2175, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "textTinyPy/textTinyPy.pyx":2173
 *         '''
 * 
 *         if self.adjust_sparsity_matrix != {}:             # <<<<<<<<<<<<<<
 * 
 *             return np.array(self.adjust_sparsity_matrix['sparsity_terms'])
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2179
 *         else:
 * 
 *             if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *                 raise_with_traceback(ValueError("run first one of the 'document_term_matrix', 'term_document_matrix' and/or 'Term_Matrix_Adjust' methods and then require the corpus terms"))
 */
  /*else*/ {
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_self->result_struct_matrix, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":2181
 *             if self.result_struct_matrix == {}:
 * 
 *                 raise_with_traceback(ValueError("run first one of the 'document_term_matrix', 'term_document_matrix' and/or 'Term_Matrix_Adjust' methods and then require the corpus terms"))             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_1) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2181, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2181, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_6};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2181, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2181, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2181, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "textTinyPy/textTinyPy.pyx":2179
 *         else:
 * 
 *             if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *                 raise_with_traceback(ValueError("run first one of the 'document_term_matrix', 'term_document_matrix' and/or 'Term_Matrix_Adjust' methods and then require the corpus terms"))
 */
      goto __pyx_L4;
    }

    /* "textTinyPy/textTinyPy.pyx":2185
 *             else:
 * 
 *                 return np.array(self.result_struct_matrix['terms'])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_terms); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2185, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
          __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2185, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_2};
          __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2185, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        } else
        #endif
        {
          __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2185, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __pyx_t_6 = NULL;
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_2);
          __pyx_t_2 = 0;
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2185, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;
    }
    __pyx_L4:;
  }

  /* "textTinyPy/textTinyPy.pyx":2161
 * 
 * 
 *     def corpus_terms(self):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.corpus_terms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":2190
 * 
 * 
 *     def Sparsity(self):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_13Sparsity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_12Sparsity[] = "\n        \n        returns the sparsity of the initial matrix\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_13Sparsity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Sparsity (wrapper)", 0);
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_12Sparsity(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_12Sparsity(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self) {
  double __pyx_v_tmp_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("Sparsity", 0);

  /* "textTinyPy/textTinyPy.pyx":2198
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_self->result_struct_matrix, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2200
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         cdef double tmp_val
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2200, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2200, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2200, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2200, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2200, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2198
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2204
 *         cdef double tmp_val
 * 
 *         tmp_val = self.dtm.sparsity()             # <<<<<<<<<<<<<<
 * 
 *         return "sparsity of the matrix: " + str(float(round(tmp_val, 4))) + " %"
 */
  __pyx_v_tmp_val = __pyx_v_self->dtm->sparsity();

  /* "textTinyPy/textTinyPy.pyx":2206
 *         tmp_val = self.dtm.sparsity()
 * 
 *         return "sparsity of the matrix: " + str(float(round(tmp_val, 4))) + " %"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_tmp_val); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_4);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s_sparsity_of_the_matrix, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__37); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":2190
 * 
 * 
 *     def Sparsity(self):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.Sparsity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":2211
 * 
 * 
 *     def Term_Matrix_Adjust(self, sparsity_thresh = 1.0, to_array = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_15Term_Matrix_Adjust(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_14Term_Matrix_Adjust[] = "\n        \n        The Term_Matrix_Adjust function removes sparse terms from a sparse matrix using a sparsity threshold\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_15Term_Matrix_Adjust(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sparsity_thresh = 0;
  PyObject *__pyx_v_to_array = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Term_Matrix_Adjust (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sparsity_thresh,&__pyx_n_s_to_array,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_float_1_0);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sparsity_thresh);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to_array);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Term_Matrix_Adjust") < 0)) __PYX_ERR(0, 2211, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_sparsity_thresh = values[0];
    __pyx_v_to_array = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Term_Matrix_Adjust", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2211, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.Term_Matrix_Adjust", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_14Term_Matrix_Adjust(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self), __pyx_v_sparsity_thresh, __pyx_v_to_array);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_14Term_Matrix_Adjust(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_sparsity_thresh, PyObject *__pyx_v_to_array) {
  struct struct_term_matrix __pyx_v_sparsity_struct;
  struct struct_term_matrix_double __pyx_v_sparsity_struct_double;
  std::vector<PY_LONG_LONG>  __pyx_v_zer_val_sparse_idx;
  PyObject *__pyx_v_upd_terms = NULL;
  PyObject *__pyx_v_adj_sp_mat = NULL;
  PY_LONG_LONG __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  double __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  std::vector<PY_LONG_LONG> ::iterator __pyx_t_11;
  PY_LONG_LONG __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __Pyx_RefNannySetupContext("Term_Matrix_Adjust", 0);

  /* "textTinyPy/textTinyPy.pyx":2219
 *         '''
 * 
 *         if not self.dtm_or_tdm:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("run first one of the 'document_term_matrix' or 'term_document_matrix' methods"))
 */
  __pyx_t_1 = ((!(__pyx_v_self->dtm_or_tdm != 0)) != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2221
 *         if not self.dtm_or_tdm:
 * 
 *             raise_with_traceback(ValueError("run first one of the 'document_term_matrix' or 'term_document_matrix' methods"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(sparsity_thresh, float) and (sparsity_thresh <= 1.0 and sparsity_thresh > 0.0) , "the sparsity_thresh parameter should be of type float and it's range should be between 0.0 and 1.0"
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2221, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2221, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2221, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2221, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2221, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2219
 *         '''
 * 
 *         if not self.dtm_or_tdm:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("run first one of the 'document_term_matrix' or 'term_document_matrix' methods"))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2223
 *             raise_with_traceback(ValueError("run first one of the 'document_term_matrix' or 'term_document_matrix' methods"))
 * 
 *         assert isinstance(sparsity_thresh, float) and (sparsity_thresh <= 1.0 and sparsity_thresh > 0.0) , "the sparsity_thresh parameter should be of type float and it's range should be between 0.0 and 1.0"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_7 = PyFloat_Check(__pyx_v_sparsity_thresh); 
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_sparsity_thresh, __pyx_float_1_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {
    } else {
      __pyx_t_1 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_sparsity_thresh, __pyx_float_0_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __pyx_t_8;
    __pyx_L4_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_sparsity_thresh_parameter_sh);
      __PYX_ERR(0, 2223, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2225
 *         assert isinstance(sparsity_thresh, float) and (sparsity_thresh <= 1.0 and sparsity_thresh > 0.0) , "the sparsity_thresh parameter should be of type float and it's range should be between 0.0 and 1.0"
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         self.dtm.adj_Sparsity(sparsity_thresh)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_to_array, __pyx_t_2); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_to_array_parameter_should_be);
      __PYX_ERR(0, 2225, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2227
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 * 
 *         self.dtm.adj_Sparsity(sparsity_thresh)             # <<<<<<<<<<<<<<
 * 
 *         if self.FLAG_output_long:
 */
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_sparsity_thresh); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2227, __pyx_L1_error)
  __pyx_v_self->dtm->adj_Sparsity(__pyx_t_9);

  /* "textTinyPy/textTinyPy.pyx":2229
 *         self.dtm.adj_Sparsity(sparsity_thresh)
 * 
 *         if self.FLAG_output_long:             # <<<<<<<<<<<<<<
 * 
 *             sparsity_struct = self.dtm.output_data_adjusted()
 */
  __pyx_t_1 = (__pyx_v_self->FLAG_output_long != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2231
 *         if self.FLAG_output_long:
 * 
 *             sparsity_struct = self.dtm.output_data_adjusted()             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_terms'] = sparsity_struct.terms_out
 */
    __pyx_v_sparsity_struct = __pyx_v_self->dtm->output_data_adjusted();

    /* "textTinyPy/textTinyPy.pyx":2233
 *             sparsity_struct = self.dtm.output_data_adjusted()
 * 
 *             self.adjust_sparsity_matrix['sparsity_terms'] = sparsity_struct.terms_out             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_cols'] = sparsity_struct.col_idx_
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_sparsity_struct.terms_out); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_terms, __pyx_t_2) < 0)) __PYX_ERR(0, 2233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2235
 *             self.adjust_sparsity_matrix['sparsity_terms'] = sparsity_struct.terms_out
 * 
 *             self.adjust_sparsity_matrix['sparsity_cols'] = sparsity_struct.col_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_rows'] = sparsity_struct.row_idx_
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_sparsity_struct.col_idx_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_cols, __pyx_t_2) < 0)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2237
 *             self.adjust_sparsity_matrix['sparsity_cols'] = sparsity_struct.col_idx_
 * 
 *             self.adjust_sparsity_matrix['sparsity_rows'] = sparsity_struct.row_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_counts'] = sparsity_struct.docs_cnt_
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_sparsity_struct.row_idx_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_rows, __pyx_t_2) < 0)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2239
 *             self.adjust_sparsity_matrix['sparsity_rows'] = sparsity_struct.row_idx_
 * 
 *             self.adjust_sparsity_matrix['sparsity_counts'] = sparsity_struct.docs_cnt_             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_sparsity_struct.docs_cnt_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_counts, __pyx_t_2) < 0)) __PYX_ERR(0, 2239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2229
 *         self.dtm.adj_Sparsity(sparsity_thresh)
 * 
 *         if self.FLAG_output_long:             # <<<<<<<<<<<<<<
 * 
 *             sparsity_struct = self.dtm.output_data_adjusted()
 */
    goto __pyx_L7;
  }

  /* "textTinyPy/textTinyPy.pyx":2243
 *         else:
 * 
 *             sparsity_struct_double = self.dtm.output_data_adjusted_double()             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_terms'] = sparsity_struct_double.terms_out
 */
  /*else*/ {
    __pyx_v_sparsity_struct_double = __pyx_v_self->dtm->output_data_adjusted_double();

    /* "textTinyPy/textTinyPy.pyx":2245
 *             sparsity_struct_double = self.dtm.output_data_adjusted_double()
 * 
 *             self.adjust_sparsity_matrix['sparsity_terms'] = sparsity_struct_double.terms_out             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_cols'] = sparsity_struct_double.col_idx_
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_sparsity_struct_double.terms_out); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_terms, __pyx_t_2) < 0)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2247
 *             self.adjust_sparsity_matrix['sparsity_terms'] = sparsity_struct_double.terms_out
 * 
 *             self.adjust_sparsity_matrix['sparsity_cols'] = sparsity_struct_double.col_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_rows'] = sparsity_struct_double.row_idx_
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_sparsity_struct_double.col_idx_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_cols, __pyx_t_2) < 0)) __PYX_ERR(0, 2247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2249
 *             self.adjust_sparsity_matrix['sparsity_cols'] = sparsity_struct_double.col_idx_
 * 
 *             self.adjust_sparsity_matrix['sparsity_rows'] = sparsity_struct_double.row_idx_             # <<<<<<<<<<<<<<
 * 
 *             self.adjust_sparsity_matrix['sparsity_counts'] = sparsity_struct_double.docs_cnt_
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_sparsity_struct_double.row_idx_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_rows, __pyx_t_2) < 0)) __PYX_ERR(0, 2249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2251
 *             self.adjust_sparsity_matrix['sparsity_rows'] = sparsity_struct_double.row_idx_
 * 
 *             self.adjust_sparsity_matrix['sparsity_counts'] = sparsity_struct_double.docs_cnt_             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_sparsity_struct_double.docs_cnt_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_counts, __pyx_t_2) < 0)) __PYX_ERR(0, 2251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L7:;

  /* "textTinyPy/textTinyPy.pyx":2254
 * 
 * 
 *         if self.adjust_sparsity_matrix['sparsity_cols'] == [] or self.adjust_sparsity_matrix['sparsity_counts'] == []:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("a sparsity_thresh of " + str(sparsity_thresh) + " returns an empty sparse matrix. Consider increasing the sparsity_thresh"))
 */
  __pyx_t_2 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_cols); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!__pyx_t_8) {
  } else {
    __pyx_t_1 = __pyx_t_8;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_6 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_counts); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_6, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __pyx_t_8;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2256
 *         if self.adjust_sparsity_matrix['sparsity_cols'] == [] or self.adjust_sparsity_matrix['sparsity_counts'] == []:
 * 
 *             raise_with_traceback(ValueError("a sparsity_thresh of " + str(sparsity_thresh) + " returns an empty sparse matrix. Consider increasing the sparsity_thresh"))             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[long long] zer_val_sparse_idx
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_sparsity_thresh);
    __Pyx_GIVEREF(__pyx_v_sparsity_thresh);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_sparsity_thresh);
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Add(__pyx_kp_s_a_sparsity_thresh_of, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_6, __pyx_kp_s_returns_an_empty_sparse_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2256, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2256, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2256, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2256, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2254
 * 
 * 
 *         if self.adjust_sparsity_matrix['sparsity_cols'] == [] or self.adjust_sparsity_matrix['sparsity_counts'] == []:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("a sparsity_thresh of " + str(sparsity_thresh) + " returns an empty sparse matrix. Consider increasing the sparsity_thresh"))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2260
 *         cdef vector[long long] zer_val_sparse_idx
 * 
 *         if self.tf_idf_flag:             # <<<<<<<<<<<<<<
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 */
  __pyx_t_1 = (__pyx_v_self->tf_idf_flag != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2262
 *         if self.tf_idf_flag:
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()             # <<<<<<<<<<<<<<
 * 
 *             if len(zer_val_sparse_idx) > 0:
 */
    __pyx_v_zer_val_sparse_idx = __pyx_v_self->dtm->update_sparse_matrix();

    /* "textTinyPy/textTinyPy.pyx":2264
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 * 
 *             if len(zer_val_sparse_idx) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 upd_terms = [self.adjust_sparsity_matrix['sparsity_terms'][i] for i in zer_val_sparse_idx]
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_zer_val_sparse_idx); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 2264, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = ((__pyx_t_10 > 0) != 0);
    if (__pyx_t_1) {

      /* "textTinyPy/textTinyPy.pyx":2266
 *             if len(zer_val_sparse_idx) > 0:
 * 
 *                 upd_terms = [self.adjust_sparsity_matrix['sparsity_terms'][i] for i in zer_val_sparse_idx]             # <<<<<<<<<<<<<<
 * 
 *                 print("warning: the following terms sum to zero : ", upd_terms)
 */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_11 = __pyx_v_zer_val_sparse_idx.begin();
      for (;;) {
        if (!(__pyx_t_11 != __pyx_v_zer_val_sparse_idx.end())) break;
        __pyx_t_12 = *__pyx_t_11;
        ++__pyx_t_11;
        __pyx_v_i = __pyx_t_12;
        __pyx_t_3 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_terms); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2266, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i, PY_LONG_LONG, 1, __Pyx_PyInt_From_PY_LONG_LONG, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2266, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 2266, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_upd_terms = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "textTinyPy/textTinyPy.pyx":2268
 *                 upd_terms = [self.adjust_sparsity_matrix['sparsity_terms'][i] for i in zer_val_sparse_idx]
 * 
 *                 print("warning: the following terms sum to zero : ", upd_terms)             # <<<<<<<<<<<<<<
 * 
 *         if self.FLAG_doc_term_mat:
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_warning_the_following_terms_sum);
      __Pyx_GIVEREF(__pyx_kp_s_warning_the_following_terms_sum);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_warning_the_following_terms_sum);
      __Pyx_INCREF(__pyx_v_upd_terms);
      __Pyx_GIVEREF(__pyx_v_upd_terms);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_upd_terms);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "textTinyPy/textTinyPy.pyx":2264
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 * 
 *             if len(zer_val_sparse_idx) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 upd_terms = [self.adjust_sparsity_matrix['sparsity_terms'][i] for i in zer_val_sparse_idx]
 */
    }

    /* "textTinyPy/textTinyPy.pyx":2260
 *         cdef vector[long long] zer_val_sparse_idx
 * 
 *         if self.tf_idf_flag:             # <<<<<<<<<<<<<<
 * 
 *             zer_val_sparse_idx = self.dtm.update_sparse_matrix()
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2270
 *                 print("warning: the following terms sum to zero : ", upd_terms)
 * 
 *         if self.FLAG_doc_term_mat:             # <<<<<<<<<<<<<<
 * 
 *             adj_sp_mat = csr_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_rows'], self.adjust_sparsity_matrix['sparsity_cols'])),
 */
  __pyx_t_1 = (__pyx_v_self->FLAG_doc_term_mat != 0);
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2272
 *         if self.FLAG_doc_term_mat:
 * 
 *             adj_sp_mat = csr_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_rows'], self.adjust_sparsity_matrix['sparsity_cols'])),             # <<<<<<<<<<<<<<
 * 
 *                                      shape=(np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1))
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_counts); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_cols); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "textTinyPy/textTinyPy.pyx":2274
 *             adj_sp_mat = csr_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_rows'], self.adjust_sparsity_matrix['sparsity_cols'])),
 * 
 *                                      shape=(np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1))             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_max); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    if (!__pyx_t_14) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else
      #endif
      {
        __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_cols); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_14) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_15};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_14, __pyx_t_15};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_15);
        __pyx_t_15 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_13 = 0;
    __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_shape, __pyx_t_2) < 0) __PYX_ERR(0, 2274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2272
 *         if self.FLAG_doc_term_mat:
 * 
 *             adj_sp_mat = csr_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_rows'], self.adjust_sparsity_matrix['sparsity_cols'])),             # <<<<<<<<<<<<<<
 * 
 *                                      shape=(np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1))
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_adj_sp_mat = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2270
 *                 print("warning: the following terms sum to zero : ", upd_terms)
 * 
 *         if self.FLAG_doc_term_mat:             # <<<<<<<<<<<<<<
 * 
 *             adj_sp_mat = csr_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_rows'], self.adjust_sparsity_matrix['sparsity_cols'])),
 */
    goto __pyx_L15;
  }

  /* "textTinyPy/textTinyPy.pyx":2278
 *         else:
 * 
 *             adj_sp_mat = csc_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_cols'], self.adjust_sparsity_matrix['sparsity_rows'])),             # <<<<<<<<<<<<<<
 * 
 *                                          shape=(np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1))
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_csc_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_counts); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_cols); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_rows); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "textTinyPy/textTinyPy.pyx":2280
 *             adj_sp_mat = csc_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_cols'], self.adjust_sparsity_matrix['sparsity_rows'])),
 * 
 *                                          shape=(np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1))             # <<<<<<<<<<<<<<
 * 
 *         if to_array:
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_max); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_cols); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    if (!__pyx_t_16) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_6};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __pyx_t_16 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_max); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_rows); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_16) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_15};
        __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_16, __pyx_t_15};
        __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      } else
      #endif
      {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_16); __pyx_t_16 = NULL;
        __Pyx_GIVEREF(__pyx_t_15);
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_15);
        __pyx_t_15 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __pyx_t_13 = 0;
    __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_shape, __pyx_t_4) < 0) __PYX_ERR(0, 2280, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "textTinyPy/textTinyPy.pyx":2278
 *         else:
 * 
 *             adj_sp_mat = csc_matrix((self.adjust_sparsity_matrix['sparsity_counts'], (self.adjust_sparsity_matrix['sparsity_cols'], self.adjust_sparsity_matrix['sparsity_rows'])),             # <<<<<<<<<<<<<<
 * 
 *                                          shape=(np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1))
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_adj_sp_mat = __pyx_t_4;
    __pyx_t_4 = 0;
  }
  __pyx_L15:;

  /* "textTinyPy/textTinyPy.pyx":2282
 *                                          shape=(np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1))
 * 
 *         if to_array:             # <<<<<<<<<<<<<<
 * 
 *             return adj_sp_mat.toarray()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_to_array); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2282, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "textTinyPy/textTinyPy.pyx":2284
 *         if to_array:
 * 
 *             return adj_sp_mat.toarray()             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_adj_sp_mat, __pyx_n_s_toarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2284, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2284, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "textTinyPy/textTinyPy.pyx":2282
 *                                          shape=(np.max(self.adjust_sparsity_matrix['sparsity_cols']) + 1, np.max(self.adjust_sparsity_matrix['sparsity_rows']) + 1))
 * 
 *         if to_array:             # <<<<<<<<<<<<<<
 * 
 *             return adj_sp_mat.toarray()
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2288
 *         else:
 * 
 *             return adj_sp_mat             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_adj_sp_mat);
    __pyx_r = __pyx_v_adj_sp_mat;
    goto __pyx_L0;
  }

  /* "textTinyPy/textTinyPy.pyx":2211
 * 
 * 
 *     def Term_Matrix_Adjust(self, sparsity_thresh = 1.0, to_array = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.Term_Matrix_Adjust", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_upd_terms);
  __Pyx_XDECREF(__pyx_v_adj_sp_mat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":2293
 * 
 * 
 *     def most_frequent_terms(self, keep_terms = None, threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_17most_frequent_terms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_16most_frequent_terms[] = "\n        \n        The most_frequent_terms function returns the most frequent terms of the corpus using the output of the Term_matrix method. The user has the option \n        \n        to keep a specific number of terms from the output table using the keep_terms parameter.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_17most_frequent_terms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keep_terms = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("most_frequent_terms (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keep_terms,&__pyx_n_s_threads,&__pyx_n_s_verbose,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)__pyx_int_1);
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_terms);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "most_frequent_terms") < 0)) __PYX_ERR(0, 2293, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_keep_terms = values[0];
    __pyx_v_threads = values[1];
    __pyx_v_verbose = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("most_frequent_terms", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2293, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.most_frequent_terms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_16most_frequent_terms(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self), __pyx_v_keep_terms, __pyx_v_threads, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_16most_frequent_terms(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_keep_terms, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_TERMS = NULL;
  struct adjusted_sp_mat __pyx_v_result_freq;
  PyObject *__pyx_v_pd_2dict = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  std::vector<std::string>  __pyx_t_9;
  PY_LONG_LONG __pyx_t_10;
  int __pyx_t_11;
  bool __pyx_t_12;
  __Pyx_RefNannySetupContext("most_frequent_terms", 0);
  __Pyx_INCREF(__pyx_v_keep_terms);

  /* "textTinyPy/textTinyPy.pyx":2303
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_self->result_struct_matrix, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2305
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         if self.adjust_sparsity_matrix == {}:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2305, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2305, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2305, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2303
 *         '''
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2307
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 * 
 *         if self.adjust_sparsity_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             TERMS = self.result_struct_matrix['terms']
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->adjust_sparsity_matrix, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2309
 *         if self.adjust_sparsity_matrix == {}:
 * 
 *             TERMS = self.result_struct_matrix['terms']             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_TERMS = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "textTinyPy/textTinyPy.pyx":2307
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 * 
 *         if self.adjust_sparsity_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             TERMS = self.result_struct_matrix['terms']
 */
    goto __pyx_L4;
  }

  /* "textTinyPy/textTinyPy.pyx":2313
 *         else:
 * 
 *             TERMS = self.adjust_sparsity_matrix['sparsity_terms']             # <<<<<<<<<<<<<<
 * 
 *         if not self.FLAG_output_long:
 */
  /*else*/ {
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_TERMS = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "textTinyPy/textTinyPy.pyx":2315
 *             TERMS = self.adjust_sparsity_matrix['sparsity_terms']
 * 
 *         if not self.FLAG_output_long:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("the most_frequent_terms method is invalid if the normalize parameter is not None or the tf_idf parameter is TRUE"))
 */
  __pyx_t_3 = ((!(__pyx_v_self->FLAG_output_long != 0)) != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2317
 *         if not self.FLAG_output_long:
 * 
 *             raise_with_traceback(ValueError("the most_frequent_terms method is invalid if the normalize parameter is not None or the tf_idf parameter is TRUE"))             # <<<<<<<<<<<<<<
 * 
 *         if keep_terms is not None:
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2317, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2317, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2317, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2317, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "textTinyPy/textTinyPy.pyx":2315
 *             TERMS = self.adjust_sparsity_matrix['sparsity_terms']
 * 
 *         if not self.FLAG_output_long:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("the most_frequent_terms method is invalid if the normalize parameter is not None or the tf_idf parameter is TRUE"))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2319
 *             raise_with_traceback(ValueError("the most_frequent_terms method is invalid if the normalize parameter is not None or the tf_idf parameter is TRUE"))
 * 
 *         if keep_terms is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(keep_terms, int) and keep_terms > 0, 'the keep_terms parameter should be of type integer and greater than 0'
 */
  __pyx_t_3 = (__pyx_v_keep_terms != Py_None);
  __pyx_t_7 = (__pyx_t_3 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":2321
 *         if keep_terms is not None:
 * 
 *             assert isinstance(keep_terms, int) and keep_terms > 0, 'the keep_terms parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2321, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_IsInstance(__pyx_v_keep_terms, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 2321, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (__pyx_t_3 != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_7 = __pyx_t_8;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_keep_terms, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2321, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2321, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __pyx_t_8;
      __pyx_L7_bool_binop_done:;
      if (unlikely(!__pyx_t_7)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_keep_terms_parameter_should);
        __PYX_ERR(0, 2321, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":2319
 *             raise_with_traceback(ValueError("the most_frequent_terms method is invalid if the normalize parameter is not None or the tf_idf parameter is TRUE"))
 * 
 *         if keep_terms is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(keep_terms, int) and keep_terms > 0, 'the keep_terms parameter should be of type integer and greater than 0'
 */
    goto __pyx_L6;
  }

  /* "textTinyPy/textTinyPy.pyx":2325
 *         else:
 * 
 *             keep_terms = 0             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_keep_terms, __pyx_int_0);
  }
  __pyx_L6:;

  /* "textTinyPy/textTinyPy.pyx":2327
 *             keep_terms = 0
 * 
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = (__pyx_t_8 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_7 = __pyx_t_3;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_3;
    __pyx_L9_bool_binop_done:;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_threads_parameter_should_be);
      __PYX_ERR(0, 2327, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2329
 *         assert isinstance(threads, int) and threads > 0, 'the threads parameter should be of type integer and greater than 0'
 * 
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'             # <<<<<<<<<<<<<<
 * 
 *         result_freq = self.dtm.most_freq_terms(TERMS, keep_terms, threads, verbose)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 2329, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_7 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be);
      __PYX_ERR(0, 2329, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2331
 *         assert isinstance(verbose, bool), 'the verbose parameter should be of type boolean'
 * 
 *         result_freq = self.dtm.most_freq_terms(TERMS, keep_terms, threads, verbose)             # <<<<<<<<<<<<<<
 * 
 *         pd_2dict = {}
 */
  __pyx_t_9 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_TERMS); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2331, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_keep_terms); if (unlikely((__pyx_t_10 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2331, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2331, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_12 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2331, __pyx_L1_error)
  __pyx_v_result_freq = __pyx_v_self->dtm->most_freq_terms(__pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

  /* "textTinyPy/textTinyPy.pyx":2333
 *         result_freq = self.dtm.most_freq_terms(TERMS, keep_terms, threads, verbose)
 * 
 *         pd_2dict = {}             # <<<<<<<<<<<<<<
 * 
 *         pd_2dict['terms'] = result_freq.adj_struct_terms
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pd_2dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":2335
 *         pd_2dict = {}
 * 
 *         pd_2dict['terms'] = result_freq.adj_struct_terms             # <<<<<<<<<<<<<<
 * 
 *         pd_2dict['frequency'] = result_freq.index_sparse_mat
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_freq.adj_struct_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_pd_2dict, __pyx_n_s_terms, __pyx_t_1) < 0)) __PYX_ERR(0, 2335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":2337
 *         pd_2dict['terms'] = result_freq.adj_struct_terms
 * 
 *         pd_2dict['frequency'] = result_freq.index_sparse_mat             # <<<<<<<<<<<<<<
 * 
 *         df = pd.DataFrame.from_dict(pd_2dict, orient = 'columns')
 */
  __pyx_t_1 = __pyx_convert_vector_to_py_PY_LONG_LONG(__pyx_v_result_freq.index_sparse_mat); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyDict_SetItem(__pyx_v_pd_2dict, __pyx_n_s_frequency, __pyx_t_1) < 0)) __PYX_ERR(0, 2337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":2339
 *         pd_2dict['frequency'] = result_freq.index_sparse_mat
 * 
 *         df = pd.DataFrame.from_dict(pd_2dict, orient = 'columns')             # <<<<<<<<<<<<<<
 * 
 *         df = df[['terms', 'frequency']]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_from_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_pd_2dict);
  __Pyx_GIVEREF(__pyx_v_pd_2dict);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_pd_2dict);
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_orient, __pyx_n_s_columns) < 0) __PYX_ERR(0, 2339, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_df = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "textTinyPy/textTinyPy.pyx":2341
 *         df = pd.DataFrame.from_dict(pd_2dict, orient = 'columns')
 * 
 *         df = df[['terms', 'frequency']]             # <<<<<<<<<<<<<<
 * 
 *         if keep_terms != 0:
 */
  __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_n_s_terms);
  __Pyx_GIVEREF(__pyx_n_s_terms);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_n_s_terms);
  __Pyx_INCREF(__pyx_n_s_frequency);
  __Pyx_GIVEREF(__pyx_n_s_frequency);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_frequency);
  __pyx_t_5 = PyObject_GetItem(__pyx_v_df, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_df, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "textTinyPy/textTinyPy.pyx":2343
 *         df = df[['terms', 'frequency']]
 * 
 *         if keep_terms != 0:             # <<<<<<<<<<<<<<
 * 
 *             df = df[0:keep_terms]
 */
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_keep_terms, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":2345
 *         if keep_terms != 0:
 * 
 *             df = df[0:keep_terms]             # <<<<<<<<<<<<<<
 * 
 *         return df
 */
    __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_df, 0, 0, NULL, &__pyx_v_keep_terms, NULL, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_df, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "textTinyPy/textTinyPy.pyx":2343
 *         df = df[['terms', 'frequency']]
 * 
 *         if keep_terms != 0:             # <<<<<<<<<<<<<<
 * 
 *             df = df[0:keep_terms]
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2347
 *             df = df[0:keep_terms]
 * 
 *         return df             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_df);
  __pyx_r = __pyx_v_df;
  goto __pyx_L0;

  /* "textTinyPy/textTinyPy.pyx":2293
 * 
 * 
 *     def most_frequent_terms(self, keep_terms = None, threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.most_frequent_terms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_TERMS);
  __Pyx_XDECREF(__pyx_v_pd_2dict);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_keep_terms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "textTinyPy/textTinyPy.pyx":2351
 * 
 * 
 *     def term_associations(self, Terms = None, keep_terms = None, threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

/* Python wrapper */
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_19term_associations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_18term_associations[] = "\n        \n        The term_associations function finds the associations of the given terms with all the other terms in the corpus by calculating their correlation.\n        \n        There is also the option to keep a specific number of terms from the output table using the keep_terms parameter.\n        \n        ";
static PyObject *__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_19term_associations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_Terms = 0;
  PyObject *__pyx_v_keep_terms = 0;
  PyObject *__pyx_v_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("term_associations (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Terms,&__pyx_n_s_keep_terms,&__pyx_n_s_threads,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_int_1);
    values[3] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Terms);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_keep_terms);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_threads);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "term_associations") < 0)) __PYX_ERR(0, 2351, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_Terms = values[0];
    __pyx_v_keep_terms = values[1];
    __pyx_v_threads = values[2];
    __pyx_v_verbose = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("term_associations", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2351, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.term_associations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_18term_associations(((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)__pyx_v_self), __pyx_v_Terms, __pyx_v_keep_terms, __pyx_v_threads, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10textTinyPy_10textTinyPy_11docs_matrix_18term_associations(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *__pyx_v_self, PyObject *__pyx_v_Terms, PyObject *__pyx_v_keep_terms, PyObject *__pyx_v_threads, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_TERMS = NULL;
  PyObject *__pyx_v_single_trgt_idx = NULL;
  PyObject *__pyx_v_single_trgt_nam = NULL;
  PyObject *__pyx_v_count_add = NULL;
  Py_ssize_t __pyx_v_item;
  PyObject *__pyx_v_check_terms = NULL;
  PyObject *__pyx_v_tmp_trm = NULL;
  PyObject *__pyx_v_trgt_size = NULL;
  std::vector<std::string>  __pyx_v_result_zer_val_terms;
  struct struct_cor_assoc __pyx_v_result_tmp_single;
  PyObject *__pyx_v_result_single = NULL;
  PyObject *__pyx_v_remove_idx = NULL;
  PyObject *__pyx_v_df = NULL;
  std::string __pyx_v_tmp_term;
  struct struct_cor_assoc_nested __pyx_v_res_tmp_mult;
  PyObject *__pyx_v_result_mult = NULL;
  PyObject *__pyx_v_return_mult = NULL;
  PyObject *__pyx_v_tmp_vals = NULL;
  Py_ssize_t __pyx_v_nam;
  PyObject *__pyx_v_tmp_dict = NULL;
  PyObject *__pyx_v_tmp_df = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PY_LONG_LONG __pyx_t_15;
  std::vector<std::string>  __pyx_t_16;
  std::vector<int>  __pyx_t_17;
  PY_LONG_LONG __pyx_t_18;
  PY_LONG_LONG __pyx_t_19;
  int __pyx_t_20;
  bool __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  std::vector<std::string> ::iterator __pyx_t_23;
  std::string __pyx_t_24;
  __Pyx_RefNannySetupContext("term_associations", 0);
  __Pyx_INCREF(__pyx_v_keep_terms);

  /* "textTinyPy/textTinyPy.pyx":2362
 * 
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_self->result_struct_matrix, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2364
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         if self.adjust_sparsity_matrix == {}:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2364, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2364, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2364, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2364, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2362
 * 
 * 
 *         if self.result_struct_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2366
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 * 
 *         if self.adjust_sparsity_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             TERMS = self.result_struct_matrix['terms']
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->adjust_sparsity_matrix, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2368
 *         if self.adjust_sparsity_matrix == {}:
 * 
 *             TERMS = self.result_struct_matrix['terms']             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->result_struct_matrix, __pyx_n_s_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_TERMS = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "textTinyPy/textTinyPy.pyx":2366
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))
 * 
 *         if self.adjust_sparsity_matrix == {}:             # <<<<<<<<<<<<<<
 * 
 *             TERMS = self.result_struct_matrix['terms']
 */
    goto __pyx_L4;
  }

  /* "textTinyPy/textTinyPy.pyx":2372
 *         else:
 * 
 *             TERMS = self.adjust_sparsity_matrix['sparsity_terms']             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_1 = PyObject_GetItem(__pyx_v_self->adjust_sparsity_matrix, __pyx_n_s_sparsity_terms); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_TERMS = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "textTinyPy/textTinyPy.pyx":2375
 * 
 * 
 *         assert isinstance(Terms, list), 'the Terms parameter should be a list of character strings'             # <<<<<<<<<<<<<<
 * 
 *         if keep_terms is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = PyList_Check(__pyx_v_Terms); 
    if (unlikely(!(__pyx_t_3 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_Terms_parameter_should_be_a);
      __PYX_ERR(0, 2375, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2377
 *         assert isinstance(Terms, list), 'the Terms parameter should be a list of character strings'
 * 
 *         if keep_terms is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(keep_terms, int) and keep_terms > -1, 'the keep_terms parameter should be of type integer and greater or equal to 0'
 */
  __pyx_t_3 = (__pyx_v_keep_terms != Py_None);
  __pyx_t_7 = (__pyx_t_3 != 0);
  if (__pyx_t_7) {

    /* "textTinyPy/textTinyPy.pyx":2379
 *         if keep_terms is not None:
 * 
 *             assert isinstance(keep_terms, int) and keep_terms > -1, 'the keep_terms parameter should be of type integer and greater or equal to 0'             # <<<<<<<<<<<<<<
 * 
 *             keep_terms += 1                # keep_terms + 1 because I'll remove the target-variable from the end-dataframe
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyObject_IsInstance(__pyx_v_keep_terms, __pyx_t_1); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(0, 2379, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = (__pyx_t_3 != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_7 = __pyx_t_8;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_1 = PyObject_RichCompare(__pyx_v_keep_terms, __pyx_int_neg_1, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2379, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 2379, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_7 = __pyx_t_8;
      __pyx_L6_bool_binop_done:;
      if (unlikely(!__pyx_t_7)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_keep_terms_parameter_should_2);
        __PYX_ERR(0, 2379, __pyx_L1_error)
      }
    }
    #endif

    /* "textTinyPy/textTinyPy.pyx":2381
 *             assert isinstance(keep_terms, int) and keep_terms > -1, 'the keep_terms parameter should be of type integer and greater or equal to 0'
 * 
 *             keep_terms += 1                # keep_terms + 1 because I'll remove the target-variable from the end-dataframe             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_keep_terms, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_keep_terms, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "textTinyPy/textTinyPy.pyx":2377
 *         assert isinstance(Terms, list), 'the Terms parameter should be a list of character strings'
 * 
 *         if keep_terms is not None:             # <<<<<<<<<<<<<<
 * 
 *             assert isinstance(keep_terms, int) and keep_terms > -1, 'the keep_terms parameter should be of type integer and greater or equal to 0'
 */
    goto __pyx_L5;
  }

  /* "textTinyPy/textTinyPy.pyx":2385
 *         else:
 * 
 *             keep_terms = 0             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(threads, int) and threads > 0, "the number of threads should be greater or equal to 1"
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_DECREF_SET(__pyx_v_keep_terms, __pyx_int_0);
  }
  __pyx_L5:;

  /* "textTinyPy/textTinyPy.pyx":2387
 *             keep_terms = 0
 * 
 *         assert isinstance(threads, int) and threads > 0, "the number of threads should be greater or equal to 1"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(verbose, bool), "the verbose parameter should be either TRUE or FALSE"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_IsInstance(__pyx_v_threads, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = (__pyx_t_8 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_7 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_threads, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_3;
    __pyx_L8_bool_binop_done:;
    if (unlikely(!__pyx_t_7)) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_number_of_threads_should_be);
      __PYX_ERR(0, 2387, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2389
 *         assert isinstance(threads, int) and threads > 0, "the number of threads should be greater or equal to 1"
 * 
 *         assert isinstance(verbose, bool), "the verbose parameter should be either TRUE or FALSE"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_7 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_7 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_the_verbose_parameter_should_be_2);
      __PYX_ERR(0, 2389, __pyx_L1_error)
    }
  }
  #endif

  /* "textTinyPy/textTinyPy.pyx":2392
 * 
 * 
 *         single_trgt_idx, single_trgt_nam = [], []             # <<<<<<<<<<<<<<
 * 
 *         count_add = 0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_single_trgt_idx = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_single_trgt_nam = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":2394
 *         single_trgt_idx, single_trgt_nam = [], []
 * 
 *         count_add = 0             # <<<<<<<<<<<<<<
 * 
 *         for item in range(len(Terms)):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_count_add = __pyx_int_0;

  /* "textTinyPy/textTinyPy.pyx":2396
 *         count_add = 0
 * 
 *         for item in range(len(Terms)):             # <<<<<<<<<<<<<<
 * 
 *             check_terms = np.array([i == Terms[item] for i in TERMS])
 */
  __pyx_t_9 = PyObject_Length(__pyx_v_Terms); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2396, __pyx_L1_error)
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_item = __pyx_t_10;

    /* "textTinyPy/textTinyPy.pyx":2398
 *         for item in range(len(Terms)):
 * 
 *             check_terms = np.array([i == Terms[item] for i in TERMS])             # <<<<<<<<<<<<<<
 * 
 *             if not any(check_terms):
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_TERMS)) || PyTuple_CheckExact(__pyx_v_TERMS)) {
      __pyx_t_4 = __pyx_v_TERMS; __Pyx_INCREF(__pyx_t_4); __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_TERMS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2398, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_11); __Pyx_INCREF(__pyx_t_5); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 2398, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2398, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_11); __Pyx_INCREF(__pyx_t_5); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 2398, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2398, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_12(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2398, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Terms, __pyx_v_item, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyObject_RichCompare(__pyx_v_i, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_13))) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2398, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_1};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_check_terms, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2400
 *             check_terms = np.array([i == Terms[item] for i in TERMS])
 * 
 *             if not any(check_terms):             # <<<<<<<<<<<<<<
 * 
 *                 print("the '", Terms[item], "' term does not exist in the terms list", sep = '')
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_check_terms);
    __Pyx_GIVEREF(__pyx_v_check_terms);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_check_terms);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_any, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 2400, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_3 = ((!__pyx_t_7) != 0);
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":2402
 *             if not any(check_terms):
 * 
 *                 print("the '", Terms[item], "' term does not exist in the terms list", sep = '')             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_Terms, __pyx_v_item, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_s_the);
      __Pyx_GIVEREF(__pyx_kp_s_the);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_the);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
      __Pyx_INCREF(__pyx_kp_s_term_does_not_exist_in_the_term);
      __Pyx_GIVEREF(__pyx_kp_s_term_does_not_exist_in_the_term);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_term_does_not_exist_in_the_term);
      __pyx_t_6 = 0;
      __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_sep, __pyx_kp_s__2) < 0) __PYX_ERR(0, 2402, __pyx_L1_error)
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "textTinyPy/textTinyPy.pyx":2400
 *             check_terms = np.array([i == Terms[item] for i in TERMS])
 * 
 *             if not any(check_terms):             # <<<<<<<<<<<<<<
 * 
 *                 print("the '", Terms[item], "' term does not exist in the terms list", sep = '')
 */
      goto __pyx_L14;
    }

    /* "textTinyPy/textTinyPy.pyx":2406
 *             else:
 * 
 *                 tmp_trm = np.where(check_terms == True)[0][0]             # <<<<<<<<<<<<<<
 * 
 *                 single_trgt_idx.append(tmp_trm)
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_where); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_RichCompare(__pyx_v_check_terms, Py_True, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2406, __pyx_L1_error)
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_1) {
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2406, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_6};
          __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2406, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_6};
          __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2406, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_13, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tmp_trm, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "textTinyPy/textTinyPy.pyx":2408
 *                 tmp_trm = np.where(check_terms == True)[0][0]
 * 
 *                 single_trgt_idx.append(tmp_trm)             # <<<<<<<<<<<<<<
 * 
 *                 single_trgt_nam.append(Terms[item])
 */
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_single_trgt_idx, __pyx_v_tmp_trm); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 2408, __pyx_L1_error)

      /* "textTinyPy/textTinyPy.pyx":2410
 *                 single_trgt_idx.append(tmp_trm)
 * 
 *                 single_trgt_nam.append(Terms[item])             # <<<<<<<<<<<<<<
 * 
 *                 count_add += 1
 */
      __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_Terms, __pyx_v_item, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2410, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_single_trgt_nam, __pyx_t_13); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(0, 2410, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "textTinyPy/textTinyPy.pyx":2412
 *                 single_trgt_nam.append(Terms[item])
 * 
 *                 count_add += 1             # <<<<<<<<<<<<<<
 * 
 *         if single_trgt_idx == []:
 */
      __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_v_count_add, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF_SET(__pyx_v_count_add, __pyx_t_13);
      __pyx_t_13 = 0;
    }
    __pyx_L14:;
  }

  /* "textTinyPy/textTinyPy.pyx":2414
 *                 count_add += 1
 * 
 *         if single_trgt_idx == []:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("none of the choosen Terms are present in the terms list"))
 */
  __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_single_trgt_idx, __pyx_t_13, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2416
 *         if single_trgt_idx == []:
 * 
 *             raise_with_traceback(ValueError("none of the choosen Terms are present in the terms list"))             # <<<<<<<<<<<<<<
 * 
 *         if self.FLAG_doc_term_mat:
 */
    __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2416, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2416, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2416, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2414
 *                 count_add += 1
 * 
 *         if single_trgt_idx == []:             # <<<<<<<<<<<<<<
 * 
 *             raise_with_traceback(ValueError("none of the choosen Terms are present in the terms list"))
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2418
 *             raise_with_traceback(ValueError("none of the choosen Terms are present in the terms list"))
 * 
 *         if self.FLAG_doc_term_mat:             # <<<<<<<<<<<<<<
 * 
 *             trgt_size = self.dims[0]
 */
  __pyx_t_3 = (__pyx_v_self->FLAG_doc_term_mat != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2420
 *         if self.FLAG_doc_term_mat:
 * 
 *             trgt_size = self.dims[0]             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->dims, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_trgt_size = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2418
 *             raise_with_traceback(ValueError("none of the choosen Terms are present in the terms list"))
 * 
 *         if self.FLAG_doc_term_mat:             # <<<<<<<<<<<<<<
 * 
 *             trgt_size = self.dims[0]
 */
    goto __pyx_L16;
  }

  /* "textTinyPy/textTinyPy.pyx":2424
 *         else:
 * 
 *             trgt_size = self.dims[1]             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[string] result_zer_val_terms       # cdef for zero-valued-terms
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_self->dims, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_trgt_size = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L16:;

  /* "textTinyPy/textTinyPy.pyx":2428
 *         cdef vector[string] result_zer_val_terms       # cdef for zero-valued-terms
 * 
 *         if len(single_trgt_idx) == 1:             # <<<<<<<<<<<<<<
 * 
 *             self.dtm.Associations_Cpp(trgt_size, TERMS, [], keep_terms, single_trgt_idx[0], threads, verbose)
 */
  __pyx_t_9 = PyList_GET_SIZE(__pyx_v_single_trgt_idx); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2428, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_9 == 1) != 0);
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":2430
 *         if len(single_trgt_idx) == 1:
 * 
 *             self.dtm.Associations_Cpp(trgt_size, TERMS, [], keep_terms, single_trgt_idx[0], threads, verbose)             # <<<<<<<<<<<<<<
 * 
 *             result_tmp_single = self.dtm.return_cor_assoc_T()
 */
    __pyx_t_15 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_trgt_size); if (unlikely((__pyx_t_15 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2430, __pyx_L1_error)
    __pyx_t_16 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_TERMS); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2430, __pyx_L1_error)
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_17 = __pyx_convert_vector_from_py_int(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_18 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_keep_terms); if (unlikely((__pyx_t_18 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2430, __pyx_L1_error)
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_single_trgt_idx, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_19 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_2); if (unlikely((__pyx_t_19 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2430, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2430, __pyx_L1_error)
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_21 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2430, __pyx_L1_error)
    __pyx_v_self->dtm->Associations_Cpp(__pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21);

    /* "textTinyPy/textTinyPy.pyx":2432
 *             self.dtm.Associations_Cpp(trgt_size, TERMS, [], keep_terms, single_trgt_idx[0], threads, verbose)
 * 
 *             result_tmp_single = self.dtm.return_cor_assoc_T()             # <<<<<<<<<<<<<<
 * 
 *             result_single = {}
 */
    __pyx_v_result_tmp_single = __pyx_v_self->dtm->return_cor_assoc_T();

    /* "textTinyPy/textTinyPy.pyx":2434
 *             result_tmp_single = self.dtm.return_cor_assoc_T()
 * 
 *             result_single = {}             # <<<<<<<<<<<<<<
 * 
 *             result_single['term'] = result_tmp_single.term
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_result_single = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2436
 *             result_single = {}
 * 
 *             result_single['term'] = result_tmp_single.term             # <<<<<<<<<<<<<<
 * 
 *             result_single['correlation'] = result_tmp_single.correlation
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_tmp_single.term); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyDict_SetItem(__pyx_v_result_single, __pyx_n_s_term, __pyx_t_2) < 0)) __PYX_ERR(0, 2436, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2438
 *             result_single['term'] = result_tmp_single.term
 * 
 *             result_single['correlation'] = result_tmp_single.correlation             # <<<<<<<<<<<<<<
 * 
 *             remove_idx = np.where(np.array(result_single['term']) == Terms[0])[0][0]         # remove index of target variable
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_result_tmp_single.correlation); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyDict_SetItem(__pyx_v_result_single, __pyx_n_s_correlation, __pyx_t_2) < 0)) __PYX_ERR(0, 2438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2440
 *             result_single['correlation'] = result_tmp_single.correlation
 * 
 *             remove_idx = np.where(np.array(result_single['term']) == Terms[0])[0][0]         # remove index of target variable             # <<<<<<<<<<<<<<
 * 
 *             df = pd.DataFrame(result_single)
 */
    __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_where); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_result_single, __pyx_n_s_term); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_13);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_22 = PyTuple_New(1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_22, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_22, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_Terms, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_22 = PyObject_RichCompare(__pyx_t_13, __pyx_t_6, Py_EQ); __Pyx_XGOTREF(__pyx_t_22); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_22); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2440, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_22};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_t_22};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_GIVEREF(__pyx_t_22);
        PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_22);
        __pyx_t_22 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_remove_idx = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2442
 *             remove_idx = np.where(np.array(result_single['term']) == Terms[0])[0][0]         # remove index of target variable
 * 
 *             df = pd.DataFrame(result_single)             # <<<<<<<<<<<<<<
 * 
 *             df = df[['term', 'correlation']]
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_result_single); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2442, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_result_single};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2442, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_v_result_single};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2442, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else
      #endif
      {
        __pyx_t_22 = PyTuple_New(1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_INCREF(__pyx_v_result_single);
        __Pyx_GIVEREF(__pyx_v_result_single);
        PyTuple_SET_ITEM(__pyx_t_22, 0+1, __pyx_v_result_single);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_v_df = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":2444
 *             df = pd.DataFrame(result_single)
 * 
 *             df = df[['term', 'correlation']]             # <<<<<<<<<<<<<<
 * 
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()
 */
    __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_term);
    __Pyx_GIVEREF(__pyx_n_s_term);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_term);
    __Pyx_INCREF(__pyx_n_s_correlation);
    __Pyx_GIVEREF(__pyx_n_s_correlation);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_correlation);
    __pyx_t_13 = PyObject_GetItem(__pyx_v_df, __pyx_t_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_df, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "textTinyPy/textTinyPy.pyx":2446
 *             df = df[['term', 'correlation']]
 * 
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()             # <<<<<<<<<<<<<<
 * 
 *             if len(result_zer_val_terms) > 0:
 */
    __pyx_v_result_zer_val_terms = __pyx_v_self->dtm->return_zer_value_terms();

    /* "textTinyPy/textTinyPy.pyx":2448
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()
 * 
 *             if len(result_zer_val_terms) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 for tmp_term in result_zer_val_terms:
 */
    __pyx_t_13 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_zer_val_terms); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2448, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_9 = PyObject_Length(__pyx_t_13); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2448, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_3 = ((__pyx_t_9 > 0) != 0);
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":2450
 *             if len(result_zer_val_terms) > 0:
 * 
 *                 for tmp_term in result_zer_val_terms:             # <<<<<<<<<<<<<<
 * 
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')
 */
      __pyx_t_23 = __pyx_v_result_zer_val_terms.begin();
      for (;;) {
        if (!(__pyx_t_23 != __pyx_v_result_zer_val_terms.end())) break;
        __pyx_t_24 = *__pyx_t_23;
        ++__pyx_t_23;
        __pyx_v_tmp_term = __pyx_t_24;

        /* "textTinyPy/textTinyPy.pyx":2452
 *                 for tmp_term in result_zer_val_terms:
 * 
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')             # <<<<<<<<<<<<<<
 * 
 *             return df.drop([remove_idx])
 */
        __pyx_t_13 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_tmp_term); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_kp_s_warning_the);
        __Pyx_GIVEREF(__pyx_kp_s_warning_the);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_warning_the);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_13);
        __Pyx_INCREF(__pyx_kp_s_variable_sums_to_zero);
        __Pyx_GIVEREF(__pyx_kp_s_variable_sums_to_zero);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_s_variable_sums_to_zero);
        __pyx_t_13 = 0;
        __pyx_t_13 = PyDict_New(); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_sep, __pyx_kp_s__2) < 0) __PYX_ERR(0, 2452, __pyx_L1_error)
        __pyx_t_22 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_13); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

        /* "textTinyPy/textTinyPy.pyx":2450
 *             if len(result_zer_val_terms) > 0:
 * 
 *                 for tmp_term in result_zer_val_terms:             # <<<<<<<<<<<<<<
 * 
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')
 */
      }

      /* "textTinyPy/textTinyPy.pyx":2448
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()
 * 
 *             if len(result_zer_val_terms) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 for tmp_term in result_zer_val_terms:
 */
    }

    /* "textTinyPy/textTinyPy.pyx":2454
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')
 * 
 *             return df.drop([remove_idx])             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_df, __pyx_n_s_drop); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_remove_idx);
    __Pyx_GIVEREF(__pyx_v_remove_idx);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_remove_idx);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2454, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_22);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2454, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
        PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_2};
        __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2454, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1); __pyx_t_1 = NULL;
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_6, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_r = __pyx_t_22;
    __pyx_t_22 = 0;
    goto __pyx_L0;

    /* "textTinyPy/textTinyPy.pyx":2428
 *         cdef vector[string] result_zer_val_terms       # cdef for zero-valued-terms
 * 
 *         if len(single_trgt_idx) == 1:             # <<<<<<<<<<<<<<
 * 
 *             self.dtm.Associations_Cpp(trgt_size, TERMS, [], keep_terms, single_trgt_idx[0], threads, verbose)
 */
  }

  /* "textTinyPy/textTinyPy.pyx":2458
 *         else:
 * 
 *             self.dtm.Associations_Cpp(trgt_size, TERMS, single_trgt_idx, keep_terms, -1, threads, verbose)             # <<<<<<<<<<<<<<
 * 
 *             res_tmp_mult = self.dtm.return_nested_cor_assoc_T()
 */
  /*else*/ {
    __pyx_t_19 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_trgt_size); if (unlikely((__pyx_t_19 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2458, __pyx_L1_error)
    __pyx_t_16 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_TERMS); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2458, __pyx_L1_error)
    __pyx_t_17 = __pyx_convert_vector_from_py_int(__pyx_v_single_trgt_idx); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2458, __pyx_L1_error)
    __pyx_t_18 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_keep_terms); if (unlikely((__pyx_t_18 == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 2458, __pyx_L1_error)
    __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_v_threads); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2458, __pyx_L1_error)
    __pyx_t_21 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_21 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2458, __pyx_L1_error)
    __pyx_v_self->dtm->Associations_Cpp(__pyx_t_19, __pyx_t_16, __pyx_t_17, __pyx_t_18, -1LL, __pyx_t_20, __pyx_t_21);

    /* "textTinyPy/textTinyPy.pyx":2460
 *             self.dtm.Associations_Cpp(trgt_size, TERMS, single_trgt_idx, keep_terms, -1, threads, verbose)
 * 
 *             res_tmp_mult = self.dtm.return_nested_cor_assoc_T()             # <<<<<<<<<<<<<<
 * 
 *             result_mult, return_mult = {}, {}
 */
    __pyx_v_res_tmp_mult = __pyx_v_self->dtm->return_nested_cor_assoc_T();

    /* "textTinyPy/textTinyPy.pyx":2462
 *             res_tmp_mult = self.dtm.return_nested_cor_assoc_T()
 * 
 *             result_mult, return_mult = {}, {}             # <<<<<<<<<<<<<<
 * 
 *             result_mult['result_nested'] = res_tmp_mult.result_nested
 */
    __pyx_t_22 = PyDict_New(); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_13 = PyDict_New(); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_v_result_mult = ((PyObject*)__pyx_t_22);
    __pyx_t_22 = 0;
    __pyx_v_return_mult = ((PyObject*)__pyx_t_13);
    __pyx_t_13 = 0;

    /* "textTinyPy/textTinyPy.pyx":2464
 *             result_mult, return_mult = {}, {}
 * 
 *             result_mult['result_nested'] = res_tmp_mult.result_nested             # <<<<<<<<<<<<<<
 * 
 *             tmp_vals = listvalues(result_mult)[0]
 */
    __pyx_t_13 = __pyx_convert_vector_to_py_struct__struct_cor_assoc(__pyx_v_res_tmp_mult.result_nested); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (unlikely(PyDict_SetItem(__pyx_v_result_mult, __pyx_n_s_result_nested, __pyx_t_13) < 0)) __PYX_ERR(0, 2464, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "textTinyPy/textTinyPy.pyx":2466
 *             result_mult['result_nested'] = res_tmp_mult.result_nested
 * 
 *             tmp_vals = listvalues(result_mult)[0]             # <<<<<<<<<<<<<<
 * 
 *             for nam in range(len(single_trgt_nam)):
 */
    __pyx_t_22 = __Pyx_GetModuleGlobalName(__pyx_n_s_listvalues); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_22))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_22);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_22, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_22, __pyx_v_result_mult); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2466, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_22)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_result_mult};
        __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_22, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2466, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_22)) {
        PyObject *__pyx_temp[2] = {__pyx_t_6, __pyx_v_result_mult};
        __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_22, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2466, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else
      #endif
      {
        __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2466, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_result_mult);
        __Pyx_GIVEREF(__pyx_v_result_mult);
        PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_result_mult);
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_22, __pyx_t_2, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2466, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_22 = __Pyx_GetItemInt(__pyx_t_13, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_v_tmp_vals = __pyx_t_22;
    __pyx_t_22 = 0;

    /* "textTinyPy/textTinyPy.pyx":2468
 *             tmp_vals = listvalues(result_mult)[0]
 * 
 *             for nam in range(len(single_trgt_nam)):             # <<<<<<<<<<<<<<
 * 
 *                 tmp_dict = tmp_vals[nam]
 */
    __pyx_t_9 = PyList_GET_SIZE(__pyx_v_single_trgt_nam); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2468, __pyx_L1_error)
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_nam = __pyx_t_10;

      /* "textTinyPy/textTinyPy.pyx":2470
 *             for nam in range(len(single_trgt_nam)):
 * 
 *                 tmp_dict = tmp_vals[nam]             # <<<<<<<<<<<<<<
 * 
 *                 remove_idx = np.where(np.array(tmp_dict['term']) == single_trgt_nam[nam])[0][0]         # remove index of target variable
 */
      __pyx_t_22 = __Pyx_GetItemInt(__pyx_v_tmp_vals, __pyx_v_nam, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_XDECREF_SET(__pyx_v_tmp_dict, __pyx_t_22);
      __pyx_t_22 = 0;

      /* "textTinyPy/textTinyPy.pyx":2472
 *                 tmp_dict = tmp_vals[nam]
 * 
 *                 remove_idx = np.where(np.array(tmp_dict['term']) == single_trgt_nam[nam])[0][0]         # remove index of target variable             # <<<<<<<<<<<<<<
 * 
 *                 tmp_df = pd.DataFrame(tmp_dict)
 */
      __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_where); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_GetItem(__pyx_v_tmp_dict, __pyx_n_s_term); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2472, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
          __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, __pyx_t_6};
          __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_single_trgt_nam, __pyx_v_nam, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_13, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_1) {
        __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2472, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_22);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_5};
          __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
          PyObject *__pyx_temp[2] = {__pyx_t_1, __pyx_t_5};
          __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1); __pyx_t_1 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_13, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2472, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_22, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __pyx_t_22 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2472, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_remove_idx, __pyx_t_22);
      __pyx_t_22 = 0;

      /* "textTinyPy/textTinyPy.pyx":2474
 *                 remove_idx = np.where(np.array(tmp_dict['term']) == single_trgt_nam[nam])[0][0]         # remove index of target variable
 * 
 *                 tmp_df = pd.DataFrame(tmp_dict)             # <<<<<<<<<<<<<<
 * 
 *                 tmp_df = tmp_df[['term', 'correlation']]
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2474, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_13);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_13, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_22 = __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_v_tmp_dict); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2474, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_13)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_tmp_dict};
          __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2474, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_22);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_v_tmp_dict};
          __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2474, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_22);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2474, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_INCREF(__pyx_v_tmp_dict);
          __Pyx_GIVEREF(__pyx_v_tmp_dict);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_tmp_dict);
          __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_5, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2474, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF_SET(__pyx_v_tmp_df, __pyx_t_22);
      __pyx_t_22 = 0;

      /* "textTinyPy/textTinyPy.pyx":2476
 *                 tmp_df = pd.DataFrame(tmp_dict)
 * 
 *                 tmp_df = tmp_df[['term', 'correlation']]             # <<<<<<<<<<<<<<
 * 
 *                 tmp_df = tmp_df.drop([remove_idx])
 */
      __pyx_t_22 = PyList_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2476, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_INCREF(__pyx_n_s_term);
      __Pyx_GIVEREF(__pyx_n_s_term);
      PyList_SET_ITEM(__pyx_t_22, 0, __pyx_n_s_term);
      __Pyx_INCREF(__pyx_n_s_correlation);
      __Pyx_GIVEREF(__pyx_n_s_correlation);
      PyList_SET_ITEM(__pyx_t_22, 1, __pyx_n_s_correlation);
      __pyx_t_13 = PyObject_GetItem(__pyx_v_tmp_df, __pyx_t_22); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2476, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF_SET(__pyx_v_tmp_df, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "textTinyPy/textTinyPy.pyx":2478
 *                 tmp_df = tmp_df[['term', 'correlation']]
 * 
 *                 tmp_df = tmp_df.drop([remove_idx])             # <<<<<<<<<<<<<<
 * 
 *                 return_mult[single_trgt_nam[nam]] = tmp_df
 */
      __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp_df, __pyx_n_s_drop); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2478, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_v_remove_idx);
      __Pyx_GIVEREF(__pyx_v_remove_idx);
      PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_remove_idx);
      __pyx_t_2 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_22))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_22);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_22, function);
        }
      }
      if (!__pyx_t_2) {
        __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_22, __pyx_t_5); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2478, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_13);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_22)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
          __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_22, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2478, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_22)) {
          PyObject *__pyx_temp[2] = {__pyx_t_2, __pyx_t_5};
          __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_22, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2478, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2478, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_22, __pyx_t_1, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2478, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF_SET(__pyx_v_tmp_df, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "textTinyPy/textTinyPy.pyx":2480
 *                 tmp_df = tmp_df.drop([remove_idx])
 * 
 *                 return_mult[single_trgt_nam[nam]] = tmp_df             # <<<<<<<<<<<<<<
 * 
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()
 */
      __pyx_t_13 = __Pyx_GetItemInt_List(__pyx_v_single_trgt_nam, __pyx_v_nam, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (unlikely(PyDict_SetItem(__pyx_v_return_mult, __pyx_t_13, __pyx_v_tmp_df) < 0)) __PYX_ERR(0, 2480, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }

    /* "textTinyPy/textTinyPy.pyx":2482
 *                 return_mult[single_trgt_nam[nam]] = tmp_df
 * 
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()             # <<<<<<<<<<<<<<
 * 
 *             if len(result_zer_val_terms) > 0:
 */
    __pyx_v_result_zer_val_terms = __pyx_v_self->dtm->return_zer_value_terms();

    /* "textTinyPy/textTinyPy.pyx":2484
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()
 * 
 *             if len(result_zer_val_terms) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 for tmp_term in result_zer_val_terms:
 */
    __pyx_t_13 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_result_zer_val_terms); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_9 = PyObject_Length(__pyx_t_13); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 2484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_3 = ((__pyx_t_9 > 0) != 0);
    if (__pyx_t_3) {

      /* "textTinyPy/textTinyPy.pyx":2486
 *             if len(result_zer_val_terms) > 0:
 * 
 *                 for tmp_term in result_zer_val_terms:             # <<<<<<<<<<<<<<
 * 
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')
 */
      __pyx_t_23 = __pyx_v_result_zer_val_terms.begin();
      for (;;) {
        if (!(__pyx_t_23 != __pyx_v_result_zer_val_terms.end())) break;
        __pyx_t_24 = *__pyx_t_23;
        ++__pyx_t_23;
        __pyx_v_tmp_term = __pyx_t_24;

        /* "textTinyPy/textTinyPy.pyx":2488
 *                 for tmp_term in result_zer_val_terms:
 * 
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')             # <<<<<<<<<<<<<<
 * 
 *             return return_mult
 */
        __pyx_t_13 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_tmp_term); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_22 = PyTuple_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_INCREF(__pyx_kp_s_warning_the);
        __Pyx_GIVEREF(__pyx_kp_s_warning_the);
        PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_kp_s_warning_the);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_13);
        __Pyx_INCREF(__pyx_kp_s_variable_sums_to_zero);
        __Pyx_GIVEREF(__pyx_kp_s_variable_sums_to_zero);
        PyTuple_SET_ITEM(__pyx_t_22, 2, __pyx_kp_s_variable_sums_to_zero);
        __pyx_t_13 = 0;
        __pyx_t_13 = PyDict_New(); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_sep, __pyx_kp_s__2) < 0) __PYX_ERR(0, 2488, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_22, __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2488, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "textTinyPy/textTinyPy.pyx":2486
 *             if len(result_zer_val_terms) > 0:
 * 
 *                 for tmp_term in result_zer_val_terms:             # <<<<<<<<<<<<<<
 * 
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')
 */
      }

      /* "textTinyPy/textTinyPy.pyx":2484
 *             result_zer_val_terms = self.dtm.return_zer_value_terms()
 * 
 *             if len(result_zer_val_terms) > 0:             # <<<<<<<<<<<<<<
 * 
 *                 for tmp_term in result_zer_val_terms:
 */
    }

    /* "textTinyPy/textTinyPy.pyx":2490
 *                     print("warning: the '", tmp_term, "' variable sums to zero", sep = '')
 * 
 *             return return_mult             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_return_mult);
    __pyx_r = __pyx_v_return_mult;
    goto __pyx_L0;
  }

  /* "textTinyPy/textTinyPy.pyx":2351
 * 
 * 
 *     def term_associations(self, Terms = None, keep_terms = None, threads = 1, verbose = False):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("textTinyPy.textTinyPy.docs_matrix.term_associations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_TERMS);
  __Pyx_XDECREF(__pyx_v_single_trgt_idx);
  __Pyx_XDECREF(__pyx_v_single_trgt_nam);
  __Pyx_XDECREF(__pyx_v_count_add);
  __Pyx_XDECREF(__pyx_v_check_terms);
  __Pyx_XDECREF(__pyx_v_tmp_trm);
  __Pyx_XDECREF(__pyx_v_trgt_size);
  __Pyx_XDECREF(__pyx_v_result_single);
  __Pyx_XDECREF(__pyx_v_remove_idx);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_result_mult);
  __Pyx_XDECREF(__pyx_v_return_mult);
  __Pyx_XDECREF(__pyx_v_tmp_vals);
  __Pyx_XDECREF(__pyx_v_tmp_dict);
  __Pyx_XDECREF(__pyx_v_tmp_df);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_keep_terms);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 52, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 52, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 53, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(const std::vector<std::vector<std::string> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":227
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____int")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____int(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____int(std::unordered_map<std::string,int>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<std::string,int> ::value_type const *__pyx_v_key_value;
  std::unordered_map<std::string,int> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_std_3a__3a_string____int", 0);

  /* "map.to_py":228
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____int")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____int(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":230
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":231
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":232
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":233
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyObject_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":234
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (++__pyx_v_iter);
  }

  /* "map.to_py":235
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____int")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____int(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_std_3a__3a_string____int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<int,std::vector<std::string> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<int,std::vector<std::string> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<int,std::vector<std::string> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___", 0);

  /* "map.to_py":228
 * @cname("__pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":230
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":231
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":232
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":233
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":234
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (++__pyx_v_iter);
  }

  /* "map.to_py":235
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_int____std_3a__3a_vector_3c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___(std::unordered_map<std::string,std::unordered_map<std::string,int> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<std::string,std::unordered_map<std::string,int> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<std::string,std::unordered_map<std::string,int> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___", 0);

  /* "map.to_py":228
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":230
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":231
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":232
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":233
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____int(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyObject_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":234
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (++__pyx_v_iter);
  }

  /* "map.to_py":235
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_unordered_map_3c_std_3a__3a_string_2c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(const std::vector<std::vector<double> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_vector_to_py_double((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_double_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":227
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<std::string,std::vector<std::string> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<std::string,std::vector<std::string> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<std::string,std::vector<std::string> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___", 0);

  /* "map.to_py":228
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":230
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":231
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":232
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":233
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyObject_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":234
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (++__pyx_v_iter);
  }

  /* "map.to_py":235
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_PY_LONG_LONG")
 * cdef object __pyx_convert_vector_to_py_PY_LONG_LONG(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_PY_LONG_LONG(const std::vector<PY_LONG_LONG>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_PY_LONG_LONG", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_PY_LONG_LONG")
 * cdef object __pyx_convert_vector_to_py_PY_LONG_LONG(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_PY_LONG_LONG((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_PY_LONG_LONG")
 * cdef object __pyx_convert_vector_to_py_PY_LONG_LONG(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_PY_LONG_LONG", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__struct_cor_assoc")
 * cdef object __pyx_convert_vector_to_py_struct__struct_cor_assoc(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_struct__struct_cor_assoc(const std::vector<struct struct_cor_assoc>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct__struct_cor_assoc", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_struct__struct_cor_assoc")
 * cdef object __pyx_convert_vector_to_py_struct__struct_cor_assoc(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert__to_py_struct__struct_cor_assoc((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__struct_cor_assoc")
 * cdef object __pyx_convert_vector_to_py_struct__struct_cor_assoc(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct__struct_cor_assoc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_tokenizer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10textTinyPy_10textTinyPy_tokenizer(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10textTinyPy_10textTinyPy_tokenizer[] = {
  {"transform_text", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_5transform_text, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_9tokenizer_4transform_text},
  {"transform_vec_docs", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_9tokenizer_7transform_vec_docs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_9tokenizer_6transform_vec_docs},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10textTinyPy_10textTinyPy_tokenizer = {
  PyVarObject_HEAD_INIT(0, 0)
  "textTinyPy.textTinyPy.tokenizer", /*tp_name*/
  sizeof(struct __pyx_obj_10textTinyPy_10textTinyPy_tokenizer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10textTinyPy_10textTinyPy_tokenizer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10textTinyPy_10textTinyPy_tokenizer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10textTinyPy_10textTinyPy_tokenizer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_big_text_files(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10textTinyPy_10textTinyPy_big_text_files(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10textTinyPy_10textTinyPy_big_text_files[] = {
  {"big_text_splitter", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_5big_text_splitter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_4big_text_splitter},
  {"big_text_parser", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_7big_text_parser, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_6big_text_parser},
  {"big_text_tokenizer", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_9big_text_tokenizer, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_8big_text_tokenizer},
  {"vocabulary_accumulator", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_14big_text_files_11vocabulary_accumulator, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_14big_text_files_10vocabulary_accumulator},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10textTinyPy_10textTinyPy_big_text_files = {
  PyVarObject_HEAD_INIT(0, 0)
  "textTinyPy.textTinyPy.big_text_files", /*tp_name*/
  sizeof(struct __pyx_obj_10textTinyPy_10textTinyPy_big_text_files), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10textTinyPy_10textTinyPy_big_text_files, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10textTinyPy_10textTinyPy_big_text_files, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10textTinyPy_10textTinyPy_big_text_files, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_utils(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_10textTinyPy_10textTinyPy_5utils_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10textTinyPy_10textTinyPy_utils(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10textTinyPy_10textTinyPy_5utils_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10textTinyPy_10textTinyPy_utils[] = {
  {"vocabulary_parser", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_5vocabulary_parser, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_4vocabulary_parser},
  {"utf_locale", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_7utf_locale, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_6utf_locale},
  {"bytes_converter", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_9bytes_converter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_8bytes_converter},
  {"text_file_parser", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_11text_file_parser, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_10text_file_parser},
  {"dice_distance", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_13dice_distance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_12dice_distance},
  {"levenshtein_distance", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_15levenshtein_distance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_14levenshtein_distance},
  {"cosine_distance", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_17cosine_distance, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_16cosine_distance},
  {"read_characters", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_19read_characters, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_18read_characters},
  {"read_rows", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_21read_rows, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_20read_rows},
  {"xml_parser_subroot_elements", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_23xml_parser_subroot_elements, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_22xml_parser_subroot_elements},
  {"xml_parser_root_elements", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_5utils_25xml_parser_root_elements, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_5utils_24xml_parser_root_elements},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10textTinyPy_10textTinyPy_utils = {
  PyVarObject_HEAD_INIT(0, 0)
  "textTinyPy.textTinyPy.utils", /*tp_name*/
  sizeof(struct __pyx_obj_10textTinyPy_10textTinyPy_utils), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10textTinyPy_10textTinyPy_utils, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10textTinyPy_10textTinyPy_utils, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10textTinyPy_10textTinyPy_utils, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_token_stats(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)o);
  p->result_counts = Py_None; Py_INCREF(Py_None);
  p->result_collocations = Py_None; Py_INCREF(Py_None);
  p->result_look_up_tbl = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10textTinyPy_10textTinyPy_token_stats(PyObject *o) {
  struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *p = (struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10textTinyPy_10textTinyPy_11token_stats_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->result_counts);
  Py_CLEAR(p->result_collocations);
  Py_CLEAR(p->result_look_up_tbl);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10textTinyPy_10textTinyPy_token_stats(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *p = (struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)o;
  if (p->result_counts) {
    e = (*v)(p->result_counts, a); if (e) return e;
  }
  if (p->result_collocations) {
    e = (*v)(p->result_collocations, a); if (e) return e;
  }
  if (p->result_look_up_tbl) {
    e = (*v)(p->result_look_up_tbl, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10textTinyPy_10textTinyPy_token_stats(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *p = (struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats *)o;
  tmp = ((PyObject*)p->result_counts);
  p->result_counts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->result_collocations);
  p->result_collocations = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->result_look_up_tbl);
  p->result_look_up_tbl = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10textTinyPy_10textTinyPy_token_stats[] = {
  {"path_2vector", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_5path_2vector, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_4path_2vector},
  {"freq_distribution", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_7freq_distribution, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_6freq_distribution},
  {"count_character", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_9count_character, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_8count_character},
  {"print_count_character", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_11print_count_character, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_10print_count_character},
  {"collocation_words", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_13collocation_words, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_12collocation_words},
  {"print_collocations", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_15print_collocations, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_14print_collocations},
  {"string_dissimilarity_matrix", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_17string_dissimilarity_matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_16string_dissimilarity_matrix},
  {"look_up_table", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_19look_up_table, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_18look_up_table},
  {"print_words_lookup_tbl", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11token_stats_21print_words_lookup_tbl, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11token_stats_20print_words_lookup_tbl},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10textTinyPy_10textTinyPy_token_stats = {
  PyVarObject_HEAD_INIT(0, 0)
  "textTinyPy.textTinyPy.token_stats", /*tp_name*/
  sizeof(struct __pyx_obj_10textTinyPy_10textTinyPy_token_stats), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10textTinyPy_10textTinyPy_token_stats, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10textTinyPy_10textTinyPy_token_stats, /*tp_traverse*/
  __pyx_tp_clear_10textTinyPy_10textTinyPy_token_stats, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10textTinyPy_10textTinyPy_token_stats, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10textTinyPy_10textTinyPy_token_stats, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10textTinyPy_10textTinyPy_docs_matrix(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)o);
  p->result_struct_matrix = Py_None; Py_INCREF(Py_None);
  p->adjust_sparsity_matrix = Py_None; Py_INCREF(Py_None);
  p->sp_mat = Py_None; Py_INCREF(Py_None);
  p->dims = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10textTinyPy_10textTinyPy_docs_matrix(PyObject *o) {
  struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *p = (struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->result_struct_matrix);
  Py_CLEAR(p->adjust_sparsity_matrix);
  Py_CLEAR(p->sp_mat);
  Py_CLEAR(p->dims);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10textTinyPy_10textTinyPy_docs_matrix(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *p = (struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)o;
  if (p->result_struct_matrix) {
    e = (*v)(p->result_struct_matrix, a); if (e) return e;
  }
  if (p->adjust_sparsity_matrix) {
    e = (*v)(p->adjust_sparsity_matrix, a); if (e) return e;
  }
  if (p->sp_mat) {
    e = (*v)(p->sp_mat, a); if (e) return e;
  }
  if (p->dims) {
    e = (*v)(p->dims, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10textTinyPy_10textTinyPy_docs_matrix(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *p = (struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix *)o;
  tmp = ((PyObject*)p->result_struct_matrix);
  p->result_struct_matrix = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->adjust_sparsity_matrix);
  p->adjust_sparsity_matrix = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->sp_mat);
  p->sp_mat = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->dims);
  p->dims = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10textTinyPy_10textTinyPy_docs_matrix[] = {
  {"Term_Matrix", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_5Term_Matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_4Term_Matrix},
  {"document_term_matrix", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_7document_term_matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_6document_term_matrix},
  {"term_document_matrix", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_9term_document_matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_8term_document_matrix},
  {"corpus_terms", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_11corpus_terms, METH_NOARGS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_10corpus_terms},
  {"Sparsity", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_13Sparsity, METH_NOARGS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_12Sparsity},
  {"Term_Matrix_Adjust", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_15Term_Matrix_Adjust, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_14Term_Matrix_Adjust},
  {"most_frequent_terms", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_17most_frequent_terms, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_16most_frequent_terms},
  {"term_associations", (PyCFunction)__pyx_pw_10textTinyPy_10textTinyPy_11docs_matrix_19term_associations, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10textTinyPy_10textTinyPy_11docs_matrix_18term_associations},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10textTinyPy_10textTinyPy_docs_matrix = {
  PyVarObject_HEAD_INIT(0, 0)
  "textTinyPy.textTinyPy.docs_matrix", /*tp_name*/
  sizeof(struct __pyx_obj_10textTinyPy_10textTinyPy_docs_matrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10textTinyPy_10textTinyPy_docs_matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10textTinyPy_10textTinyPy_docs_matrix, /*tp_traverse*/
  __pyx_tp_clear_10textTinyPy_10textTinyPy_docs_matrix, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10textTinyPy_10textTinyPy_docs_matrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10textTinyPy_10textTinyPy_docs_matrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "textTinyPy",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_GB, __pyx_k_GB, sizeof(__pyx_k_GB), 0, 0, 1, 1},
  {&__pyx_n_s_KB, __pyx_k_KB, sizeof(__pyx_k_KB), 0, 0, 1, 1},
  {&__pyx_n_s_LOCALE_UTF, __pyx_k_LOCALE_UTF, sizeof(__pyx_k_LOCALE_UTF), 0, 0, 1, 1},
  {&__pyx_n_s_MAX_VAL, __pyx_k_MAX_VAL, sizeof(__pyx_k_MAX_VAL), 0, 0, 1, 1},
  {&__pyx_n_s_MB, __pyx_k_MB, sizeof(__pyx_k_MB), 0, 0, 1, 1},
  {&__pyx_n_s_NULL, __pyx_k_NULL, sizeof(__pyx_k_NULL), 0, 0, 1, 1},
  {&__pyx_n_s_REMOVE_characters, __pyx_k_REMOVE_characters, sizeof(__pyx_k_REMOVE_characters), 0, 0, 1, 1},
  {&__pyx_n_s_Terms, __pyx_k_Terms, sizeof(__pyx_k_Terms), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_n_s__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 0, 1, 1},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__37, __pyx_k__37, sizeof(__pyx_k__37), 0, 0, 1, 0},
  {&__pyx_kp_s__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 1, 0},
  {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {&__pyx_kp_s_a_sparsity_thresh_of, __pyx_k_a_sparsity_thresh_of, sizeof(__pyx_k_a_sparsity_thresh_of), 0, 0, 1, 0},
  {&__pyx_n_s_afrikaans, __pyx_k_afrikaans, sizeof(__pyx_k_afrikaans), 0, 0, 1, 1},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arabic, __pyx_k_arabic, sizeof(__pyx_k_arabic), 0, 0, 1, 1},
  {&__pyx_n_s_armenian, __pyx_k_armenian, sizeof(__pyx_k_armenian), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_as_matrix, __pyx_k_as_matrix, sizeof(__pyx_k_as_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_as_token, __pyx_k_as_token, sizeof(__pyx_k_as_token), 0, 0, 1, 1},
  {&__pyx_n_s_ascending, __pyx_k_ascending, sizeof(__pyx_k_ascending), 0, 0, 1, 1},
  {&__pyx_kp_s_available_languages_in_case_of_s, __pyx_k_available_languages_in_case_of_s, sizeof(__pyx_k_available_languages_in_case_of_s), 0, 0, 1, 0},
  {&__pyx_kp_s_available_languages_in_case_of_s_2, __pyx_k_available_languages_in_case_of_s_2, sizeof(__pyx_k_available_languages_in_case_of_s_2), 0, 0, 1, 0},
  {&__pyx_kp_s_available_methods_are_dice_leven, __pyx_k_available_methods_are_dice_leven, sizeof(__pyx_k_available_methods_are_dice_leven), 0, 0, 1, 0},
  {&__pyx_kp_s_available_normalization_methods, __pyx_k_available_normalization_methods, sizeof(__pyx_k_available_normalization_methods), 0, 0, 1, 0},
  {&__pyx_kp_s_available_stemmers_are_porter2_s, __pyx_k_available_stemmers_are_porter2_s, sizeof(__pyx_k_available_stemmers_are_porter2_s), 0, 0, 1, 0},
  {&__pyx_kp_s_available_units_are_KB_MB_or_GB, __pyx_k_available_units_are_KB_MB_or_GB, sizeof(__pyx_k_available_units_are_KB_MB_or_GB), 0, 0, 1, 0},
  {&__pyx_n_s_basestring, __pyx_k_basestring, sizeof(__pyx_k_basestring), 0, 0, 1, 1},
  {&__pyx_n_s_basque, __pyx_k_basque, sizeof(__pyx_k_basque), 0, 0, 1, 1},
  {&__pyx_n_s_batches, __pyx_k_batches, sizeof(__pyx_k_batches), 0, 0, 1, 1},
  {&__pyx_n_s_bengali, __pyx_k_bengali, sizeof(__pyx_k_bengali), 0, 0, 1, 1},
  {&__pyx_n_s_breton, __pyx_k_breton, sizeof(__pyx_k_breton), 0, 0, 1, 1},
  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_bulgarian, __pyx_k_bulgarian, sizeof(__pyx_k_bulgarian), 0, 0, 1, 1},
  {&__pyx_n_s_catalan, __pyx_k_catalan, sizeof(__pyx_k_catalan), 0, 0, 1, 1},
  {&__pyx_n_s_characters, __pyx_k_characters, sizeof(__pyx_k_characters), 0, 0, 1, 1},
  {&__pyx_n_s_child_keys, __pyx_k_child_keys, sizeof(__pyx_k_child_keys), 0, 0, 1, 1},
  {&__pyx_n_s_child_values, __pyx_k_child_values, sizeof(__pyx_k_child_values), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_concat_delimiter, __pyx_k_concat_delimiter, sizeof(__pyx_k_concat_delimiter), 0, 0, 1, 1},
  {&__pyx_n_s_correlation, __pyx_k_correlation, sizeof(__pyx_k_correlation), 0, 0, 1, 1},
  {&__pyx_n_s_cosine, __pyx_k_cosine, sizeof(__pyx_k_cosine), 0, 0, 1, 1},
  {&__pyx_n_s_counts, __pyx_k_counts, sizeof(__pyx_k_counts), 0, 0, 1, 1},
  {&__pyx_n_s_croatian, __pyx_k_croatian, sizeof(__pyx_k_croatian), 0, 0, 1, 1},
  {&__pyx_n_s_csc_matrix, __pyx_k_csc_matrix, sizeof(__pyx_k_csc_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_csr_matrix, __pyx_k_csr_matrix, sizeof(__pyx_k_csr_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_czech, __pyx_k_czech, sizeof(__pyx_k_czech), 0, 0, 1, 1},
  {&__pyx_n_s_danish, __pyx_k_danish, sizeof(__pyx_k_danish), 0, 0, 1, 1},
  {&__pyx_n_s_decimals, __pyx_k_decimals, sizeof(__pyx_k_decimals), 0, 0, 1, 1},
  {&__pyx_n_s_diagonal, __pyx_k_diagonal, sizeof(__pyx_k_diagonal), 0, 0, 1, 1},
  {&__pyx_n_s_dice, __pyx_k_dice, sizeof(__pyx_k_dice), 0, 0, 1, 1},
  {&__pyx_n_s_dice_n_gram, __pyx_k_dice_n_gram, sizeof(__pyx_k_dice_n_gram), 0, 0, 1, 1},
  {&__pyx_n_s_dice_thresh, __pyx_k_dice_thresh, sizeof(__pyx_k_dice_thresh), 0, 0, 1, 1},
  {&__pyx_n_s_drop, __pyx_k_drop, sizeof(__pyx_k_drop), 0, 0, 1, 1},
  {&__pyx_n_s_dutch, __pyx_k_dutch, sizeof(__pyx_k_dutch), 0, 0, 1, 1},
  {&__pyx_kp_s_either_the_vector_documents_or_t, __pyx_k_either_the_vector_documents_or_t, sizeof(__pyx_k_either_the_vector_documents_or_t), 0, 0, 1, 0},
  {&__pyx_kp_s_either_the_vector_documents_or_t_2, __pyx_k_either_the_vector_documents_or_t_2, sizeof(__pyx_k_either_the_vector_documents_or_t_2), 0, 0, 1, 0},
  {&__pyx_n_s_empty_key, __pyx_k_empty_key, sizeof(__pyx_k_empty_key), 0, 0, 1, 1},
  {&__pyx_n_s_end_query, __pyx_k_end_query, sizeof(__pyx_k_end_query), 0, 0, 1, 1},
  {&__pyx_n_s_english, __pyx_k_english, sizeof(__pyx_k_english), 0, 0, 1, 1},
  {&__pyx_n_s_estonian, __pyx_k_estonian, sizeof(__pyx_k_estonian), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_file_delimiter, __pyx_k_file_delimiter, sizeof(__pyx_k_file_delimiter), 0, 0, 1, 1},
  {&__pyx_n_s_finnish, __pyx_k_finnish, sizeof(__pyx_k_finnish), 0, 0, 1, 1},
  {&__pyx_n_s_french, __pyx_k_french, sizeof(__pyx_k_french), 0, 0, 1, 1},
  {&__pyx_n_s_freq, __pyx_k_freq, sizeof(__pyx_k_freq), 0, 0, 1, 1},
  {&__pyx_n_s_frequency, __pyx_k_frequency, sizeof(__pyx_k_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_from_dict, __pyx_k_from_dict, sizeof(__pyx_k_from_dict), 0, 0, 1, 1},
  {&__pyx_n_s_future_utils, __pyx_k_future_utils, sizeof(__pyx_k_future_utils), 0, 0, 1, 1},
  {&__pyx_n_s_galician, __pyx_k_galician, sizeof(__pyx_k_galician), 0, 0, 1, 1},
  {&__pyx_n_s_german, __pyx_k_german, sizeof(__pyx_k_german), 0, 0, 1, 1},
  {&__pyx_kp_s_give_the_path_to_a_valid_folder, __pyx_k_give_the_path_to_a_valid_folder, sizeof(__pyx_k_give_the_path_to_a_valid_folder), 0, 0, 1, 0},
  {&__pyx_n_s_greek, __pyx_k_greek, sizeof(__pyx_k_greek), 0, 0, 1, 1},
  {&__pyx_n_s_hausa, __pyx_k_hausa, sizeof(__pyx_k_hausa), 0, 0, 1, 1},
  {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
  {&__pyx_n_s_hebrew, __pyx_k_hebrew, sizeof(__pyx_k_hebrew), 0, 0, 1, 1},
  {&__pyx_n_s_hindi, __pyx_k_hindi, sizeof(__pyx_k_hindi), 0, 0, 1, 1},
  {&__pyx_n_s_hungarian, __pyx_k_hungarian, sizeof(__pyx_k_hungarian), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_kp_s_in_case_that_the_batches_paramet, __pyx_k_in_case_that_the_batches_paramet, sizeof(__pyx_k_in_case_that_the_batches_paramet), 0, 0, 1, 0},
  {&__pyx_n_s_increment_batch_no, __pyx_k_increment_batch_no, sizeof(__pyx_k_increment_batch_no), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_indonesian, __pyx_k_indonesian, sizeof(__pyx_k_indonesian), 0, 0, 1, 1},
  {&__pyx_n_s_input_file, __pyx_k_input_file, sizeof(__pyx_k_input_file), 0, 0, 1, 1},
  {&__pyx_n_s_input_list, __pyx_k_input_list, sizeof(__pyx_k_input_list), 0, 0, 1, 1},
  {&__pyx_n_s_input_path_file, __pyx_k_input_path_file, sizeof(__pyx_k_input_path_file), 0, 0, 1, 1},
  {&__pyx_n_s_input_path_folder, __pyx_k_input_path_folder, sizeof(__pyx_k_input_path_folder), 0, 0, 1, 1},
  {&__pyx_n_s_input_string, __pyx_k_input_string, sizeof(__pyx_k_input_string), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_irish, __pyx_k_irish, sizeof(__pyx_k_irish), 0, 0, 1, 1},
  {&__pyx_n_s_italian, __pyx_k_italian, sizeof(__pyx_k_italian), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_keep, __pyx_k_keep, sizeof(__pyx_k_keep), 0, 0, 1, 1},
  {&__pyx_n_s_keep_terms, __pyx_k_keep_terms, sizeof(__pyx_k_keep_terms), 0, 0, 1, 1},
  {&__pyx_n_s_l1, __pyx_k_l1, sizeof(__pyx_k_l1), 0, 0, 1, 1},
  {&__pyx_n_s_l2, __pyx_k_l2, sizeof(__pyx_k_l2), 0, 0, 1, 1},
  {&__pyx_n_s_language, __pyx_k_language, sizeof(__pyx_k_language), 0, 0, 1, 1},
  {&__pyx_n_s_latvian, __pyx_k_latvian, sizeof(__pyx_k_latvian), 0, 0, 1, 1},
  {&__pyx_n_s_levenshtein, __pyx_k_levenshtein, sizeof(__pyx_k_levenshtein), 0, 0, 1, 1},
  {&__pyx_n_s_listvalues, __pyx_k_listvalues, sizeof(__pyx_k_listvalues), 0, 0, 1, 1},
  {&__pyx_n_s_locale, __pyx_k_locale, sizeof(__pyx_k_locale), 0, 0, 1, 1},
  {&__pyx_kp_s_locale_stopword_encoding_csv, __pyx_k_locale_stopword_encoding_csv, sizeof(__pyx_k_locale_stopword_encoding_csv), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_major, __pyx_k_major, sizeof(__pyx_k_major), 0, 0, 1, 1},
  {&__pyx_n_s_marathi, __pyx_k_marathi, sizeof(__pyx_k_marathi), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_n_gram, __pyx_k_max_n_gram, sizeof(__pyx_k_max_n_gram), 0, 0, 1, 1},
  {&__pyx_n_s_max_num_char, __pyx_k_max_num_char, sizeof(__pyx_k_max_num_char), 0, 0, 1, 1},
  {&__pyx_n_s_max_num_chars, __pyx_k_max_num_chars, sizeof(__pyx_k_max_num_chars), 0, 0, 1, 1},
  {&__pyx_n_s_maxint, __pyx_k_maxint, sizeof(__pyx_k_maxint), 0, 0, 1, 1},
  {&__pyx_n_s_maxsize, __pyx_k_maxsize, sizeof(__pyx_k_maxsize), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_min_lines, __pyx_k_min_lines, sizeof(__pyx_k_min_lines), 0, 0, 1, 1},
  {&__pyx_n_s_min_n_gram, __pyx_k_min_n_gram, sizeof(__pyx_k_min_n_gram), 0, 0, 1, 1},
  {&__pyx_n_s_min_num_char, __pyx_k_min_num_char, sizeof(__pyx_k_min_num_char), 0, 0, 1, 1},
  {&__pyx_n_s_n_gram, __pyx_k_n_gram, sizeof(__pyx_k_n_gram), 0, 0, 1, 1},
  {&__pyx_n_s_n_gram_delimiter, __pyx_k_n_gram_delimiter, sizeof(__pyx_k_n_gram_delimiter), 0, 0, 1, 1},
  {&__pyx_n_s_n_grams, __pyx_k_n_grams, sizeof(__pyx_k_n_grams), 0, 0, 1, 1},
  {&__pyx_n_s_ngram_overlap, __pyx_k_ngram_overlap, sizeof(__pyx_k_ngram_overlap), 0, 0, 1, 1},
  {&__pyx_n_s_ngram_sequential, __pyx_k_ngram_sequential, sizeof(__pyx_k_ngram_sequential), 0, 0, 1, 1},
  {&__pyx_kp_s_none_of_the_choosen_Terms_are_pr, __pyx_k_none_of_the_choosen_Terms_are_pr, sizeof(__pyx_k_none_of_the_choosen_Terms_are_pr), 0, 0, 1, 0},
  {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_norwegian, __pyx_k_norwegian, sizeof(__pyx_k_norwegian), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_orient, __pyx_k_orient, sizeof(__pyx_k_orient), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_output_path_file, __pyx_k_output_path_file, sizeof(__pyx_k_output_path_file), 0, 0, 1, 1},
  {&__pyx_n_s_output_path_folder, __pyx_k_output_path_folder, sizeof(__pyx_k_output_path_folder), 0, 0, 1, 1},
  {&__pyx_kp_b_output_token_txt, __pyx_k_output_token_txt, sizeof(__pyx_k_output_token_txt), 0, 0, 0, 0},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_past_builtins, __pyx_k_past_builtins, sizeof(__pyx_k_past_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_path_2documents_file, __pyx_k_path_2documents_file, sizeof(__pyx_k_path_2documents_file), 0, 0, 1, 1},
  {&__pyx_n_s_path_2file, __pyx_k_path_2file, sizeof(__pyx_k_path_2file), 0, 0, 1, 1},
  {&__pyx_n_s_path_2folder, __pyx_k_path_2folder, sizeof(__pyx_k_path_2folder), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_persian, __pyx_k_persian, sizeof(__pyx_k_persian), 0, 0, 1, 1},
  {&__pyx_n_s_pkg_resources, __pyx_k_pkg_resources, sizeof(__pyx_k_pkg_resources), 0, 0, 1, 1},
  {&__pyx_n_s_polish, __pyx_k_polish, sizeof(__pyx_k_polish), 0, 0, 1, 1},
  {&__pyx_n_s_porter2_stemmer, __pyx_k_porter2_stemmer, sizeof(__pyx_k_porter2_stemmer), 0, 0, 1, 1},
  {&__pyx_n_s_portuguese, __pyx_k_portuguese, sizeof(__pyx_k_portuguese), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_every_rows, __pyx_k_print_every_rows, sizeof(__pyx_k_print_every_rows), 0, 0, 1, 1},
  {&__pyx_n_s_py_version, __pyx_k_py_version, sizeof(__pyx_k_py_version), 0, 0, 1, 1},
  {&__pyx_n_s_raise_with_traceback, __pyx_k_raise_with_traceback, sizeof(__pyx_k_raise_with_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_read_csv, __pyx_k_read_csv, sizeof(__pyx_k_read_csv), 0, 0, 1, 1},
  {&__pyx_n_s_read_delimiter, __pyx_k_read_delimiter, sizeof(__pyx_k_read_delimiter), 0, 0, 1, 1},
  {&__pyx_n_s_read_file_delimiter, __pyx_k_read_file_delimiter, sizeof(__pyx_k_read_file_delimiter), 0, 0, 1, 1},
  {&__pyx_n_s_remove_numbers, __pyx_k_remove_numbers, sizeof(__pyx_k_remove_numbers), 0, 0, 1, 1},
  {&__pyx_n_s_remove_punctuation_string, __pyx_k_remove_punctuation_string, sizeof(__pyx_k_remove_punctuation_string), 0, 0, 1, 1},
  {&__pyx_n_s_remove_punctuation_vector, __pyx_k_remove_punctuation_vector, sizeof(__pyx_k_remove_punctuation_vector), 0, 0, 1, 1},
  {&__pyx_n_s_remove_stopwords, __pyx_k_remove_stopwords, sizeof(__pyx_k_remove_stopwords), 0, 0, 1, 1},
  {&__pyx_n_s_resource_filename, __pyx_k_resource_filename, sizeof(__pyx_k_resource_filename), 0, 0, 1, 1},
  {&__pyx_n_s_result_nested, __pyx_k_result_nested, sizeof(__pyx_k_result_nested), 0, 0, 1, 1},
  {&__pyx_kp_s_returns_an_empty_sparse_matrix, __pyx_k_returns_an_empty_sparse_matrix, sizeof(__pyx_k_returns_an_empty_sparse_matrix), 0, 0, 1, 0},
  {&__pyx_n_s_romanian, __pyx_k_romanian, sizeof(__pyx_k_romanian), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
  {&__pyx_kp_s_run_first_one_of_the_document_te, __pyx_k_run_first_one_of_the_document_te, sizeof(__pyx_k_run_first_one_of_the_document_te), 0, 0, 1, 0},
  {&__pyx_kp_s_run_first_one_of_the_document_te_2, __pyx_k_run_first_one_of_the_document_te_2, sizeof(__pyx_k_run_first_one_of_the_document_te_2), 0, 0, 1, 0},
  {&__pyx_kp_s_run_first_the_Term_Matrix_method, __pyx_k_run_first_the_Term_Matrix_method, sizeof(__pyx_k_run_first_the_Term_Matrix_method), 0, 0, 1, 0},
  {&__pyx_n_s_russian, __pyx_k_russian, sizeof(__pyx_k_russian), 0, 0, 1, 1},
  {&__pyx_n_s_save_2single_file, __pyx_k_save_2single_file, sizeof(__pyx_k_save_2single_file), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_sentence1, __pyx_k_sentence1, sizeof(__pyx_k_sentence1), 0, 0, 1, 1},
  {&__pyx_n_s_sentence2, __pyx_k_sentence2, sizeof(__pyx_k_sentence2), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_n_s_separator, __pyx_k_separator, sizeof(__pyx_k_separator), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_skip_distance, __pyx_k_skip_distance, sizeof(__pyx_k_skip_distance), 0, 0, 1, 1},
  {&__pyx_n_s_skip_n_gram, __pyx_k_skip_n_gram, sizeof(__pyx_k_skip_n_gram), 0, 0, 1, 1},
  {&__pyx_n_s_slovak, __pyx_k_slovak, sizeof(__pyx_k_slovak), 0, 0, 1, 1},
  {&__pyx_n_s_slovenian, __pyx_k_slovenian, sizeof(__pyx_k_slovenian), 0, 0, 1, 1},
  {&__pyx_n_s_somalia, __pyx_k_somalia, sizeof(__pyx_k_somalia), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_sort_terms, __pyx_k_sort_terms, sizeof(__pyx_k_sort_terms), 0, 0, 1, 1},
  {&__pyx_n_s_spanish, __pyx_k_spanish, sizeof(__pyx_k_spanish), 0, 0, 1, 1},
  {&__pyx_n_s_sparsity_cols, __pyx_k_sparsity_cols, sizeof(__pyx_k_sparsity_cols), 0, 0, 1, 1},
  {&__pyx_n_s_sparsity_counts, __pyx_k_sparsity_counts, sizeof(__pyx_k_sparsity_counts), 0, 0, 1, 1},
  {&__pyx_kp_s_sparsity_of_the_matrix, __pyx_k_sparsity_of_the_matrix, sizeof(__pyx_k_sparsity_of_the_matrix), 0, 0, 1, 0},
  {&__pyx_n_s_sparsity_rows, __pyx_k_sparsity_rows, sizeof(__pyx_k_sparsity_rows), 0, 0, 1, 1},
  {&__pyx_n_s_sparsity_terms, __pyx_k_sparsity_terms, sizeof(__pyx_k_sparsity_terms), 0, 0, 1, 1},
  {&__pyx_n_s_sparsity_thresh, __pyx_k_sparsity_thresh, sizeof(__pyx_k_sparsity_thresh), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_split_separator, __pyx_k_split_separator, sizeof(__pyx_k_split_separator), 0, 0, 1, 1},
  {&__pyx_n_s_split_string, __pyx_k_split_string, sizeof(__pyx_k_split_string), 0, 0, 1, 1},
  {&__pyx_n_s_start_query, __pyx_k_start_query, sizeof(__pyx_k_start_query), 0, 0, 1, 1},
  {&__pyx_n_s_stemmer, __pyx_k_stemmer, sizeof(__pyx_k_stemmer), 0, 0, 1, 1},
  {&__pyx_n_s_stemmer_batches, __pyx_k_stemmer_batches, sizeof(__pyx_k_stemmer_batches), 0, 0, 1, 1},
  {&__pyx_n_s_stemmer_gamma, __pyx_k_stemmer_gamma, sizeof(__pyx_k_stemmer_gamma), 0, 0, 1, 1},
  {&__pyx_n_s_stemmer_ngram, __pyx_k_stemmer_ngram, sizeof(__pyx_k_stemmer_ngram), 0, 0, 1, 1},
  {&__pyx_n_s_stemmer_truncate, __pyx_k_stemmer_truncate, sizeof(__pyx_k_stemmer_truncate), 0, 0, 1, 1},
  {&__pyx_n_s_stopwords, __pyx_k_stopwords, sizeof(__pyx_k_stopwords), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_swahili, __pyx_k_swahili, sizeof(__pyx_k_swahili), 0, 0, 1, 1},
  {&__pyx_n_s_swedish, __pyx_k_swedish, sizeof(__pyx_k_swedish), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_term, __pyx_k_term, sizeof(__pyx_k_term), 0, 0, 1, 1},
  {&__pyx_kp_s_term_does_not_exist_in_the_term, __pyx_k_term_does_not_exist_in_the_term, sizeof(__pyx_k_term_does_not_exist_in_the_term), 0, 0, 1, 0},
  {&__pyx_n_s_terms, __pyx_k_terms, sizeof(__pyx_k_terms), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_textTinyPy, __pyx_k_textTinyPy, sizeof(__pyx_k_textTinyPy), 0, 0, 1, 1},
  {&__pyx_n_s_tf_idf, __pyx_k_tf_idf, sizeof(__pyx_k_tf_idf), 0, 0, 1, 1},
  {&__pyx_kp_s_the, __pyx_k_the, sizeof(__pyx_k_the), 0, 0, 1, 0},
  {&__pyx_kp_s_the_LOCALE_UTF_parameter_should, __pyx_k_the_LOCALE_UTF_parameter_should, sizeof(__pyx_k_the_LOCALE_UTF_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_REMOVE_characters_parameter, __pyx_k_the_REMOVE_characters_parameter, sizeof(__pyx_k_the_REMOVE_characters_parameter), 0, 0, 1, 0},
  {&__pyx_kp_s_the_Terms_parameter_should_be_a, __pyx_k_the_Terms_parameter_should_be_a, sizeof(__pyx_k_the_Terms_parameter_should_be_a), 0, 0, 1, 0},
  {&__pyx_kp_s_the_as_token_parameter_should_be, __pyx_k_the_as_token_parameter_should_be, sizeof(__pyx_k_the_as_token_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_batches_parameter_should_be, __pyx_k_the_batches_parameter_should_be, sizeof(__pyx_k_the_batches_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_batches_parameter_should_be_2, __pyx_k_the_batches_parameter_should_be_2, sizeof(__pyx_k_the_batches_parameter_should_be_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_characters_parameter_should, __pyx_k_the_characters_parameter_should, sizeof(__pyx_k_the_characters_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_concat_delimiter_parameter_s, __pyx_k_the_concat_delimiter_parameter_s, sizeof(__pyx_k_the_concat_delimiter_parameter_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_diagonal_parameter_should_be, __pyx_k_the_diagonal_parameter_should_be, sizeof(__pyx_k_the_diagonal_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_dice_n_gram_parameter_should, __pyx_k_the_dice_n_gram_parameter_should, sizeof(__pyx_k_the_dice_n_gram_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_dice_thresh_parameter_should, __pyx_k_the_dice_thresh_parameter_should, sizeof(__pyx_k_the_dice_thresh_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_empty_key_parameter_should_b, __pyx_k_the_empty_key_parameter_should_b, sizeof(__pyx_k_the_empty_key_parameter_should_b), 0, 0, 1, 0},
  {&__pyx_kp_s_the_end_query_parameter_should_b, __pyx_k_the_end_query_parameter_should_b, sizeof(__pyx_k_the_end_query_parameter_should_b), 0, 0, 1, 0},
  {&__pyx_kp_s_the_file_delimiter_parameter_sho, __pyx_k_the_file_delimiter_parameter_sho, sizeof(__pyx_k_the_file_delimiter_parameter_sho), 0, 0, 1, 0},
  {&__pyx_kp_s_the_file_delimiter_should_be_a_s, __pyx_k_the_file_delimiter_should_be_a_s, sizeof(__pyx_k_the_file_delimiter_should_be_a_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_increment_batch_no_parameter, __pyx_k_the_increment_batch_no_parameter, sizeof(__pyx_k_the_increment_batch_no_parameter), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_file_parameter_should, __pyx_k_the_input_file_parameter_should, sizeof(__pyx_k_the_input_file_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_file_parameter_should_2, __pyx_k_the_input_file_parameter_should_2, sizeof(__pyx_k_the_input_file_parameter_should_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_list_parameter_should, __pyx_k_the_input_list_parameter_should, sizeof(__pyx_k_the_input_list_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_path_file_parameter_sh, __pyx_k_the_input_path_file_parameter_sh, sizeof(__pyx_k_the_input_path_file_parameter_sh), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_path_file_parameter_sh_2, __pyx_k_the_input_path_file_parameter_sh_2, sizeof(__pyx_k_the_input_path_file_parameter_sh_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_path_folder_parameter, __pyx_k_the_input_path_folder_parameter, sizeof(__pyx_k_the_input_path_folder_parameter), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_path_folder_parameter_2, __pyx_k_the_input_path_folder_parameter_2, sizeof(__pyx_k_the_input_path_folder_parameter_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_path_folder_parameter_3, __pyx_k_the_input_path_folder_parameter_3, sizeof(__pyx_k_the_input_path_folder_parameter_3), 0, 0, 1, 0},
  {&__pyx_kp_s_the_input_string_parameter_shoul, __pyx_k_the_input_string_parameter_shoul, sizeof(__pyx_k_the_input_string_parameter_shoul), 0, 0, 1, 0},
  {&__pyx_kp_s_the_keep_parameter_should_be_of, __pyx_k_the_keep_parameter_should_be_of, sizeof(__pyx_k_the_keep_parameter_should_be_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_keep_terms_parameter_should, __pyx_k_the_keep_terms_parameter_should, sizeof(__pyx_k_the_keep_terms_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_keep_terms_parameter_should_2, __pyx_k_the_keep_terms_parameter_should_2, sizeof(__pyx_k_the_keep_terms_parameter_should_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_language_parameter_should_be, __pyx_k_the_language_parameter_should_be, sizeof(__pyx_k_the_language_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_language_parameter_should_be_2, __pyx_k_the_language_parameter_should_be_2, sizeof(__pyx_k_the_language_parameter_should_be_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_max_n_gram_parameter_should, __pyx_k_the_max_n_gram_parameter_should, sizeof(__pyx_k_the_max_n_gram_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_max_n_gram_parameter_should_2, __pyx_k_the_max_n_gram_parameter_should_2, sizeof(__pyx_k_the_max_n_gram_parameter_should_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_max_num_char_parameter_shoul, __pyx_k_the_max_num_char_parameter_shoul, sizeof(__pyx_k_the_max_num_char_parameter_shoul), 0, 0, 1, 0},
  {&__pyx_kp_s_the_max_num_chars_parameter_shou, __pyx_k_the_max_num_chars_parameter_shou, sizeof(__pyx_k_the_max_num_chars_parameter_shou), 0, 0, 1, 0},
  {&__pyx_kp_s_the_min_lines_parameter_should_b, __pyx_k_the_min_lines_parameter_should_b, sizeof(__pyx_k_the_min_lines_parameter_should_b), 0, 0, 1, 0},
  {&__pyx_kp_s_the_min_n_gram_parameter_should, __pyx_k_the_min_n_gram_parameter_should, sizeof(__pyx_k_the_min_n_gram_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_min_num_char_parameter_shoul, __pyx_k_the_min_num_char_parameter_shoul, sizeof(__pyx_k_the_min_num_char_parameter_shoul), 0, 0, 1, 0},
  {&__pyx_kp_s_the_most_frequent_terms_method_i, __pyx_k_the_most_frequent_terms_method_i, sizeof(__pyx_k_the_most_frequent_terms_method_i), 0, 0, 1, 0},
  {&__pyx_kp_s_the_n_gram_delimiter_parameter_s, __pyx_k_the_n_gram_delimiter_parameter_s, sizeof(__pyx_k_the_n_gram_delimiter_parameter_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_n_gram_parameter_should_be_o, __pyx_k_the_n_gram_parameter_should_be_o, sizeof(__pyx_k_the_n_gram_parameter_should_be_o), 0, 0, 1, 0},
  {&__pyx_kp_s_the_n_grams_parameter_should_be, __pyx_k_the_n_grams_parameter_should_be, sizeof(__pyx_k_the_n_grams_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_n_grams_parameter_should_be_2, __pyx_k_the_n_grams_parameter_should_be_2, sizeof(__pyx_k_the_n_grams_parameter_should_be_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_number_of_threads_should_be, __pyx_k_the_number_of_threads_should_be, sizeof(__pyx_k_the_number_of_threads_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_number_parameter_should_be_o, __pyx_k_the_number_parameter_should_be_o, sizeof(__pyx_k_the_number_parameter_should_be_o), 0, 0, 1, 0},
  {&__pyx_kp_s_the_output_path_file_parameter_s, __pyx_k_the_output_path_file_parameter_s, sizeof(__pyx_k_the_output_path_file_parameter_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_output_path_folder_parameter, __pyx_k_the_output_path_folder_parameter, sizeof(__pyx_k_the_output_path_folder_parameter), 0, 0, 1, 0},
  {&__pyx_kp_s_the_output_path_folder_parameter_2, __pyx_k_the_output_path_folder_parameter_2, sizeof(__pyx_k_the_output_path_folder_parameter_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_output_path_folder_parameter_3, __pyx_k_the_output_path_folder_parameter_3, sizeof(__pyx_k_the_output_path_folder_parameter_3), 0, 0, 1, 0},
  {&__pyx_kp_s_the_path_2documents_file_paramet, __pyx_k_the_path_2documents_file_paramet, sizeof(__pyx_k_the_path_2documents_file_paramet), 0, 0, 1, 0},
  {&__pyx_kp_s_the_path_2documents_file_paramet_2, __pyx_k_the_path_2documents_file_paramet_2, sizeof(__pyx_k_the_path_2documents_file_paramet_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_path_2file_parameter_should, __pyx_k_the_path_2file_parameter_should, sizeof(__pyx_k_the_path_2file_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_path_2file_parameter_should_2, __pyx_k_the_path_2file_parameter_should_2, sizeof(__pyx_k_the_path_2file_parameter_should_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_path_2folder_parameter_shoul, __pyx_k_the_path_2folder_parameter_shoul, sizeof(__pyx_k_the_path_2folder_parameter_shoul), 0, 0, 1, 0},
  {&__pyx_kp_s_the_path_2folder_parameter_shoul_2, __pyx_k_the_path_2folder_parameter_shoul_2, sizeof(__pyx_k_the_path_2folder_parameter_shoul_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_print_every_rows_parameter_s, __pyx_k_the_print_every_rows_parameter_s, sizeof(__pyx_k_the_print_every_rows_parameter_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_read_delimiter_parameter_sho, __pyx_k_the_read_delimiter_parameter_sho, sizeof(__pyx_k_the_read_delimiter_parameter_sho), 0, 0, 1, 0},
  {&__pyx_kp_s_the_read_delimiter_should_be_a_s, __pyx_k_the_read_delimiter_should_be_a_s, sizeof(__pyx_k_the_read_delimiter_should_be_a_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_read_file_delimiter_paramete, __pyx_k_the_read_file_delimiter_paramete, sizeof(__pyx_k_the_read_file_delimiter_paramete), 0, 0, 1, 0},
  {&__pyx_kp_s_the_read_file_delimiter_should_b, __pyx_k_the_read_file_delimiter_should_b, sizeof(__pyx_k_the_read_file_delimiter_should_b), 0, 0, 1, 0},
  {&__pyx_kp_s_the_remove_numbers_parameter_sho, __pyx_k_the_remove_numbers_parameter_sho, sizeof(__pyx_k_the_remove_numbers_parameter_sho), 0, 0, 1, 0},
  {&__pyx_kp_s_the_remove_punctuation_string_pa, __pyx_k_the_remove_punctuation_string_pa, sizeof(__pyx_k_the_remove_punctuation_string_pa), 0, 0, 1, 0},
  {&__pyx_kp_s_the_remove_punctuation_vector_pa, __pyx_k_the_remove_punctuation_vector_pa, sizeof(__pyx_k_the_remove_punctuation_vector_pa), 0, 0, 1, 0},
  {&__pyx_kp_s_the_remove_stopwords_parameter_s, __pyx_k_the_remove_stopwords_parameter_s, sizeof(__pyx_k_the_remove_stopwords_parameter_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_rows_parameter_should_be_of, __pyx_k_the_rows_parameter_should_be_of, sizeof(__pyx_k_the_rows_parameter_should_be_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_save_2single_file_parameter, __pyx_k_the_save_2single_file_parameter, sizeof(__pyx_k_the_save_2single_file_parameter), 0, 0, 1, 0},
  {&__pyx_kp_s_the_sentence1_parameter_should_b, __pyx_k_the_sentence1_parameter_should_b, sizeof(__pyx_k_the_sentence1_parameter_should_b), 0, 0, 1, 0},
  {&__pyx_kp_s_the_sentence2_parameter_should_b, __pyx_k_the_sentence2_parameter_should_b, sizeof(__pyx_k_the_sentence2_parameter_should_b), 0, 0, 1, 0},
  {&__pyx_kp_s_the_separator_parameter_should_b, __pyx_k_the_separator_parameter_should_b, sizeof(__pyx_k_the_separator_parameter_should_b), 0, 0, 1, 0},
  {&__pyx_kp_s_the_skip_distance_parameter_shou, __pyx_k_the_skip_distance_parameter_shou, sizeof(__pyx_k_the_skip_distance_parameter_shou), 0, 0, 1, 0},
  {&__pyx_kp_s_the_skip_n_gram_parameter_should, __pyx_k_the_skip_n_gram_parameter_should, sizeof(__pyx_k_the_skip_n_gram_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_sort_terms_parameter_should, __pyx_k_the_sort_terms_parameter_should, sizeof(__pyx_k_the_sort_terms_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_sparsity_thresh_parameter_sh, __pyx_k_the_sparsity_thresh_parameter_sh, sizeof(__pyx_k_the_sparsity_thresh_parameter_sh), 0, 0, 1, 0},
  {&__pyx_kp_s_the_specified_n_gram_is_not_incl, __pyx_k_the_specified_n_gram_is_not_incl, sizeof(__pyx_k_the_specified_n_gram_is_not_incl), 0, 0, 1, 0},
  {&__pyx_kp_s_the_specified_number_is_not_incl, __pyx_k_the_specified_number_is_not_incl, sizeof(__pyx_k_the_specified_number_is_not_incl), 0, 0, 1, 0},
  {&__pyx_kp_s_the_specified_word_is_not_includ, __pyx_k_the_specified_word_is_not_includ, sizeof(__pyx_k_the_specified_word_is_not_includ), 0, 0, 1, 0},
  {&__pyx_kp_s_the_split_separator_parameter_sh, __pyx_k_the_split_separator_parameter_sh, sizeof(__pyx_k_the_split_separator_parameter_sh), 0, 0, 1, 0},
  {&__pyx_kp_s_the_split_string_parameter_shoul, __pyx_k_the_split_string_parameter_shoul, sizeof(__pyx_k_the_split_string_parameter_shoul), 0, 0, 1, 0},
  {&__pyx_kp_s_the_start_query_parameter_should, __pyx_k_the_start_query_parameter_should, sizeof(__pyx_k_the_start_query_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_stemmer_batches_parameter_sh, __pyx_k_the_stemmer_batches_parameter_sh, sizeof(__pyx_k_the_stemmer_batches_parameter_sh), 0, 0, 1, 0},
  {&__pyx_kp_s_the_stemmer_gamma_parameter_shou, __pyx_k_the_stemmer_gamma_parameter_shou, sizeof(__pyx_k_the_stemmer_gamma_parameter_shou), 0, 0, 1, 0},
  {&__pyx_kp_s_the_stemmer_ngram_parameter_shou, __pyx_k_the_stemmer_ngram_parameter_shou, sizeof(__pyx_k_the_stemmer_ngram_parameter_shou), 0, 0, 1, 0},
  {&__pyx_kp_s_the_stemmer_parameter_should_be, __pyx_k_the_stemmer_parameter_should_be, sizeof(__pyx_k_the_stemmer_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_stemmer_truncate_parameter_s, __pyx_k_the_stemmer_truncate_parameter_s, sizeof(__pyx_k_the_stemmer_truncate_parameter_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_tf_idf_parameter_should_be_o, __pyx_k_the_tf_idf_parameter_should_be_o, sizeof(__pyx_k_the_tf_idf_parameter_should_be_o), 0, 0, 1, 0},
  {&__pyx_kp_s_the_threads_parameter_should_be, __pyx_k_the_threads_parameter_should_be, sizeof(__pyx_k_the_threads_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_threads_parameter_should_be_2, __pyx_k_the_threads_parameter_should_be_2, sizeof(__pyx_k_the_threads_parameter_should_be_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_to_array_parameter_should_be, __pyx_k_the_to_array_parameter_should_be, sizeof(__pyx_k_the_to_array_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_to_lower_parameter_should_be, __pyx_k_the_to_lower_parameter_should_be, sizeof(__pyx_k_the_to_lower_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_to_upper_parameter_should_be, __pyx_k_the_to_upper_parameter_should_be, sizeof(__pyx_k_the_to_upper_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_trim_token_parameter_should, __pyx_k_the_trim_token_parameter_should, sizeof(__pyx_k_the_trim_token_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_trimmed_line_parameter_shoul, __pyx_k_the_trimmed_line_parameter_shoul, sizeof(__pyx_k_the_trimmed_line_parameter_shoul), 0, 0, 1, 0},
  {&__pyx_kp_s_the_unit_parameter_should_be_of, __pyx_k_the_unit_parameter_should_be_of, sizeof(__pyx_k_the_unit_parameter_should_be_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_upper_parameter_should_be_of, __pyx_k_the_upper_parameter_should_be_of, sizeof(__pyx_k_the_upper_parameter_should_be_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_vector_documents_parameter_s, __pyx_k_the_vector_documents_parameter_s, sizeof(__pyx_k_the_vector_documents_parameter_s), 0, 0, 1, 0},
  {&__pyx_kp_s_the_verbose_parameter_should_be, __pyx_k_the_verbose_parameter_should_be, sizeof(__pyx_k_the_verbose_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_verbose_parameter_should_be_2, __pyx_k_the_verbose_parameter_should_be_2, sizeof(__pyx_k_the_verbose_parameter_should_be_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_vocabulary_path_file_paramet, __pyx_k_the_vocabulary_path_file_paramet, sizeof(__pyx_k_the_vocabulary_path_file_paramet), 0, 0, 1, 0},
  {&__pyx_kp_s_the_vocabulary_path_parameter_sh, __pyx_k_the_vocabulary_path_parameter_sh, sizeof(__pyx_k_the_vocabulary_path_parameter_sh), 0, 0, 1, 0},
  {&__pyx_kp_s_the_vocabulary_path_parameter_sh_2, __pyx_k_the_vocabulary_path_parameter_sh_2, sizeof(__pyx_k_the_vocabulary_path_parameter_sh_2), 0, 0, 1, 0},
  {&__pyx_kp_s_the_vocabulary_path_parameter_sh_3, __pyx_k_the_vocabulary_path_parameter_sh_3, sizeof(__pyx_k_the_vocabulary_path_parameter_sh_3), 0, 0, 1, 0},
  {&__pyx_kp_s_the_word1_parameter_should_be_of, __pyx_k_the_word1_parameter_should_be_of, sizeof(__pyx_k_the_word1_parameter_should_be_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_word2_parameter_should_be_of, __pyx_k_the_word2_parameter_should_be_of, sizeof(__pyx_k_the_word2_parameter_should_be_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_word_parameter_should_be_of, __pyx_k_the_word_parameter_should_be_of, sizeof(__pyx_k_the_word_parameter_should_be_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_words_vector_parameter_shoul, __pyx_k_the_words_vector_parameter_shoul, sizeof(__pyx_k_the_words_vector_parameter_shoul), 0, 0, 1, 0},
  {&__pyx_kp_s_the_write_2file_parameter_should, __pyx_k_the_write_2file_parameter_should, sizeof(__pyx_k_the_write_2file_parameter_should), 0, 0, 1, 0},
  {&__pyx_kp_s_the_x_vector_parameter_should_be, __pyx_k_the_x_vector_parameter_should_be, sizeof(__pyx_k_the_x_vector_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_xml_path_parameter_should_be, __pyx_k_the_xml_path_parameter_should_be, sizeof(__pyx_k_the_xml_path_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_kp_s_the_xml_root_parameter_should_be, __pyx_k_the_xml_root_parameter_should_be, sizeof(__pyx_k_the_xml_root_parameter_should_be), 0, 0, 1, 0},
  {&__pyx_n_s_threads, __pyx_k_threads, sizeof(__pyx_k_threads), 0, 0, 1, 1},
  {&__pyx_n_s_to_array, __pyx_k_to_array, sizeof(__pyx_k_to_array), 0, 0, 1, 1},
  {&__pyx_n_s_to_lower, __pyx_k_to_lower, sizeof(__pyx_k_to_lower), 0, 0, 1, 1},
  {&__pyx_n_s_to_upper, __pyx_k_to_upper, sizeof(__pyx_k_to_upper), 0, 0, 1, 1},
  {&__pyx_n_s_toarray, __pyx_k_toarray, sizeof(__pyx_k_toarray), 0, 0, 1, 1},
  {&__pyx_n_s_trim_token, __pyx_k_trim_token, sizeof(__pyx_k_trim_token), 0, 0, 1, 1},
  {&__pyx_n_s_trimmed_line, __pyx_k_trimmed_line, sizeof(__pyx_k_trimmed_line), 0, 0, 1, 1},
  {&__pyx_n_s_turkish, __pyx_k_turkish, sizeof(__pyx_k_turkish), 0, 0, 1, 1},
  {&__pyx_kp_s_txt, __pyx_k_txt, sizeof(__pyx_k_txt), 0, 0, 1, 0},
  {&__pyx_n_s_unit, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_kp_s_variable_sums_to_zero, __pyx_k_variable_sums_to_zero, sizeof(__pyx_k_variable_sums_to_zero), 0, 0, 1, 0},
  {&__pyx_n_s_vector_documents, __pyx_k_vector_documents, sizeof(__pyx_k_vector_documents), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
  {&__pyx_n_s_vocabulary_path, __pyx_k_vocabulary_path, sizeof(__pyx_k_vocabulary_path), 0, 0, 1, 1},
  {&__pyx_n_s_vocabulary_path_file, __pyx_k_vocabulary_path_file, sizeof(__pyx_k_vocabulary_path_file), 0, 0, 1, 1},
  {&__pyx_kp_s_warning_the, __pyx_k_warning_the, sizeof(__pyx_k_warning_the), 0, 0, 1, 0},
  {&__pyx_kp_s_warning_the_following_terms_sum, __pyx_k_warning_the_following_terms_sum, sizeof(__pyx_k_warning_the_following_terms_sum), 0, 0, 1, 0},
  {&__pyx_n_s_where, __pyx_k_where, sizeof(__pyx_k_where), 0, 0, 1, 1},
  {&__pyx_n_s_word, __pyx_k_word, sizeof(__pyx_k_word), 0, 0, 1, 1},
  {&__pyx_n_s_word1, __pyx_k_word1, sizeof(__pyx_k_word1), 0, 0, 1, 1},
  {&__pyx_n_s_word2, __pyx_k_word2, sizeof(__pyx_k_word2), 0, 0, 1, 1},
  {&__pyx_n_s_words_vector, __pyx_k_words_vector, sizeof(__pyx_k_words_vector), 0, 0, 1, 1},
  {&__pyx_n_s_write_2file, __pyx_k_write_2file, sizeof(__pyx_k_write_2file), 0, 0, 1, 1},
  {&__pyx_n_s_x_vector, __pyx_k_x_vector, sizeof(__pyx_k_x_vector), 0, 0, 1, 1},
  {&__pyx_n_s_xml_path, __pyx_k_xml_path, sizeof(__pyx_k_xml_path), 0, 0, 1, 1},
  {&__pyx_n_s_xml_root, __pyx_k_xml_root, sizeof(__pyx_k_xml_root), 0, 0, 1, 1},
  {&__pyx_n_s_yoruba, __pyx_k_yoruba, sizeof(__pyx_k_yoruba), 0, 0, 1, 1},
  {&__pyx_n_s_zulu, __pyx_k_zulu, sizeof(__pyx_k_zulu), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 2102, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 2206, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 2396, __pyx_L1_error)
  __pyx_builtin_any = __Pyx_GetBuiltinName(__pyx_n_s_any); if (!__pyx_builtin_any) __PYX_ERR(0, 2400, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "textTinyPy/textTinyPy.pyx":129
 *         IF UNAME_SYSNAME == "Darwin" or UNAME_SYSNAME == "Linux":
 * 
 *             assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if batches is not None:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "textTinyPy/textTinyPy.pyx":139
 *             if not FLAG_path:
 * 
 *                 raise_with_traceback(ValueError('in case that the batches parameter is not None the input_string parameter should be a valid path to a file'))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(read_file_delimiter, basestring), 'the read_file_delimiter parameter should be of type string'
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_in_case_that_the_batches_paramet); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "textTinyPy/textTinyPy.pyx":213
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_the_remove_stopwords_parameter_s); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "textTinyPy/textTinyPy.pyx":359
 *         IF UNAME_SYSNAME == "Darwin" or UNAME_SYSNAME == "Linux":
 * 
 *             assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(LOCALE_UTF, basestring), 'the LOCALE_UTF parameter should be of type string'
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "textTinyPy/textTinyPy.pyx":429
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_the_remove_stopwords_parameter_s); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "textTinyPy/textTinyPy.pyx":580
 *         IF UNAME_SYSNAME == "Darwin" or UNAME_SYSNAME == "Linux":
 * 
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(output_path_folder), "the output_path_folder parameter should be a valid path to a folder"
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "textTinyPy/textTinyPy.pyx":620
 *         ELSE:
 * 
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(start_query, basestring), 'the start_query parameter should be of type string'
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "textTinyPy/textTinyPy.pyx":665
 *         ELSE:
 * 
 *             assert input_path_folder.split('/')[-1] == "", "the input_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(output_path_folder, basestring), 'the output_path_folder parameter should be of type string'
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "textTinyPy/textTinyPy.pyx":675
 *         ELSE:
 * 
 *             assert output_path_folder.split('/')[-1] == "", "the output_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(batches, int) and batches > 1, 'the batches parameter should be of type integer and at least 2'
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "textTinyPy/textTinyPy.pyx":753
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_the_remove_stopwords_parameter_s); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "textTinyPy/textTinyPy.pyx":813
 *             ELSE:
 * 
 *                 assert vocabulary_path.split('/')[-1] == "", "the vocabulary_path parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if vocabulary_path is None:
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "textTinyPy/textTinyPy.pyx":862
 *         ELSE:
 * 
 *             assert input_path_folder.split('/')[-1] == "", "the input_path_folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         assert os.path.exists(input_path_folder), "the input_path_folder parameter should be a valid path to a file"
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "textTinyPy/textTinyPy.pyx":1073
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_the_remove_stopwords_parameter_s); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "textTinyPy/textTinyPy.pyx":1112
 *         ELSE:
 * 
 *             resource_path = '/'.join(('locale', 'locale_stopword_encoding.csv'))             # <<<<<<<<<<<<<<
 * 
 *         path_loc = pkg_resources.resource_filename('textTinyPy', resource_path)
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_s_locale, __pyx_kp_s_locale_stopword_encoding_csv); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "textTinyPy/textTinyPy.pyx":1447
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "textTinyPy/textTinyPy.pyx":1500
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 1500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "textTinyPy/textTinyPy.pyx":1566
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "textTinyPy/textTinyPy.pyx":1646
 *             ELSE:
 * 
 *                 assert path_2folder.split('/')[-1] == "", "the path_2folder parameter should end in slash"             # <<<<<<<<<<<<<<
 * 
 *         if path_2file is not None:
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 1646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "textTinyPy/textTinyPy.pyx":1870
 *         if (vector_documents is None) and (path_2documents_file is None):
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be None but not both"))             # <<<<<<<<<<<<<<
 * 
 *         if (vector_documents is not None) and (path_2documents_file is not None):
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_either_the_vector_documents_or_t); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 1870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "textTinyPy/textTinyPy.pyx":1874
 *         if (vector_documents is not None) and (path_2documents_file is not None):
 * 
 *             raise_with_traceback(ValueError("either the vector_documents or the path_2documents_file can be NOT None but not both"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(sort_terms, bool), 'the sort_terms parameter should be of type boolean'
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_either_the_vector_documents_or_t_2); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 1874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "textTinyPy/textTinyPy.pyx":1945
 *         else:
 * 
 *             raise_with_traceback(ValueError("the remove_stopwords parameter should be either a list of user defined stopwords or a logical parameter ( True or False )"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(min_num_char, int) and min_num_char > 0, 'the min_num_char parameter should be of type integer and greater than 0'
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_the_remove_stopwords_parameter_s); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "textTinyPy/textTinyPy.pyx":2086
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_run_first_the_Term_Matrix_method); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 2086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "textTinyPy/textTinyPy.pyx":2128
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(to_array, bool), 'the to_array parameter should be of type boolean'
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_run_first_the_Term_Matrix_method); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "textTinyPy/textTinyPy.pyx":2181
 *             if self.result_struct_matrix == {}:
 * 
 *                 raise_with_traceback(ValueError("run first one of the 'document_term_matrix', 'term_document_matrix' and/or 'Term_Matrix_Adjust' methods and then require the corpus terms"))             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_run_first_one_of_the_document_te); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 2181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "textTinyPy/textTinyPy.pyx":2200
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         cdef double tmp_val
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_run_first_the_Term_Matrix_method); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "textTinyPy/textTinyPy.pyx":2221
 *         if not self.dtm_or_tdm:
 * 
 *             raise_with_traceback(ValueError("run first one of the 'document_term_matrix' or 'term_document_matrix' methods"))             # <<<<<<<<<<<<<<
 * 
 *         assert isinstance(sparsity_thresh, float) and (sparsity_thresh <= 1.0 and sparsity_thresh > 0.0) , "the sparsity_thresh parameter should be of type float and it's range should be between 0.0 and 1.0"
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_run_first_one_of_the_document_te_2); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 2221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "textTinyPy/textTinyPy.pyx":2305
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         if self.adjust_sparsity_matrix == {}:
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_run_first_the_Term_Matrix_method); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "textTinyPy/textTinyPy.pyx":2317
 *         if not self.FLAG_output_long:
 * 
 *             raise_with_traceback(ValueError("the most_frequent_terms method is invalid if the normalize parameter is not None or the tf_idf parameter is TRUE"))             # <<<<<<<<<<<<<<
 * 
 *         if keep_terms is not None:
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_the_most_frequent_terms_method_i); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 2317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "textTinyPy/textTinyPy.pyx":2364
 *         if self.result_struct_matrix == {}:
 * 
 *             raise_with_traceback(ValueError('run first the Term_Matrix method'))             # <<<<<<<<<<<<<<
 * 
 *         if self.adjust_sparsity_matrix == {}:
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_run_first_the_Term_Matrix_method); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "textTinyPy/textTinyPy.pyx":2416
 *         if single_trgt_idx == []:
 * 
 *             raise_with_traceback(ValueError("none of the choosen Terms are present in the terms list"))             # <<<<<<<<<<<<<<
 * 
 *         if self.FLAG_doc_term_mat:
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_none_of_the_choosen_Terms_are_pr); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 2416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_1000000000 = PyInt_FromLong(1000000000L); if (unlikely(!__pyx_int_1000000000)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC inittextTinyPy(void); /*proto*/
PyMODINIT_FUNC inittextTinyPy(void)
#else
PyMODINIT_FUNC PyInit_textTinyPy(void); /*proto*/
PyMODINIT_FUNC PyInit_textTinyPy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_textTinyPy(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 2, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("textTinyPy", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 2, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 2, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 2, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_textTinyPy__textTinyPy) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 2, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "textTinyPy.textTinyPy")) {
      if (unlikely(PyDict_SetItemString(modules, "textTinyPy.textTinyPy", __pyx_m) < 0)) __PYX_ERR(0, 2, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_10textTinyPy_10textTinyPy_tokenizer) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_type_10textTinyPy_10textTinyPy_tokenizer.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "tokenizer", (PyObject *)&__pyx_type_10textTinyPy_10textTinyPy_tokenizer) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_ptype_10textTinyPy_10textTinyPy_tokenizer = &__pyx_type_10textTinyPy_10textTinyPy_tokenizer;
  if (PyType_Ready(&__pyx_type_10textTinyPy_10textTinyPy_big_text_files) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_type_10textTinyPy_10textTinyPy_big_text_files.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "big_text_files", (PyObject *)&__pyx_type_10textTinyPy_10textTinyPy_big_text_files) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_ptype_10textTinyPy_10textTinyPy_big_text_files = &__pyx_type_10textTinyPy_10textTinyPy_big_text_files;
  if (PyType_Ready(&__pyx_type_10textTinyPy_10textTinyPy_utils) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_type_10textTinyPy_10textTinyPy_utils.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "utils", (PyObject *)&__pyx_type_10textTinyPy_10textTinyPy_utils) < 0) __PYX_ERR(0, 882, __pyx_L1_error)
  __pyx_ptype_10textTinyPy_10textTinyPy_utils = &__pyx_type_10textTinyPy_10textTinyPy_utils;
  if (PyType_Ready(&__pyx_type_10textTinyPy_10textTinyPy_token_stats) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  __pyx_type_10textTinyPy_10textTinyPy_token_stats.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "token_stats", (PyObject *)&__pyx_type_10textTinyPy_10textTinyPy_token_stats) < 0) __PYX_ERR(0, 1401, __pyx_L1_error)
  __pyx_ptype_10textTinyPy_10textTinyPy_token_stats = &__pyx_type_10textTinyPy_10textTinyPy_token_stats;
  if (PyType_Ready(&__pyx_type_10textTinyPy_10textTinyPy_docs_matrix) < 0) __PYX_ERR(0, 1792, __pyx_L1_error)
  __pyx_type_10textTinyPy_10textTinyPy_docs_matrix.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "docs_matrix", (PyObject *)&__pyx_type_10textTinyPy_10textTinyPy_docs_matrix) < 0) __PYX_ERR(0, 1792, __pyx_L1_error)
  __pyx_ptype_10textTinyPy_10textTinyPy_docs_matrix = &__pyx_type_10textTinyPy_10textTinyPy_docs_matrix;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  #endif

  /* "textTinyPy/textTinyPy.pyx":6
 * 
 * from __future__ import print_function                    # print function for both python 2 and 3
 * from past.builtins import basestring                     # str for both python 2 and 3             # <<<<<<<<<<<<<<
 * from future.utils import raise_with_traceback            # raise ValueError for both python2 and 3
 * from builtins import int                                 # matches both int and long on python 2
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_basestring);
  __Pyx_GIVEREF(__pyx_n_s_basestring);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_basestring);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_past_builtins, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_basestring); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_basestring, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":7
 * from __future__ import print_function                    # print function for both python 2 and 3
 * from past.builtins import basestring                     # str for both python 2 and 3
 * from future.utils import raise_with_traceback            # raise ValueError for both python2 and 3             # <<<<<<<<<<<<<<
 * from builtins import int                                 # matches both int and long on python 2
 * from future.utils import iteritems                       # iterate over dictionaries for both python 2 and 3
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_raise_with_traceback);
  __Pyx_GIVEREF(__pyx_n_s_raise_with_traceback);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_raise_with_traceback);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_future_utils, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_raise_with_traceback); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_raise_with_traceback, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":8
 * from past.builtins import basestring                     # str for both python 2 and 3
 * from future.utils import raise_with_traceback            # raise ValueError for both python2 and 3
 * from builtins import int                                 # matches both int and long on python 2             # <<<<<<<<<<<<<<
 * from future.utils import iteritems                       # iterate over dictionaries for both python 2 and 3
 * from future.utils import listvalues                      # extract the values from a dictionary in python 2 and 3
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_int);
  __Pyx_GIVEREF(__pyx_n_s_int);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_int);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_builtins, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_int); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_int, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":9
 * from future.utils import raise_with_traceback            # raise ValueError for both python2 and 3
 * from builtins import int                                 # matches both int and long on python 2
 * from future.utils import iteritems                       # iterate over dictionaries for both python 2 and 3             # <<<<<<<<<<<<<<
 * from future.utils import listvalues                      # extract the values from a dictionary in python 2 and 3
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_iteritems);
  __Pyx_GIVEREF(__pyx_n_s_iteritems);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_iteritems);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_future_utils, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_iteritems); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iteritems, __pyx_t_2) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":10
 * from builtins import int                                 # matches both int and long on python 2
 * from future.utils import iteritems                       # iterate over dictionaries for both python 2 and 3
 * from future.utils import listvalues                      # extract the values from a dictionary in python 2 and 3             # <<<<<<<<<<<<<<
 * 
 * import sys
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_listvalues);
  __Pyx_GIVEREF(__pyx_n_s_listvalues);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_listvalues);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_future_utils, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_listvalues); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_listvalues, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":12
 * from future.utils import listvalues                      # extract the values from a dictionary in python 2 and 3
 * 
 * import sys             # <<<<<<<<<<<<<<
 * py_version = sys.version_info
 * if py_version.major == 2:
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":13
 * 
 * import sys
 * py_version = sys.version_info             # <<<<<<<<<<<<<<
 * if py_version.major == 2:
 *     MAX_VAL = sys.maxint         # python 2 maximum integer
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_version_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_py_version, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "textTinyPy/textTinyPy.pyx":14
 * import sys
 * py_version = sys.version_info
 * if py_version.major == 2:             # <<<<<<<<<<<<<<
 *     MAX_VAL = sys.maxint         # python 2 maximum integer
 * else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_py_version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_major); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "textTinyPy/textTinyPy.pyx":15
 * py_version = sys.version_info
 * if py_version.major == 2:
 *     MAX_VAL = sys.maxint         # python 2 maximum integer             # <<<<<<<<<<<<<<
 * else:
 *     MAX_VAL = sys.maxsize        # python 3 maximum integer
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_maxint); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAX_VAL, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "textTinyPy/textTinyPy.pyx":14
 * import sys
 * py_version = sys.version_info
 * if py_version.major == 2:             # <<<<<<<<<<<<<<
 *     MAX_VAL = sys.maxint         # python 2 maximum integer
 * else:
 */
    goto __pyx_L2;
  }

  /* "textTinyPy/textTinyPy.pyx":17
 *     MAX_VAL = sys.maxint         # python 2 maximum integer
 * else:
 *     MAX_VAL = sys.maxsize        # python 3 maximum integer             # <<<<<<<<<<<<<<
 * #-----------------------------------------------------------------------------------------------------------------
 * 
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_maxsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_MAX_VAL, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L2:;

  /* "textTinyPy/textTinyPy.pyx":24
 * # python dependencies
 * 
 * from scipy.sparse import csr_matrix, csc_matrix             # <<<<<<<<<<<<<<
 * import pandas as pd
 * import numpy as np
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_csr_matrix);
  __Pyx_GIVEREF(__pyx_n_s_csr_matrix);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_csr_matrix);
  __Pyx_INCREF(__pyx_n_s_csc_matrix);
  __Pyx_GIVEREF(__pyx_n_s_csc_matrix);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_csc_matrix);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_csr_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csr_matrix, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_csc_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_csc_matrix, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":25
 * 
 * from scipy.sparse import csr_matrix, csc_matrix
 * import pandas as pd             # <<<<<<<<<<<<<<
 * import numpy as np
 * import os
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pandas, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":26
 * from scipy.sparse import csr_matrix, csc_matrix
 * import pandas as pd
 * import numpy as np             # <<<<<<<<<<<<<<
 * import os
 * import sys
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":27
 * import pandas as pd
 * import numpy as np
 * import os             # <<<<<<<<<<<<<<
 * import sys
 * import pkg_resources           # load data from a subdirectory
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":28
 * import numpy as np
 * import os
 * import sys             # <<<<<<<<<<<<<<
 * import pkg_resources           # load data from a subdirectory
 * #--------------------------------------------------
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":29
 * import os
 * import sys
 * import pkg_resources           # load data from a subdirectory             # <<<<<<<<<<<<<<
 * #--------------------------------------------------
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pkg_resources, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pkg_resources, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":75
 *                       REMOVE_characters = "", remove_punctuation_string = False, remove_numbers = False, trim_token = False, split_string = False,
 * 
 *                       separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False, min_num_char = 1, max_num_char = MAX_VAL,             # <<<<<<<<<<<<<<
 * 
 *                       stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__4 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":321
 *                            remove_numbers = False, trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,
 * 
 *                            min_num_char = 1, max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ", skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4,             # <<<<<<<<<<<<<<
 * 
 *                            stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, vocabulary_path = None, concat_delimiter = None, path_2folder = "", threads = 1, verbose = False):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__10 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":642
 *                            trim_token = False, REMOVE_characters = "", split_string = False, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False,
 * 
 *                            remove_stopwords = False, min_num_char = 1, max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, n_gram_delimiter = " ",             # <<<<<<<<<<<<<<
 * 
 *                            skip_n_gram = 1, skip_distance = 0, stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__15 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":917
 *     def vocabulary_parser(self, input_path_file = None, vocabulary_path_file = None, start_query = None, end_query = None, min_lines = 1, trimmed_line = False, language = 'english', LOCALE_UTF = "",
 * 
 *                           max_num_char = MAX_VAL, REMOVE_characters = "", to_lower = False, to_upper = False, remove_punctuation_string = False, remove_punctuation_vector = False, remove_numbers = False,             # <<<<<<<<<<<<<<
 * 
 *                           trim_token = False, split_string = False, separator = " \r\n\t.,;:()?!//", remove_stopwords = False, min_num_char = 1, stemmer = None, min_n_gram = 1, max_n_gram = 1,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__21 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":1846
 *                     split_string = True, separator = " \r\n\t.,;:()?!//", remove_punctuation_vector = False, remove_stopwords = False,  min_num_char = 1,
 * 
 *                     max_num_char = MAX_VAL, stemmer = None, min_n_gram = 1, max_n_gram = 1, skip_n_gram = 1, skip_distance = 0, n_gram_delimiter = " ",             # <<<<<<<<<<<<<<
 * 
 *                     stemmer_ngram = 4, stemmer_gamma = 0.0, stemmer_truncate = 3, stemmer_batches = 1, print_every_rows = 1000, normalize = None, tf_idf = False,
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_MAX_VAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__29 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "textTinyPy/textTinyPy.pyx":2
 * 
 * #-----------------------------------------------------------------------------------------------------------------             # <<<<<<<<<<<<<<
 * # compatibility imports for python 2 and python 3   [ http://python-future.org/compatible_idioms.html ]
 * 
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct__struct_cor_assoc")
 * cdef object __pyx_convert_vector_to_py_struct__struct_cor_assoc(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init textTinyPy.textTinyPy", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init textTinyPy.textTinyPy");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs, NULL);
}
#endif  // CYTHON_FAST_PYCCALL

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = PyThreadState_GET();
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif  // CPython < 3.6
#endif  // CYTHON_FAST_PYCALL

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetItemInt */
    static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* StringJoin */
    #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* PyObjectCallMethod1 */
    static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* append */
    static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* None */
    static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SliceObject */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectCallNoArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* Import */
      static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
      static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyIntBinop */
      #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* CodeObjectCache */
      static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
      #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
      #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
      static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_struct__struct_cor_assoc(struct struct_cor_assoc s) {
        PyObject* res;
        PyObject* member;
        res = PyDict_New(); if (unlikely(!res)) return NULL;
        member = __pyx_convert_vector_to_py_std_3a__3a_string(s.term); if (unlikely(!member)) goto bad;
        if (unlikely(PyDict_SetItem(res, __pyx_n_s_term, member) < 0)) goto bad;
        Py_DECREF(member);
        member = __pyx_convert_vector_to_py_double(s.correlation); if (unlikely(!member)) goto bad;
        if (unlikely(PyDict_SetItem(res, __pyx_n_s_correlation, member) < 0)) goto bad;
        Py_DECREF(member);
        return res;
        bad:
        Py_XDECREF(member);
        Py_DECREF(res);
        return NULL;
      }
      /* CIntFromPy */
      static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
      static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
      static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
      static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
